<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Structures</name>
    </assembly>
    <members>
        <member name="T:Tekla.Structures.Assertion">
            <summary>
            Defines an assertion by the method it failed in and the messages it
            provided.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Assertion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Assertion"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="detailedMessage">
            The detailed message.
            </param>
            <param name="methodName">
            The method name.
            </param>
            <exception>
                <cref>ArgumentNullException</cref>
            </exception>
        </member>
        <member name="P:Tekla.Structures.Assertion.Message">
            <summary>
            Gets the message provided by the assertion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Assertion.DetailedMessage">
            <summary>
            Gets the detailed message provided by the assertion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Assertion.MethodName">
            <summary>
            Gets the name of the method the assertion failed in.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Assertion.ToString">
            <summary>
            The tostring.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Assertion.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Assertion.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            Calculated as recommended at http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Tekla.Structures.PositionTypeEnum">
            <summary>
            The position type for connections and details.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PositionTypeEnum.MIDDLE_PLANE">
            <summary>
            The middle plane position type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PositionTypeEnum.BOX_PLANE">
            <summary>
            The box plane position type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PositionTypeEnum.COLLISION_PLANE">
            <summary>
            The collision plane position type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PositionTypeEnum.END_END_PLANE">
            <summary>
            The end plane position type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PositionTypeEnum.GUSSET_PLANE">
            <summary>
            The gusset plane position type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.DetailTypeEnum">
            <summary>
            The detail type defines what kind of a detail is in question.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DetailTypeEnum.END">
            <summary>
            With the detail type end, the X-axis is oriented towards the part's center point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DetailTypeEnum.INTERMEDIATE">
            <summary>
            With the detail type intermediate, the X-axis is oriented towards the end point of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.DetailTypeEnum.INTERMEDIATE_REVERSE">
            <summary>
            With the detail type intermediate reverse, the X-axis is oriented towards the start point of the part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.AutoDirectionTypeEnum">
            <summary>
            The auto direction type defines how a connection or detail coordinate system will be oriented automatically.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_NA">
            <summary>
            The auto direction will not be available.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_BASIC">
            <summary>
            The auto direction type for usual joints will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_DIAGONAL">
            <summary>
            The auto direction type for diagonal joints will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_SPLICE">
            <summary>
            The auto direction type for splices will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_DETAIL">
            <summary>
            The auto direction type for details will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_GLOBAL_Z">
            <summary>
            The auto direction type with joint direction at the global Z will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_SEATING">
            <summary>
            The auto direction type for seating joints will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_PRIMARY_X">
            <summary>
            The auto direction type with joint direction parallel to the primary X-axis will be used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.AutoDirectionTypeEnum.AUTODIR_FROM_ATTRIBUTE_FILE">
            <summary>
            The auto direction type is fetched from the loaded attribute file.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ConnectionStatusEnum">
            <summary>
            The status type defines what the status of a connection or a detail is.
            In the model the color of the symbol (green, yellow, red) indicates the status.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ConnectionStatusEnum.STATUS_UNKNOWN">
            <summary>
            The status is unknown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ConnectionStatusEnum.STATUS_OK">
            <summary>
            The status is ok and the symbol color is green.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ConnectionStatusEnum.STATUS_WARNING">
            <summary>
            The status indicates a warning and the symbol color is yellow.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ConnectionStatusEnum.STATUS_ERROR">
            <summary>
            The status indicates an error and the symbol color is red.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ComponentDefinitionTypeEnum">
            <summary>
            The component definition type tells what kind of a component is in question.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentDefinitionTypeEnum.SYSTEM">
            <summary>
            With the type system, component is defined using developer-kit
            </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentDefinitionTypeEnum.CUSTOM">
            <summary>
            With the type custom, component is defined as custom component
            </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentDefinitionTypeEnum.DOTNET">
            <summary>
            With the type dotnet, component is defined using .NET plug-in interface
            </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentDefinitionTypeEnum.DOTNET_CONNECTION">
            <summary>
            With the type dotnet_connection, connection is defined using .NET plug-in interface
            </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentDefinitionTypeEnum.DOTNET_DRAWING">
            <summary>
            With the type dotnet_drawing, drawing component is defined using .NET drawing plug-in interface
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Events">
            <summary>The Events class allows the user to register event listeners for Tekla Structures events.</summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Events.TeklaStructuresExitDelegate">
            <summary>
            The delegate to use for Tekla Structures exit.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Events.ModuleManagerUpdateDelegate">
            <summary>
            The delegate to use for ModuleManager update.
            </summary>
        </member>
        <member name="E:Tekla.Structures.TeklaStructuresInternal.Events.TeklaStructuresExit">
            <summary>
            The TeklaStructuresExit event is raised just before Tekla Structures exits. After this event has been called 
            the user will no longer be able to perform any calls to Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.TeklaStructuresInternal.Events.ModuleManagerUpdate">
            <summary>
            The ModuleManagerUpdate event.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.OnTeklaStructuresExit(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.OnModuleManagerUpdate">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.#ctor">
            <summary>
            Creates an empty events instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.Register">
            <summary>
            Registers the instance to listen to the specified events.
            More event delegates should not be added without calling UnRegister
            first.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Events.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportCommandEnum_e">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.FeatureSupportHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.FeatureSupportHandler.DbOperation(Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportCommandEnum_e,System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t.InputParameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t.OutputParameter">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken.FilterString">
            <summary>
            Gets or sets the FilterString string.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken.BinaryFilterOperatorType">
            <summary>
            Gets or sets the BinaryFilterOperatorType.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken.IsCollection">
            <summary>
            Gets or sets the IsCollection property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken.Enabled">
            <summary>
            Gets or sets the Enabled property.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken.#ctor(System.String,Tekla.Structures.Filtering.BinaryFilterOperatorType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BinaryFilterExpressionToken class.
            </summary>
            <param name="FilterString">The FilterString property.</param>
            <param name="BinaryFilterOperatorType">The BinaryFilterOperator property.</param>
            <param name="IsCollection">True is a collection, otherwise false.</param>
            <param name="Enabled">True is enabled otherwise false.</param>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.#ctor">
            <summary>
            Initializes a new instance of the FilterExpressionGenerator class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.Generate(Tekla.Structures.Filtering.FilterExpression)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object and returns it as a string.
            </para>
            </summary>
            <param name="FilterExpression">The <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object to be generated.</param>
            <returns>A string containing the filter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a null <paramref name="FilterExpression"/> is specified.</exception>
            <exception cref="T:Tekla.Structures.Filtering.InvalidFilterExpressionException">
            Thrown when an invalid <paramref name="FilterExpression"/> is specified.
            </exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.Generate(Tekla.Structures.Filtering.FilterExpression,Tekla.Structures.Filtering.FilterExpressionFileType,System.String)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object and saves it as a text file.
            </para>
            </summary>
            <param name="FilterExpression">The <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object to be generated.</param>
            <param name="FilterExpressionFileType">The <see cref="T:Tekla.Structures.Filtering.FilterExpressionFileType"/> to be generated.</param>
            <param name="FullFileName">The full file name of the file to be saved.</param>
            <returns>A string containing the filter's full file name.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a null <paramref name="FilterExpression"/> or <paramref name="FullFileName"/> is specified.
            </exception>
            <exception cref="T:Tekla.Structures.Filtering.InvalidFilterExpressionException">
            Thrown when an invalid <paramref name="FilterExpression"/> is specified.
            </exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.Generate(Tekla.Structures.Filtering.FilterExpression,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified FilterExpression object and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="FilterExpression">The <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateExpression(Tekla.Structures.Filtering.Expression,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified Expression object and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="Expression">The Expression object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateBinaryFilterExpression(Tekla.Structures.Filtering.BinaryFilterExpression,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified BinaryFilterExpression object and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="BinaryFilterExpression">The BinaryFilterExpression object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateFilterExpression(Tekla.Structures.Filtering.DataFilterExpression,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified DataFilterExpression object and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="FilterExpression">The DataFilterExpression object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateOperatorType(Tekla.Structures.Filtering.OperatorType,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified OperatorType enum and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="OperatorType">The OperatorType object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
            <exception cref="T:System.NotSupportedException">Thrown when a not supported <paramref name="OperatorType"/> is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateBinaryFilterItemOperatorType(Tekla.Structures.Filtering.BinaryFilterOperatorType,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified BinaryFilterOperatorType enum and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="BinaryFilterItemOperatorType">The BinaryFilterOperatorType object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
            <exception cref="T:System.NotSupportedException">
            Thrown when a not supported <paramref name="BinaryFilterItemOperatorType"/> is specified.
            </exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GenerateBinaryFilterExpressionCollection(Tekla.Structures.Filtering.BinaryFilterExpressionCollection,System.IO.TextWriter)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Generates a filter for the specified BinaryFilterExpressionCollection object and uses a TextWriter for the output.
            Override this method to change the class behavior.
            </para>
            </summary>
            <param name="BinaryFilterExpressionCollection">The BinaryFilterExpressionCollection object to be generated.</param>
            <param name="TextWriter">The TextWriter object for the output.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GetFilterExpressionsCount(Tekla.Structures.Filtering.Expression,System.Int32@)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Gets the number of FilterExpressions in the current Expression.
            </para>
            </summary>
            <param name="Expression">The Expression to be analyzed.</param>
            <param name="Count">The number of the filter expressions.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGenerator.GetFilterExpressionFileExtension(Tekla.Structures.Filtering.FilterExpressionFileType)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Gets the filter file extension.
            </para>
            </summary>
            <param name="FilterExpressionFileType">The filter file type.</param>
            <returns>A string representing the file extension.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorFactory">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorFactory.CreateGenerator">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Creates a filter generator.
            </para>
            </summary>
            <returns>A new filter generator.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorFactory.CreateGenerator(Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorType)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Creates a filter generator of a specific type.
            </para>
            </summary>
            <param name="FilterExpressionGeneratoryType">The filter generator type to be used.</param>
            <returns>A new filter generator.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorType">
            <summary>
            The filter expression generator type defines the filter expression generators.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorType.TEKLA">
            <summary>
            The Tekla Structures filter expression.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorType.XML">
            <summary>
            The XML filter expression (to be used only for test purposes).
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionGeneratorType.C">
            <summary>
            The C language filter expression (to be used only for test purposes).
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the FilterExpressionParser class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.Parse(System.String,System.IFormatProvider)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Parse a filter file and returns a <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.
            </para>
            </summary>
            <param name="FullFileName">The filter file full name.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. If not provided
            it uses the current CultureInfo.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a null or empty <paramref name="FullFileName"/> is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseExpressionString(System.String,System.IFormatProvider)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Parse a filter file and returns a <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.
            </para>
            </summary>
            <param name="FilterString">The filter expression as a text string.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. If not provided
            it uses the current CultureInfo.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a null or empty <paramref name="FilterString"/> is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.FindDataFilterExpression``1(System.String)">
            <summary>
            Finds a <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived object in the running assembly
            and compare the default value to the input string.
            </summary>
            <typeparam name="T">A <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived type.</typeparam>
            <param name="InputString">The input string to compare.</param>
            <returns>A new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived class.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when a the input string is not found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.CountOccurrence(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            Counts the occurrence of a specific char in a string.
            </summary>
            <param name="InputString">The input string to check.</param>
            <param name="InputChar">The input char to count.</param>
            <returns>The number of occurrence of a specific char.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseString(System.String,System.IFormatProvider)">
            <summary>
            Parses the input FilterString.
            
            Override this method to change the class behavior.
            </summary>
            <param name="FilterString">The filter expression as a text string.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. If not provided
            it uses the current CultureInfo.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseBinaryFilterExpression(System.String,System.IFormatProvider)">
            <summary>
            Parses the input BinaryFilterExpressionString using the <see cref="T:System.IFormatProvider"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="BinaryFilterExpressionString">The binary filter expression string.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. </param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input binary filter expression string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.GetBinaryFilterExpressionElements(System.String)">
            <summary>
            Gets the binary filter expression as array of tree elements. 
            The first represents the left operand, the second the Binary Operator, the third the Value.
            
            Override this method to change the class behavior.
            </summary>
            <param name="BinaryFilterExpressionString">The input binary filter expression string.</param>
            <returns>Returns an array of tree elements containing the two binary filter expression operand and one operator.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseLeftOperand(System.String)">
            <summary>
            Parses the left operand of the binary filter expression returning a new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived object.
            
            Override this method to change the class behavior.
            </summary>
            <param name="BinaryFilterExpressionString">The binary filter expression string.</param>
            <returns>A new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived class representing the Left operand.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws an <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if the filter string contains errors.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseStringConstantFilterExpression(System.String)">
            <summary>
            Parses a string returning a new <see cref="T:Tekla.Structures.Filtering.StringConstantFilterExpression"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="StringConstantString">The input string to parse.</param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.StringConstantFilterExpression"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseStringOperatorType(System.String)">
            <summary>
            Parse a string returnin a <see cref="T:Tekla.Structures.Filtering.StringOperatorType"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="StringOperatorTypeString">The input string to parse.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.StringOperatorType"/> enum.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseNumericConstantFilterExpression(System.String,System.IFormatProvider)">
            <summary>
            Parses a string returning a new <see cref="T:Tekla.Structures.Filtering.NumericConstantFilterExpression"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="NumericConstantString">The input string to parse.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. </param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.NumericConstantFilterExpression"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a null or empty <paramref name="NumericConstantString"/> is specified.</exception>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseNumericOperatorType(System.String)">
            <summary>
            Parses a string returning a <see cref="T:Tekla.Structures.Filtering.NumericOperatorType"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="NumericOperatorString">The input string to parse.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.NumericOperatorType"/> enum.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseDateTimeConstantFilterExpression(System.String,System.IFormatProvider)">
            <summary>
            Parses a string returning a new <see cref="T:Tekla.Structures.Filtering.DateTimeConstantFilterExpression"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="DateTimeConstantString"></param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. </param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.DateTimeConstantFilterExpression"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a null or empty <paramref name="DateTimeConstantString"/> is specified.</exception>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseDateTimeOperatorType(System.String)">
            <summary>
            Parses a string returning a <see cref="T:Tekla.Structures.Filtering.DateTimeOperatorType"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="DateTimeOperatorString">The input string to parse.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.DateTimeOperatorType"/> enum.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseBooleanConstantFilterExpression(System.String)">
            <summary>
            Parses a string returning a new <see cref="T:Tekla.Structures.Filtering.BooleanConstantFilterExpression"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="BooleanConstantString">The input string to parse.</param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.DateTimeConstantFilterExpression"/>.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.ParseBooleanOperatorType(System.String)">
            <summary>
            Parses a string returning a <see cref="T:Tekla.Structures.Filtering.BooleanOperatorType"/>.
            
            Override this method to change the class behavior.
            </summary>
            <param name="BooleanOperatorTypeString">The input string to parse.</param>
            <returns>A <see cref="T:Tekla.Structures.Filtering.BooleanOperatorType"/> enum.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParser.Tokenizer(System.String)">
            <summary>
            Splits the current filter strings in multiple <see cref="T:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken"/>.
            Each token contains a single filter section or a collection of sub filters sections.
            </summary>
            <param name="FilterString">The filter string to parse.</param>
            <returns>A list of <see cref="T:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken"/> objects.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws an <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if the filter string contains errors.</exception>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserFactory">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserFactory.CreateParser">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Creates a filter parser.
            </para>
            </summary>
            <returns>A new filter parser.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserFactory.CreateParser(Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserType)">
            <summary>
            This API supports the Open API infrastructure and is not intended to be used directly from your code. Use the <see cref="T:Tekla.Structures.Filtering.Filter"/> class instead.
            <para>
            Creates a filter parser of a specific type.
            </para>
            </summary>
            <param name="FilterExpressionParserType">The filter parser type to be used.</param>
            <returns>A new filter parser.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserType">
            <summary>
            The filter expression parser type defines the filter expression parser.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserType.TEKLA">
            <summary>
            The Tekla Structures filter expression.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.FilterExpressionParserType.C">
            <summary>
            The C language filter expression (to be used only for test purposes).
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.Generators.TeklaFilterExpressionGenerator">
            <summary>
            Represents the Tekla filter expression generator. Is used to generate the tekla filter text stream.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.Generators.XmlFilterExpressionGenerator">
            <summary>
            Generates an Xml text stream representing a FilterExpression. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser">
            <summary>
            Represents the Tekla filter expression parser. Is used to parse the tekla filter files.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.TokenElementsCount">
            <summary>
            Represents the number of elements inside a object group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.SectionHeader">
            <summary>
            Represents the Section Header in the filter file.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.FileHeader">
            <summary>
            Represents the filter file header.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.LeftParenthesisIndex">
            <summary>
            Represent the Left Parenthesis index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.EnabledIndex">
            <summary>
            Represent the Enabled index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.CategoryIndex">
            <summary>
            Represent the Category index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.PropertyIndex">
            <summary>
            Represent the Property index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.BinaryOperatorIndex">
            <summary>
            Represent the Binary Operator index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.ValueIndex">
            <summary>
            Represent the Value index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.RightParenthesisIndex">
            <summary>
            Represent the Right Parenthesis index in the section token.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.OperatorIndex">
            <summary>
            Represent the Operator index in the section token.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.NormalizeFilterExpression(System.String)">
            <summary>
            Normalizes the filter string in order to make it compatible with the Parser.
            This is required in special scenario, for example when the filter expression
            contains collection but doesn't have parenthesis.
            </summary>
            <param name="FilterString">The filter file in string format.</param>
            <returns>Returns the filter file normalized.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.RemoveFilterHeaderAndFooter(System.String)">
            <summary>
            Removes the header and footer from the filter file. It also changes the carriage return to a space.
            </summary>
            <param name="FilterString">The filter file in string format.</param>
            <returns>Returns the filter file body.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws a <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if no header is found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.GetFirstParentesisIndexAndCount(System.String,System.Int32@)">
            <summary>
            Gets the index of the char representing the first open parenthesis and the number of parenthesis.
            </summary>
            <param name="FilterString">The filter section string.</param>
            <param name="ParenthesisCount">The number of parenthesis.</param>
            <returns>The index of the char representing the first open parenthesis. If Parenthesis count == 0 returns -1.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws a <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if no section header is found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.GetLastParentesisIndexAndCount(System.String,System.Int32@)">
            <summary>
            Gets the index of the char representing the last open parenthesis and the number of parenthesis.
            </summary>
            <param name="FilterString">The filter section string.</param>
            <param name="ParenthesisCount">The number of parenthesis.</param>
            <returns>The index of the char representing the last open parenthesis.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws a <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if no section header is found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.GetSectionTokenContent(System.String,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Gets the section token contents.
            </summary>
            <param name="FilterString">The filter section string.</param>
            <param name="LeftParenthesis">The left parenthesis count.</param>
            <param name="RightParenthesis">The right parenthesis count.</param>
            <param name="Enabled">The enable field.</param>
            <param name="Category">The category field.</param>
            <param name="Property">The property field.</param>
            <param name="BinaryOperator">The binary operator field.</param>
            <param name="Value">The value field.</param>
            <param name="Operator">The operator field.</param>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws an <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if the section contains invalid data.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.FindDataFilterExpression(System.String,System.String)">
            <summary>
            Searches in the ExecutingAssembly classes derived from <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/>. If found
            checks if the Category and Property properties are equal to the one passed as parameter.
            </summary>
            <param name="Category">The category to search.</param>
            <param name="Property">The property to search.</param>
            <returns>A new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived class.</returns>
            <exception cref="T:System.NotSupportedException">Throws <see cref="T:System.NotSupportedException"/> if no maching classes are found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.UpdateParenthesis(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the parenthesis count of a section.
            </summary>
            <param name="FilterString">The filter section string.</param>
            <param name="FirstParenthesisIndex">The first parenthesis index.</param>
            <param name="FirstParenthesisCount">The first parenthesis count.</param>
            <param name="LastParenthesisIndex">The last parenthesis index.</param>
            <param name="LastParentesisCount">The last parenthesis count.</param>
            <returns>Returns a filter section string with updated first and last parenthesis.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.ParseString(System.String,System.IFormatProvider)">
            <summary>
            Parse a filter string and returns a new <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.
            </summary>
            <param name="FilterString">The filter string to parse.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info.</param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.FilterExpression"/> object.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.Tokenizer(System.String)">
            <summary>
            Splits the current filter strings in multiple <see cref="T:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken"/>.
            Each token contains a single filter section or a collection of sub filters sections.
            </summary>
            <param name="FilterString">The filter string to parse.</param>
            <returns>A list of <see cref="T:Tekla.Structures.TeklaStructuresInternal.Filtering.BinaryFilterExpressionToken"/> objects.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws an <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if the filter string contains errors.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.GetBinaryFilterExpressionElements(System.String)">
            <summary>
            Gets the binary filter expression as array of tree elements. 
            The first represents the left operand in the format "Category+Property", the second the Binary Operator, the third the Value.
            </summary>
            <param name="BinaryFilterExpressionString">The input binary filter expression string.</param>
            <returns>Returns an array of tree elements containing the two binary filter expression operand and one operator.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.ParseLeftOperand(System.String)">
            <summary>
            Parses the left operand of the binary filter expression returning a new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived object.
            </summary>
            <param name="BinaryFilterExpressionString">The binary filter expression string.</param>
            <returns>A new instance of the <see cref="T:Tekla.Structures.Filtering.DataFilterExpression"/> derived class representing the Left operand.</returns>
            <exception cref="T:Tekla.Structures.Filtering.FilterExpressionParserException">Throws an <see cref="T:Tekla.Structures.Filtering.FilterExpressionParserException"/> if the filter string contains errors.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.ParseStringOperatorType(System.String)">
            <summary>
            Parses a string operator type string and returns the correct StringOperatorType enum.
            </summary>
            <param name="StringOperatorTypeString">The input string operator type string.</param>
            <returns>If found returns the correct StringOperatorType enum.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> if the string operator type is not found.</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Filtering.Parsers.TeklaFilterExpressionParser.ParseNumericConstantFilterExpression(System.String,System.IFormatProvider)">
            <summary>
            Parses a string returning a new <see cref="T:Tekla.Structures.Filtering.NumericConstantFilterExpression"/>.
            
            This override handles the special case of ObjectType.
            </summary>
            <param name="NumericConstantString">The input string to parse.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to parse correctly numbers and dates according to the current culture info. </param>
            <returns>A new <see cref="T:Tekla.Structures.Filtering.NumericConstantFilterExpression"/>.</returns>
            <exception cref="T:System.NotSupportedException">Throws an <see cref="T:System.NotSupportedException"/> exception if the input string is not supported.</exception>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.AsyncCallCompletion`1">
            <summary>Remoting helper to pass asynchronous calls.</summary>
            <typeparam name="TResult">The result type. Must be serializable.</typeparam>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.AsyncCallCompletion`1.FromProxy(System.Action{System.Action{`0}})">
            <summary>Provides wrapped asyncronous facade for proxied call.</summary>
            <param name="beginProxy">Proxied begin call.</param>
            <returns>Awaitable task which returns the result.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.AsyncCallCompletion`1.FromProxy``1(``0,System.Action{``0,System.Action{`0}})">
            <summary>Provides wrapped asyncronous facade for proxied call.</summary>
            <typeparam name="T0">The argument type.</typeparam>
            <param name="arg0">The argument.</param>
            <param name="beginProxy">Proxied begin call.</param>
            <returns>Awaitable task which returns the result.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.AsyncCallCompletion`1.OnCompleted(`0)">
            <summary>Successful completion handler.</summary>
            <param name="result">The resulting data.</param>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.AtcUser">
            <summary>ATC user data</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.AtcUser.Email">
            <summary>User's email.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.AtcUser.DisplayName">
            <summary>User's name to display in UI.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.AtcUser.AccessToken">
            <summary>User's access token for services.</summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Operation">
            <summary>Internal application operations.</summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Operation.SharingAttributeFileLocationType">
            <summary>
            Attribute file location type
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Operation.SharingAttributeFileLocationType.ANY">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Operation.SharingAttributeFileLocationType.MODEL_FOLDER">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Operation.GetAtcUserAsync(System.Boolean)">
            <summary>Get logged in user data.</summary>
            <param name="askLogin">If true, and user is not logged in yet, shows the dialog to log in. If false, only refreshes token if user logged in, otherwise
            returns null without asking user.</param>
            <returns>Awaitable task which returns the user data, or null if user has not logged in.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Operation.dotExportGetAttributeFile(System.String,Tekla.Structures.TeklaStructuresInternal.Operation.SharingAttributeFileLocationType)">
            <summary>
            Gets full path to attribute file with specified name.
            </summary>
            <param name="filename">The filename.</param>
            <param name="locationType">The optional location type of where to look for the file.</param>
            <returns>Full path to attribute, or null if file was not found.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t.FileName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t.LocationType">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t.FilePath">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresSettingsHelper">
            <summary>
            The Tekla Structures settings helper class
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresSettingsHelper.GetAdvancedOptionPaths(System.String,System.Collections.Generic.List{System.String}@,Tekla.Structures.TeklaStructuresSettings.InvalidPathCallback)">
            <summary>Gets the value of an advanced option as a list of valid paths.</summary>
            <param name="advancedOption">The advanced option name.</param>
            <param name="paths">The paths.</param>
            <param name="errorHandler">The optional error handler callback.</param>
            <returns>
            True if the variable is read successfully and contains no invalid paths; otherwise false.
            </returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.AreWeUnitTesting">
            <summary>
            This is to enable unit-testing specific features like faking TS connection.
            This class hold a flag that is set to true when user wants to prevent 
            DelegateProxy's static constructor from running and creating IPC connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.AreWeUnitTesting.Value">
            <summary>
            Gets or sets a value indicating whether we are running in unit testing
            environment where ICDelegate is replaced with a fake.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.CDelegate.Singletons">
            <summary> Storage class for singleton instances. </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegate.Singletons.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit. Do not remove.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized">
            <summary>
            CDelegateSynchronized includes all the platform invokable commands and synchronization to AKIT.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.#ctor">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.InvokeRequired">
            <summary> Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"/> when calling an object that implements this interface. </summary>
            <returns> true if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"/>; otherwise, false. </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.BeginInvoke(System.Delegate,System.Object[])">
            <summary> Executes the delegate on the main thread that this object executes on. </summary>
            <param name="Method">The given method.</param>
            <param name="Args">An array of type <see cref="T:System.Object"/> to pass as arguments to the given method. This can be null if no arguments are needed. </param>
            <returns> An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling this method. </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.EndInvoke(System.IAsyncResult)">
            <summary> Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"/> completes, and then returns the value generated by the process. </summary>
            <param name="Result">An <see cref="T:System.IAsyncResult"/> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])"/>. </param>
            <returns> An <see cref="T:System.Object"/> that represents the return value generated by the asynchronous operation. </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.Invoke(System.Delegate,System.Object[])">
            <summary> Executes the delegate on the main thread that this object executes on. </summary>
            <param name="Method">The given method.</param>
            <param name="Args">An array of type <see cref="T:System.Object"/> to pass as arguments to the given method. This can be null if no arguments are needed. </param>
            <returns> An <see cref="T:System.Object"/> that represents the return value from the delegate being invoked, or null if the delegate has no return value. </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetCurrentProgramVersion(Tekla.Structures.Internal.dotProgramVersion_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetCurrentUser(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetToolOptionValue(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetSetClashCheckOptions(Tekla.Structures.Internal.dotClashCheckOptions_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetSetComponentOptions(Tekla.Structures.Internal.dotComponentOptions_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportTestingFeaturesHandler(Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportFeatureSupportHandler(Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetModuleQuery(Tekla.Structures.Internal.dotModuleManagerQuery_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetAnalysisModuleQuery(Tekla.Structures.Internal.DotAnalysisModuleManagerQuery@)">
            <param name="pModuleQuery">The module query.</param>
            <returns>Returns TRUE if successfully retrieved modules in use.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetIdentifierByGUID(Tekla.Structures.Internal.dotIdentifierToGUID_t@)">
            <exclude/>
            <param name="pIdentifierToGUID">The GUID query.</param>
            <returns>Returns TRUE if successfull.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.ExportGetAttributeFile(Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t@)">
            <summary>
            Gets single attribute file with specified name.
            </summary>
            <param name="data">The data.</param>
            <returns>True if file was found.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetCurrentProgramVersion(Tekla.Structures.Internal.dotProgramVersion_t@)">
            <exclude/>
            <param name="pProgramVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetCurrentUser(System.Text.StringBuilder)">
            <exclude/>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetToolOptionValue(System.String)">
            <exclude/>
            <param name="toolOptionName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetSetClashCheckOptions(Tekla.Structures.Internal.dotClashCheckOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetSetComponentOptions(Tekla.Structures.Internal.dotComponentOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportTestingFeaturesHandler(Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportFeatureSupportHandler(Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetModuleQuery(Tekla.Structures.Internal.dotModuleManagerQuery_t@)">
            <exclude/>
            <param name="pModuleQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.DotAnalysisExportGetAnalysisModuleQuery(Tekla.Structures.Internal.DotAnalysisModuleManagerQuery@)">
            <exclude/>
            <param name="pModuleQuery">The module query.</param>
            <returns>Returns TRUE on success.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetIdentifierByGUID(Tekla.Structures.Internal.dotIdentifierToGUID_t@)">
            <exclude/>
            <param name="pIdentifierToGUID">The identifier.</param>
            <returns>Returns TRUE on success.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSynchronized.dotExportGetAttributeFile(Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t@)">
            <exclude/>
            <param name="data">The Data.</param>
            <returns>True if file was found.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.#ctor(Tekla.Structures.TeklaStructuresInternal.ICDelegate,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
            <param name="Instance"></param>
            <param name="Functionality"></param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetCurrentProgramVersion(Tekla.Structures.Internal.dotProgramVersion_t@)">
            <exclude/>
            <param name="pProgramVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetCurrentUser(System.String@)">
            <exclude/>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetToolOptionValue(System.String@)">
            <exclude/>
            <param name="toolOptionName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetSetClashCheckOptions(Tekla.Structures.Internal.dotClashCheckOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetSetComponentOptions(Tekla.Structures.Internal.dotComponentOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportTestingFeaturesHandler(Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportFeatureSupportHandler(Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetModuleQuery(Tekla.Structures.Internal.dotModuleManagerQuery_t@)">
            <exclude/>
            <param name="pModuleQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetAnalysisModuleQuery(Tekla.Structures.Internal.DotAnalysisModuleManagerQuery@)">
            <exclude/>
            <param name="pModuleQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetIdentifierByGUID(Tekla.Structures.Internal.dotIdentifierToGUID_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifierToGUID"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateWrapper.ExportGetAttributeFile(Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>True if file was found.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.GenericDelegateFake`1">
            <summary>
            Implements ICDelegate so that every method returns according to <see cref="T:Tekla.Structures.RemotingHelper.IReturnStrategy"/>
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.TeklaStructuresInternal.CDelegateSetter" />.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.GenericDelegateFake`1.ExportGetAttributeFile(Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>True if file was found.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.DelegateFake">
            <summary>
            Implements ICDelegate so that every method throws NotImplementedException.
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.TeklaStructuresInternal.CDelegateSetter" />.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.DelegateProxy">
            <summary>
            CDelegate remote class proxy.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.DelegateProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.DelegateProxy.Initialize">
            <summary>
            Initializes the delegate proxy,
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.DelegateProxy.Delegate">
            <summary>
            Gets the singleton CDelegate instance that includes model API methods.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.DelegateProxy.DeactivateInterface(System.String)">
            <summary>
            Deactivate Tekla.Structures.Model interface
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.CDelegateSetter">
            <summary>
            This class is purely available for the reason to enable faking of
            ICDelegate interface for the sake of testing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSetter.SetInstanceForUnitTesting(Tekla.Structures.TeklaStructuresInternal.ICDelegate)">
            <summary>
            Set the current ICDelegate instance to your fake/mock class.
            The instance must be restored to null when test method ends.
            </summary>
            <param name="cdelegate">The delegate implementation</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.CDelegateSetter.ResetInstance">
            <summary>
            Resets <see cref="T:Tekla.Structures.TeklaStructuresInternal.ICDelegate"/> instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.DotNetProxy">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.DotNetProxy.Run(System.String)">
            <exclude/>
            <param name="Param">Not used.</param>
            <returns>The return value is not usefull because AKIT doesn't send it to Core.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.EventHandler">
            <summary>
            EventHandler is a class that TS calls when an event is raised. Handler
            then calls all the listener "Events" objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.EventHandler.EventListeners">
            <summary> List of Events objects waiting to be called </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandler.AddListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandler.RemoveListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandler.OnEvent(System.String)">
            <summary> TS calls when event is raised. </summary>
            <param name="Param">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.EventHandlerProxy">
            <summary> EventHandler remote class proxy. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.EventHandlerProxy.Instance">
            <summary> The remote EventHandler object. </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandlerProxy.#cctor">
            <summary> Initializes static instance variable. </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.EventHandlerProxy.EventHandler">
            <summary> Gets the singleton EventHandler instance that includes model API event handlers. </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper.#ctor(Tekla.Structures.TeklaStructuresInternal.IEventHandler,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper.AddListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.EventHandlerWrapper.RemoveListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.ICDelegate">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetCurrentProgramVersion(Tekla.Structures.Internal.dotProgramVersion_t@)">
            <exclude/>
            <param name="pProgramVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetCurrentUser(System.String@)">
            <exclude/>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetToolOptionValue(System.String@)">
            <exclude/>
            <param name="toolOptionName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetSetClashCheckOptions(Tekla.Structures.Internal.dotClashCheckOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetSetComponentOptions(Tekla.Structures.Internal.dotComponentOptions_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportFeatureSupportHandler(Tekla.Structures.TeklaStructuresInternal.dotFeatureSupportHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportTestingFeaturesHandler(Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetModuleQuery(Tekla.Structures.Internal.dotModuleManagerQuery_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModuleQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetAnalysisModuleQuery(Tekla.Structures.Internal.DotAnalysisModuleManagerQuery@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModuleQuery"></param>
            <returns>Returns the modules in use.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetIdentifierByGUID(Tekla.Structures.Internal.dotIdentifierToGUID_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifierToGUID"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ICDelegate.ExportGetAttributeFile(Tekla.Structures.TeklaStructuresInternal.dotGetAttributeFile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The Data.</param>
            <returns>True if file was found.</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.IEventHandler">
            <summary>
            IEventHandler is an interface that TS calls when an event is raised.
            Handler implementation then calls all the listener "Events" objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.IEventHandler.AddListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.IEventHandler.RemoveListener(Tekla.Structures.TeklaStructuresInternal.Events)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.ITeklaStructuresApplication">
            <summary>Represents TS functionality which is mostly implemented in .NET code and plugins, but needs to be implemented in the running application.</summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.ITeklaStructuresApplication.BeginAtcUserAsync(System.Boolean,System.Action{System.Nullable{Tekla.Structures.TeklaStructuresInternal.AtcUser}})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.Remoter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.Remoter.ChannelName">
            <summary> Name of the remoting channel to register.</summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Remoter.#cctor">
            <summary>
            Constructor for Remoter
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Remoter.PublishTypes">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Remoter.GetSessionName">
            <summary>
            When multiple Tekla Structures instances are running on same virtualized
            operating system, we need different channel name for each session.
            </summary>
            <returns>The session name. For example "RDP-Tcp#47" or "Console".</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.Remoter.InitializeSandBox">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplication">
            <summary>Provides access to TS functionality tied to the process.</summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplication.AuthenticationAsyncCallback">
            <summary>Sets the authentication callback.</summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationProxy">
            <summary>
            TS Service remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationProxy._Instance">
            <summary>
            The remote TS Service object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationProxy.Instance">
            <summary>
            Gets the singleton TS Service instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationWrapper.#ctor(Tekla.Structures.TeklaStructuresInternal.ITeklaStructuresApplication,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TeklaStructuresApplicationWrapper.BeginAtcUserAsync(System.Boolean,System.Action{System.Nullable{Tekla.Structures.TeklaStructuresInternal.AtcUser}})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.Default">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_ExportData">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_TrainMemoryTree">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_Toggle_OnlyPrimaryParts">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_ExportAllViews">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_CreateMarks">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_CreateMarksByMemoryTree">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_Eval_SetCurrentStateAsTarget">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarksLearning_EvaluateCurrentState">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.IdealMatchClone_SetUsageOfTestSource">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.IdealMatchClone_GetBestTemplate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.IdealMatchClone_CreateDrawingsByBestTemplates">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_ClusterViewsInDrawings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_OnlyCollectData">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_OnlyClusterViews">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_GenerateClusteringPictures">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_ExportViewsByClusters">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_GetClustersForView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ViewClustering_CloneToTarget">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarkCollision_FindCollisions_AllDrawings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarkCollision_RunMarkPlacingAndFindCollisions_AllDrawings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarkCollision_RunMarkPlacing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarkCollision_PrintCollisionsToLog">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.MarkCollision_SelectMarksWithCollisions">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.Drawing3dDim">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.LinkedDrawings_StartRecord">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.LinkedDrawings_StopRecord">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.LinkedDrawings_Playback">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.IsometricDimension_DimensionByThreePoints">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CloneEvaluation_ListDrawingsWithAssembly">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CloneEvaluation_GenerateReportsForDrawings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CloneEvaluation_CloneDrawings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CloneEvaluation_DisplayIdMapperScore">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CloneEvaluation_ChangeMatcher">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.Dissect_GetViewWorld">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.AssemblySimilarity_AssemblySimilarityComputeTokens">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CopyObjects_CopyAllObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateView_CreateBasicView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateView_TakeSnapshot">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateView_PourView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateView_TakePourSnapshot">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.AssemblySimilarity_CloneDrawing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ChangeFabricationDrawing_Threshold">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateFabricationDrawing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.AssemblySimilarity_PerformNumbering">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateComponentByGuids">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateJointView_TakeSnapshot">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.ConnectionSimilarity_CollectConnectionData">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.CreateBasicConnectionView">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e.TrackingModelProperties_ReportModelQuantities">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.TestingFeaturesHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TestingFeaturesHandler.DbOperation(Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesCommandEnum_e,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInternal.TestingFeaturesHandler.IsAvailable">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t.InputParameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresInternal.dotTestingFeaturesHandler_t.OutputParameter">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Filtering.BinaryFilterExpression">
            <summary>
            The BinaryFilterExpression class represents a binary expression between two filter expressions.
            This class cannot be inherited.
            </summary>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection"/>
            <example>
            The following example creates this BinaryFilterExpression:
            
            PartName == BEAM1
            
            <code>
            using System;
            using Tekla.Structures.Filtering;
            using Tekla.Structures.Filtering.Categories;
            
            public class FilterExample
            {
                   // Creates a binary filter expression:
                   // PartName == BEAM1
                   public BinaryFilterExpression CreateBinaryFilterExpression()
                   {
                       // Creates the filter expressions
                       PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                       StringConstantFilterExpression Beam1 = new StringConstantFilterExpression("BEAM1");
            
                       // Creates the binary filter expression
                       return new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam1);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpression.#ctor(Tekla.Structures.Filtering.DataFilterExpression,Tekla.Structures.Filtering.OperatorType,Tekla.Structures.Filtering.DataFilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpression class.
            </summary>
            <param name="Left">The left operand of the filter expression.</param>
            <param name="Oper">The operator of the filter expression.</param>
            <param name="Right">The right operand of the filter expression.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpression.#ctor(Tekla.Structures.Filtering.BooleanFilterExpression,Tekla.Structures.Filtering.BooleanOperatorType,Tekla.Structures.Filtering.BooleanConstantFilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpression class.
            </summary>
            <param name="Left">The left operand of the filter expression.</param>
            <param name="Oper">The operator of the filter expression.</param>
            <param name="Right">The right operand of the filter expression.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpression.#ctor(Tekla.Structures.Filtering.StringFilterExpression,Tekla.Structures.Filtering.StringOperatorType,Tekla.Structures.Filtering.StringConstantFilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpression class.
            </summary>
            <param name="Left">The left operand of the filter expression.</param>
            <param name="Oper">The operator of the filter expression.</param>
            <param name="Right">The right operand of the filter expression.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpression.#ctor(Tekla.Structures.Filtering.NumericFilterExpression,Tekla.Structures.Filtering.NumericOperatorType,Tekla.Structures.Filtering.NumericConstantFilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpression class.
            </summary>
            <param name="Left">The left operand of the filter expression.</param>
            <param name="Oper">The operator of the filter expression.</param>
            <param name="Right">The right operand of the filter expression.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpression.#ctor(Tekla.Structures.Filtering.DateTimeFilterExpression,Tekla.Structures.Filtering.DateTimeOperatorType,Tekla.Structures.Filtering.DateTimeConstantFilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpression class.
            </summary>
            <param name="Left">The left operand of the filter expression.</param>
            <param name="Oper">The operator of the filter expression.</param>
            <param name="Right">The right operand of the filter expression.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpression.Left">
            <summary>
            Gets or sets the left operand of the filter expression.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpression.Operator">
            <summary>
            Gets or sets the operator of the filter expression.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpression.Right">
            <summary>
            Gets or sets the right operand of the filter expression.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection">
             <summary>
             The BinaryFilterExpressionCollection class represents a collection of BinaryFilterItem objects.
             The class is used to represent linear expressions. This class cannot be inherited.
             </summary>
             <example>
             The following examples show how to compose different filter expression collections.
             After the BinaryFilterExpressionCollection is composed use <see cref="T:Tekla.Structures.Filtering.Filter"/>
             to build the filter file.
             <code>
             using System;
             using Tekla.Structures.Filtering;
             using Tekla.Structures.Filtering.Categories;
             
             public class FilterExamples
             {
                    // Creates a filter for the following filter expression:
                    // (PartName == BEAM1 OR PartName == BEAM2 OR PartName == BEAM3)
                    public BinaryFilterExpressionCollection CreateBinaryFilterExpressionCollection()
                    {
                        // Creates the filter expressions
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression Beam1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression Beam2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression Beam3 = new StringConstantFilterExpression("BEAM3");
             
                        // Creates the binary filter expressions
                        BinaryFilterExpression Expression1 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam1);
                        BinaryFilterExpression Expression2 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam2);
                        BinaryFilterExpression Expression3 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam3);
             
                        // Creates the binary filter expression collection
                        BinaryFilterExpressionCollection ExpressionCollection = new BinaryFilterExpressionCollection();
                        ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression1, BinaryFilterOperatorType.BOOLEAN_OR));
                        ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression2, BinaryFilterOperatorType.BOOLEAN_OR));
                        ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression3));
                        return ExpressionCollection;
                    }
            
                    // Creates the following expression:
                    // (PartName != BEAM AND (PartName != BEAM1 AND PartName != BEAM2))
                    public static FilterExpression CreateBinaryFilterExpressionCollection1()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection));
            
                        return BinaryFilterExpressionCollection1;
                    }
            
                    // Creates the following expression:
                    // (PartName != BEAM AND PartName != BEAM1 AND (PartName != BEAM2 OR PartName != BEAM3))
                    public static FilterExpression CreateBinaryFilterExpressionCollection2()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression BeamName3 = new StringConstantFilterExpression("BEAM3");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression B = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName3);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_OR));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(B, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection));
                        return BinaryFilterExpressionCollection1;
                    }
            
                    // Creates the following expression:
                    // (PartName != BEAM AND (PartName != BEAM2 OR PartName != BEAM3) AND PartName != BEAM1)
                    public static FilterExpression CreateBinaryFilterExpressionCollection3()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression BeamName3 = new StringConstantFilterExpression("BEAM3");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression B = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName3);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_OR));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(B));
            
                        return BinaryFilterExpressionCollection1;
                    }
             
                    // Creates the following expression:
                    // ((PartName != BEAM AND PartName != BEAM1 AND PartName != BEAM2 OR PartName != BEAM3) AND
                    // (PartName != BEAM4 AND PartName != BEAM5 AND PartName != BEAM6 OR PartName != BEAM7))
                    public static FilterExpression CreateBinaryFilterExpressionCollection4()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression BeamName3 = new StringConstantFilterExpression("BEAM3");
                        StringConstantFilterExpression BeamName4 = new StringConstantFilterExpression("BEAM4");
                        StringConstantFilterExpression BeamName5 = new StringConstantFilterExpression("BEAM5");
                        StringConstantFilterExpression BeamName6 = new StringConstantFilterExpression("BEAM6");
                        StringConstantFilterExpression BeamName7 = new StringConstantFilterExpression("BEAM7");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression B = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName3);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(B, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_OR));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpression E = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName4);
                        BinaryFilterExpression F = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName5);
                        BinaryFilterExpression G = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName6);
                        BinaryFilterExpression H = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName7);
             
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(E, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(F, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(G, BinaryFilterOperatorType.BOOLEAN_OR));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(H));
             
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection2 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection1));
            
                        return BinaryFilterExpressionCollection2;
                    }
            
                    // Creates the following expression:
                    // ((PartName != BEAM AND PartName != BEAM1) AND
                    // (PartName != BEAM2 AND PartName != BEAM3) AND
                    // (PartName != BEAM4 AND PartName != BEAM5))
                    public static FilterExpression CreateBinaryFilterExpressionCollection5()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression BeamName3 = new StringConstantFilterExpression("BEAM3");
                        StringConstantFilterExpression BeamName4 = new StringConstantFilterExpression("BEAM4");
                        StringConstantFilterExpression BeamName5 = new StringConstantFilterExpression("BEAM5");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression B = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(B));
            
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName3);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpression E = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName4);
                        BinaryFilterExpression F = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName5);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection2 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(E, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(F));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection3 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection1,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection2));
            
                        return BinaryFilterExpressionCollection3;
                    }
            
                    // Creates the following expression:
                    // (((PartName != BEAM AND PartName != BEAM1) AND
                    // (PartName != BEAM2 AND PartName != BEAM3) AND
                    // (PartName != BEAM4 AND PartName != BEAM5)) OR
                    // (PartName != BEAM6 AND PartName != BEAM7))
                    public static FilterExpression CreateBinaryFilterExpressionCollection6()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
                        StringConstantFilterExpression BeamName3 = new StringConstantFilterExpression("BEAM3");
                        StringConstantFilterExpression BeamName4 = new StringConstantFilterExpression("BEAM4");
                        StringConstantFilterExpression BeamName5 = new StringConstantFilterExpression("BEAM5");
                        StringConstantFilterExpression BeamName6 = new StringConstantFilterExpression("BEAM6");
                        StringConstantFilterExpression BeamName7 = new StringConstantFilterExpression("BEAM7");
            
                        BinaryFilterExpression A = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression B = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(A, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection.Add(new BinaryFilterExpressionItem(B));
            
                        BinaryFilterExpression C = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
                        BinaryFilterExpression D = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName3);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection1 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(C, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection1.Add(new BinaryFilterExpressionItem(D));
            
                        BinaryFilterExpression E = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName4);
                        BinaryFilterExpression F = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName5);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection2 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(E, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection2.Add(new BinaryFilterExpressionItem(F));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection3 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection1,
                            BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection3.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection2));
            
                        BinaryFilterExpression G = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName6);
                        BinaryFilterExpression H = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName7);
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection4 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection4.Add(new BinaryFilterExpressionItem(G, BinaryFilterOperatorType.BOOLEAN_AND));
                        BinaryFilterExpressionCollection4.Add(new BinaryFilterExpressionItem(H));
            
                        BinaryFilterExpressionCollection BinaryFilterExpressionCollection5 = new BinaryFilterExpressionCollection();
                        BinaryFilterExpressionCollection5.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection3,
                            BinaryFilterOperatorType.BOOLEAN_OR));
                        BinaryFilterExpressionCollection5.Add(new BinaryFilterExpressionItem(BinaryFilterExpressionCollection4));
            
                        return BinaryFilterExpressionCollection5;
                    }
            
                    // Creates the following expression:
                    // (PartName != BEAM OR (PartName != BEAM1 OR (PartName != BEAM2)))
                    public static FilterExpression CreateBinaryFilterExpressionCollection7()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
            
                        BinaryFilterExpression X = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression Y = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression Z = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
            
                        BinaryFilterExpressionCollection C2 = new BinaryFilterExpressionCollection();
                        C2.Add(new BinaryFilterExpressionItem(Z));
            
                        BinaryFilterExpressionCollection C1 = new BinaryFilterExpressionCollection();
                        C1.Add(new BinaryFilterExpressionItem(Y, BinaryFilterOperatorType.BOOLEAN_OR));
                        C1.Add(new BinaryFilterExpressionItem(C2));
            
                        BinaryFilterExpressionCollection C0 = new BinaryFilterExpressionCollection();
                        C0.Add(new BinaryFilterExpressionItem(X, BinaryFilterOperatorType.BOOLEAN_OR));
                        C0.Add(new BinaryFilterExpressionItem(C1));
             
                        return C0;
                    }
            
                    // Creates the following expression:
                    // (((PartName != BEAM) OR PartName != BEAM1) OR PartName != BEAM2)
                    public static FilterExpression CreateBinaryFilterExpressionCollection8()
                    {
                        PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                        StringConstantFilterExpression BeamName = new StringConstantFilterExpression("BEAM");
                        StringConstantFilterExpression BeamName1 = new StringConstantFilterExpression("BEAM1");
                        StringConstantFilterExpression BeamName2 = new StringConstantFilterExpression("BEAM2");
            
                        BinaryFilterExpression X = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName);
                        BinaryFilterExpression Y = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName1);
                        BinaryFilterExpression Z = new BinaryFilterExpression(PartName, StringOperatorType.IS_NOT_EQUAL, BeamName2);
            
                        BinaryFilterExpressionCollection C0 = new BinaryFilterExpressionCollection();
                        C0.Add(new BinaryFilterExpressionItem(X));
                        BinaryFilterExpressionCollection C1 = new BinaryFilterExpressionCollection();
                        C1.Add(new BinaryFilterExpressionItem(C0, BinaryFilterOperatorType.BOOLEAN_OR));
                        C1.Add(new BinaryFilterExpressionItem(Y));
                        BinaryFilterExpressionCollection C2 = new BinaryFilterExpressionCollection();
                        C2.Add(new BinaryFilterExpressionItem(C1, BinaryFilterOperatorType.BOOLEAN_OR));
                        C2.Add(new BinaryFilterExpressionItem(Z));
                        return C2;
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Filtering.BinaryFilterExpressionCollection._Items">
            <summary>
            Data container.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the collection supports multithreading.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.SyncRoot">
            <summary>
            Gets the root for synchronization.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at a specific index.
            </summary>
            <param name="Index">The item index.</param>
            <returns>The item at the index.</returns>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.#ctor">
            <summary>
            Initializes a new instance of the BinaryFilterExpressionCollection class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.IndexOf(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Searches for the specified BinaryFilterExpressionItem in the collection and returns a zero-based index if found.
            </summary>
            <param name="Item">The item to search for. This value cannot be null.</param>
            <returns>The zero-based index of the item in the collection. -1 if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Add(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Adds a BinaryFilterExpressionItem object at the end of the collection.
            </summary>
            <param name="Item">The object to add to the collection. This value cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Insert(System.Int32,Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Inserts an element in the collection at a specified index.
            </summary>
            <param name="Index">The zero-based index at which the item shoud be inserted.</param>
            <param name="Item">The item to insert. This value cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the supplied index is out of bounds.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Remove(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="Item">The object to remove from the collection. This value cannot be null.</param>
            <returns>True if item was successfully removed. False otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index from the collection.
            </summary>
            <param name="Index">The index of the item to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when the supplied index is out of bounds.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.Contains(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="Item">The object to locate in the collection. This value cannot be null.</param>
            <returns>True if the object exists.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.CopyTo(Tekla.Structures.Filtering.BinaryFilterExpressionItem[],System.Int32)">
            <summary>
            Copies the collection to the input array.
            </summary>
            <param name="Array">The input array. This value cannot be null.</param>
            <param name="ArrayIndex">The starting index.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the supplied array index is out of bounds.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.IsFirst(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Determines whether an element is the first item of the collection.
            </summary>
            <param name="BinaryFilterExpressionItem">The element to evaluate. This value cannot be null.</param>
            <returns>True if the element is the first item.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.IsLast(Tekla.Structures.Filtering.BinaryFilterExpressionItem)">
            <summary>
            Determines whether an element is the last item of the collection.
            </summary>
            <param name="BinaryFilterExpressionItem">The element to evaluate. This value cannot be null.</param>
            <returns>True if the element is the last item.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied item is null.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.GetFirst">
            <summary>
            Gets the first item of the collection.
            </summary>
            <returns>The first item of the collection.</returns>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.GetLast">
            <summary>
            Gets the last item of the collection.
            </summary>
            <returns>The last item of the collection.</returns>
        </member>
        <member name="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection.BinaryFilterExpressionEnumerator">
            <summary>
            Support class for BinaryFilterExpressionCollection.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.BinaryFilterExpressionItem">
            <summary>
            The BinaryFilterExpressionItem class represents a data item in a <see cref="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection"/>.
            This class cannot be inherited.
            </summary>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpression"/>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection"/>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionItem.#ctor(Tekla.Structures.Filtering.FilterExpression)">
            <summary>
            Initializes a new instance of the BinaryFilterExpressionItem class.
            </summary>
            <param name="FilterExpression">The filter expression to collect.</param>
            <exception cref="T:Tekla.Structures.Filtering.InvalidFilterExpressionException">Thrown when an invalid filter expression is specified.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.BinaryFilterExpressionItem.#ctor(Tekla.Structures.Filtering.FilterExpression,Tekla.Structures.Filtering.BinaryFilterOperatorType)">
            <summary>
            Initializes a new instance of the BinaryFilterExpressionItem class.
            </summary>
            <param name="FilterExpression">The <see cref="P:Tekla.Structures.Filtering.BinaryFilterExpressionItem.FilterExpression"/> object to collect.</param>
            <param name="BinaryFilterItemOperatorType">The operator type to be used against the next item.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null filter expression is specified.</exception>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionItem.FilterExpression">
            <summary>
            Gets or sets the FilterExpression object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.BinaryFilterExpressionItem.BinaryFilterItemOperatorType">
            <summary>
            Gets or sets the BinaryFilterItemOperatorType.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.BinaryFilterOperatorType">
            <summary>
            The binary filter operator type defines the operators between two binary filters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BinaryFilterOperatorType.BOOLEAN_OR">
            <summary>
            The Boolean OR operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BinaryFilterOperatorType.BOOLEAN_AND">
            <summary>
            The Boolean AND operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BinaryFilterOperatorType.EMPTY">
            <summary>
            The empty operator represents the end of the expression.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.BooleanConstantFilterExpression">
            <summary>
            The BooleanConstantFilterExpression class represents a constant Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.BooleanConstantFilterExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BooleanConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.BooleanConstantFilterExpression.#ctor(System.Boolean,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the BooleanConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.BooleanFilterExpression">
            <summary>
            The BooleanFilterExpression class represents a Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.BooleanFilterExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BooleanFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.BooleanFilterExpression.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BooleanFilterExpression class.
            </summary>
            <param name="Name">The name of the expression.</param>
            <param name="Category">The category of the expression.</param>
            <param name="Property">The property of the expression.</param>
            <param name="LocalizationKey">The localization key of the expression.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.BooleanOperatorType">
            <summary>
            The Boolean operator type defines the operators between two Boolean filter expressions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BooleanOperatorType.IS_EQUAL">
            <summary>
            The "is equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BooleanOperatorType.IS_NOT_EQUAL">
            <summary>
            The "is not equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BooleanOperatorType.BOOLEAN_OR">
            <summary>
            The Boolean OR operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.BooleanOperatorType.BOOLEAN_AND">
            <summary>
            The Boolean AND operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions">
            <summary>
            The AssemblyFilterExpressions class contains all the assembly filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.IdNumber">
            <summary>
            The IdNumber class represents the identifier number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.IdNumber.#ctor">
            <summary>
            Initializes a new instance of the IdNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Guid">
            <summary>
            The Guid class represents the GUID filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Guid.#ctor">
            <summary>
            Initializes a new instance of the Guid class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Level">
            <summary>
            The Level class represents the level filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Level.#ctor">
            <summary>
            Initializes a new instance of the Level class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.PositionNumber">
            <summary>
            The PositionNumber class represents the position number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.PositionNumber.#ctor">
            <summary>
            Initializes a new instance of the PositionNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Prefix">
            <summary>
            The Prefix class represents the prefix filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Prefix.#ctor">
            <summary>
            Initializes a new instance of the Prefix class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Series">
            <summary>
            The Series class represents the series filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.StartNumber">
            <summary>
            The StartNumber class represents the start number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.StartNumber.#ctor">
            <summary>
            Initializes a new instance of the StartNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Type">
            <summary>
            The Type class represents the type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.AssemblyFilterExpressions.Type.#ctor">
            <summary>
            Initializes a new instance of the Type class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions">
            <summary>
            The BoltFilterExpressions class contains all the bolt filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Length">
            <summary>
            The Length class represents the length filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Length.#ctor">
            <summary>
            Initializes a new instance of the Length class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.SiteWorkshop">
            <summary>
            The SiteWorkshop class represents the site/workshop filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.SiteWorkshop.#ctor">
            <summary>
            Initializes a new instance of the SiteWorkshop class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Size">
            <summary>
            The Size class represents the size filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Size.#ctor">
            <summary>
            Initializes a new instance of the Size class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Standard">
            <summary>
            The Standard class represents the standard filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.BoltFilterExpressions.Standard.#ctor">
            <summary>
            Initializes a new instance of the Standard class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions">
            <summary>
            The ComponentFilterExpressions class contains all the component filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.ConnectionCode">
            <summary>
            The ConnectionCode class represents the connection code filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.ConnectionCode.#ctor">
            <summary>
            Initializes a new instance of the ConnectionCode class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.RunningNumber">
            <summary>
            The RunningNumber class represents the running number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ComponentFilterExpressions.RunningNumber.#ctor">
            <summary>
            Initializes a new instance of the RunningNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions">
            <summary>
            The ConstructionObjectFilterExpressions class contains all the construction object filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.Type">
            <summary>
            The Type class represents the type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ConstructionObjectFilterExpressions.Type.#ctor">
            <summary>
            Initializes a new instance of the Type class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions">
            <summary>
            The LoadFilterExpressions class contains all the load filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Group">
            <summary>
            The Group class represents the group filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Group.#ctor">
            <summary>
            Initializes a new instance of the Group class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Type">
            <summary>
            The Type class represents the type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LoadFilterExpressions.Type.#ctor">
            <summary>
            Initializes a new instance of the Type class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions">
            <summary>
            The LogicalAreaFilterExpressions class contains all the logical area filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Building">
            <summary>
            The Building class represents the building filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Building.#ctor">
            <summary>
            Initializes a new instance of the Building class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Section">
            <summary>
            The Section class represents the section filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Section.#ctor">
            <summary>
            Initializes a new instance of the Section class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Site">
            <summary>
            The Site class represents the site filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Site.#ctor">
            <summary>
            Initializes a new instance of the Site class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Story">
            <summary>
            The Story class represents the story filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.LogicalAreaFilterExpressions.Story.#ctor">
            <summary>
            Initializes a new instance of the Story class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions">
            <summary>
            The ObjectFilterExpressions class contains all the object filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Guid">
            <summary>
            The Guid class represents the GUID filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Guid.#ctor">
            <summary>
            Initializes a new instance of the Guid class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.IdNumber">
            <summary>
            The IdNumber class represents the identifier number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.IdNumber.#ctor">
            <summary>
            Initializes a new instance of the IdNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.IsComponent">
            <summary>
            The IsComponent class represents the "is component" filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.IsComponent.#ctor">
            <summary>
            Initializes a new instance of the IsComponent class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Type">
            <summary>
            The Type class represents the type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectFilterExpressions.Type.#ctor">
            <summary>
            Initializes a new instance of the Type class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions">
            <summary>
            The ObjectTypesFilterExpressions class contains all the object type filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CategoryName">
            <summary>
            The CategoryName class represents the category name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.CategoryName.#ctor">
            <summary>
            Initializes a new instance of the CategoryName class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.EntityName">
            <summary>
            The EntityName class represents the entity name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ObjectTypesFilterExpressions.EntityName.#ctor">
            <summary>
            Initializes a new instance of the EntityName class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions">
            <summary>
            The PartFilterExpressions class contains all the part filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Class">
            <summary>
            The Class class represents the class filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Class.#ctor">
            <summary>
            Initializes a new instance of the Class class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Finish">
            <summary>
            The Finish class represents the finish filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Finish.#ctor">
            <summary>
            Initializes a new instance of the Finish class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Lot">
            <summary>
            The Lot class represents the lot filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Lot.#ctor">
            <summary>
            Initializes a new instance of the Lot class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Material">
            <summary>
            The Material class represents the material filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Material.#ctor">
            <summary>
            Initializes a new instance of the Material class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.NumberingSeries">
            <summary>
            The NumberingSeries class represents the numbering series filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.NumberingSeries.#ctor">
            <summary>
            Initializes a new instance of the NumberingSeries class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PositionNumber">
            <summary>
            The PositionNumber class represents the position number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PositionNumber.#ctor">
            <summary>
            Initializes a new instance of the PositionNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Prefix">
            <summary>
            The Prefix class represents the prefix filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Prefix.#ctor">
            <summary>
            Initializes a new instance of the Prefix class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PrimaryPart">
            <summary>
            The PrimaryPart class represents the primary part filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PrimaryPart.#ctor">
            <summary>
            Initializes a new instance of the PrimaryPart class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Profile">
            <summary>
            The Profile class represents the profile filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.Profile.#ctor">
            <summary>
            Initializes a new instance of the Profile class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.StartNumber">
            <summary>
            The StartNumber class represents the start number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.StartNumber.#ctor">
            <summary>
            Initializes a new instance of the StartNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PourPhase">
            <summary>
            The PourPhase class represents the pour phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PartFilterExpressions.PourPhase.#ctor">
            <summary>
            Initializes a new instance of the PourPhase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions">
            <summary>
            The PourBreakFilterExpressions class contains all the pour break filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourBreakFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions">
            <summary>
            The PourObjectFilterExpressions class contains all the pour object filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourNumber">
            <summary>
            The PourNumber class represents the pour number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourNumber.#ctor">
            <summary>
            Initializes a new instance of the PourNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourType">
            <summary>
            The PourType class represents the pour type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourType.#ctor">
            <summary>
            Initializes a new instance of the PourType class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.ConcreteMixture">
            <summary>
            The ConcreteMixture class represents the concrete mixture filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.ConcreteMixture.#ctor">
            <summary>
            Initializes a new instance of the ConcreteMixture class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.Material">
            <summary>
            The Material class represents the material filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.Material.#ctor">
            <summary>
            Initializes a new instance of the Material class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourPhase">
            <summary>
            The PourPhase class represents the pour phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourObjectFilterExpressions.PourPhase.#ctor">
            <summary>
            Initializes a new instance of the PourPhase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions">
            <summary>
            The PourUnitFilterExpressions class contains all the pour unit filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.Guid">
            <summary>
            The Guid class represents the GUID filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.PourUnitFilterExpressions.Guid.#ctor">
            <summary>
            Initializes a new instance of the Guid class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions">
            <summary>
            The ReferenceObjectFilterExpressions class contains all the reference object filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReferenceObjectFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions">
            <summary>
            The ReinforcingBarFilterExpressions class contains all the reinforcing bar filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Class">
            <summary>
            The Class class represents the class filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Class.#ctor">
            <summary>
            Initializes a new instance of the Class class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Diameter">
            <summary>
            The Diameter class represents the diameter filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Diameter.#ctor">
            <summary>
            Initializes a new instance of the Diameter class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.JoinType">
            <summary>
            The JoinType class represents the join type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.JoinType.#ctor">
            <summary>
            Initializes a new instance of the JoinType class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Length">
            <summary>
            The Length class represents the length filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Length.#ctor">
            <summary>
            Initializes a new instance of the Length class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Material">
            <summary>
            The Material class represents the material filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Material.#ctor">
            <summary>
            Initializes a new instance of the Material class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.NumberingSeries">
            <summary>
            The NumberingSeries class represents the numbering series filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.NumberingSeries.#ctor">
            <summary>
            Initializes a new instance of the NumberingSeries class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Position">
            <summary>
            The Position class represents the position filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Position.#ctor">
            <summary>
            Initializes a new instance of the Position class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.PositionNumber">
            <summary>
            The PositionNumber class represents the position number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.PositionNumber.#ctor">
            <summary>
            Initializes a new instance of the PositionNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Prefix">
            <summary>
            The Prefix class represents the prefix filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Prefix.#ctor">
            <summary>
            Initializes a new instance of the Prefix class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Shape">
            <summary>
            The Shape class represents the shape filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Shape.#ctor">
            <summary>
            Initializes a new instance of the Shape class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Size">
            <summary>
            The Size class represents the size filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.Size.#ctor">
            <summary>
            Initializes a new instance of the Size class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.StartNumber">
            <summary>
            The StartNumber class represents the start number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.ReinforcingBarFilterExpressions.StartNumber.#ctor">
            <summary>
            Initializes a new instance of the StartNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions">
            <summary>
            The SurfaceFilterExpressions class contains all the surface object filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Type">
            <summary>
            The Type class represents the type filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Type.#ctor">
            <summary>
            Initializes a new instance of the Type class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Class">
            <summary>
            The Class class represents the class filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.SurfaceFilterExpressions.Class.#ctor">
            <summary>
            Initializes a new instance of the Class class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions">
            <summary>
            The TaskFilterExpressions class contains all the task filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.ActualEndDate">
            <summary>
            The ActualEndDate class represents the actual end date filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.ActualEndDate.#ctor">
            <summary>
            Initializes a new instance of the ActualEndDate class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.ActualStartDate">
            <summary>
            The ActualStartDate class represents the actual start date filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.ActualStartDate.#ctor">
            <summary>
            Initializes a new instance of the ActualStartDate class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Completeness">
            <summary>
            The Completeness class represents the completeness filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Completeness.#ctor">
            <summary>
            Initializes a new instance of the Completeness class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Critical">
            <summary>
            The Critical class represents the critical filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Critical.#ctor">
            <summary>
            Initializes a new instance of the Critical class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Local">
            <summary>
            The Local class represents the local filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Local.#ctor">
            <summary>
            Initializes a new instance of the Local class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Name">
            <summary>
            The Name class represents the name filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.Name.#ctor">
            <summary>
            Initializes a new instance of the Name class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.PlannedEndDate">
            <summary>
            The PlannedEndDate class represents the planned end date filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.PlannedEndDate.#ctor">
            <summary>
            Initializes a new instance of the PlannedEndDate class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.PlannedStartDate">
            <summary>
            The PlannedStartDate class represents the planned start date filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TaskFilterExpressions.PlannedStartDate.#ctor">
            <summary>
            Initializes a new instance of the PlannedStartDate class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions">
            <summary>
            The TemplateFilterExpressions class contains all the template filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.TemplateFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions">
            <summary>
            The WeldFilterExpressions class contains all the weld filter expressions.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomBoolean">
            <summary>
            The CustomBoolean class represents a custom Boolean filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomBoolean.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomBoolean class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomDateTime">
            <summary>
            The CustomDateTime class represents a custom DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomDateTime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomDateTime class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomNumber">
            <summary>
            The CustomNumber class represents a custom numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomNumber class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomString">
            <summary>
            The CustomString class represents a custom string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.CustomString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomString class.
            </summary>
            <param name="UserAttribute">The user attribute to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.Phase">
            <summary>
            The Phase class represents the phase filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.Phase.#ctor">
            <summary>
            Initializes a new instance of the Phase class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.PositionNumber">
            <summary>
            The PositionNumber class represents the position number filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.PositionNumber.#ctor">
            <summary>
            Initializes a new instance of the PositionNumber class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.ReferenceText">
            <summary>
            The ReferenceText class represents the reference text filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.ReferenceText.#ctor">
            <summary>
            Initializes a new instance of the ReferenceText class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.SizeAboveLine">
            <summary>
            The SizeAboveLine class represents the size above line filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.SizeAboveLine.#ctor">
            <summary>
            Initializes a new instance of the SizeAboveLine class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.SizeBelowLine">
            <summary>
            The SizeBelowLine class represents the size below line filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.SizeBelowLine.#ctor">
            <summary>
            Initializes a new instance of the SizeBelowLine class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.TypeAboveLine">
            <summary>
            The TypeAboveLine class represents the type above line filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.TypeAboveLine.#ctor">
            <summary>
            Initializes a new instance of the TypeAboveLine class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.TypeBelowLine">
            <summary>
            The TypeBelowLine class represents the type below line filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.TypeBelowLine.#ctor">
            <summary>
            Initializes a new instance of the TypeBelowLine class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.WeldingSite">
            <summary>
            The WeldingSite class represents the welding site filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Categories.WeldFilterExpressions.WeldingSite.#ctor">
            <summary>
            Initializes a new instance of the WeldingSite class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.DataFilterExpression">
            <summary>
            The DataFilterExpression class represents a basic data type for a filter expression.
            This is a base class for other filter expressions and cannot be used directly.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.DataFilterExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the DataFilterExpression class.
            </summary>
            <param name="Value">The object to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.DataFilterExpression.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DataFilterExpression class.
            </summary>
            <param name="Name">The name of the expression.</param>
            <param name="Category">The category of the expression.</param>
            <param name="Property">The property of the expression.</param>
            <param name="LocalizationKey">The localization key of the expression.</param>
        </member>
        <member name="P:Tekla.Structures.Filtering.DataFilterExpression.Value">
            <summary>
            Gets or sets the value to represent.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.DataFilterExpression.ToString">
            <summary>
            Creates a string representation of the current object.
            </summary>
            <returns>A new string representing the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Filtering.DateTimeConstantFilterExpression">
            <summary>
            The DateTimeConstantFilterExpression class represents a constant DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeConstantFilterExpression.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the DateTimeConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Initializes a new instance of the DateTimeConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeConstantFilterExpression.#ctor(System.DateTime,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the DateTimeConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the DateTimeConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.DateTimeFilterExpression">
            <summary>
            The DateTimeFilterExpression class represents a DateTime filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeFilterExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DateTimeFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.DateTimeFilterExpression.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DateTimeFilterExpression class.
            </summary>
            <param name="Name">The name of the expression.</param>
            <param name="Category">The category of the expression.</param>
            <param name="Property">The property of the expression.</param>
            <param name="LocalizationKey">The localization key of the expression.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.DateTimeOperatorType">
            <summary>
            The DateTime operator type defines the operators between two DateTime filter expressions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.IS_EQUAL">
            <summary>
            The "is equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.IS_NOT_EQUAL">
            <summary>
            The "is not equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.EARLIER_THAN">
            <summary>
            The "earlier than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.EARLIER_OR_EQUAL">
            <summary>
            The "earlier or equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.LATER_THAN">
            <summary>
            The "later than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.DateTimeOperatorType.LATER_OR_EQUEL">
            <summary>
            The "later or equal" operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.Expression">
            <summary>
            The Expression class represents an expression. This is a base class for other expressions and cannot be used directly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.Expression._ExpressionId">
            <summary>
            Internal Expression Identifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.Expression.Properties">
            <summary>
            Gets or sets the dictionary of custom properties.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.Expression.Clone``1(``0)">
            <summary>
            Clones an object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="Source">The object to be used.</param>
            <returns>The cloned object.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a non-serializable object is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.Expression.ToString">
            <summary>
            Creates a string representation of the current object.
            </summary>
            <returns>A new string representing the current object.</returns>
        </member>
        <member name="T:Tekla.Structures.Filtering.Filter">
            <summary>
            The Filter class creates a filter file based on the input <see cref="P:Tekla.Structures.Filtering.Filter.FilterExpression"/> object.
            </summary>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpression"/>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection"/>
            <example>
            The following example creates a Tekla Structures object group selection filter file.
            
            The expression generated is the following:
            (PartName == BEAM1 OR PartName == BEAM2 OR PartName == BEAM3 OR PartComment StartsWith test)
            
            <code>
            using System;
            using System.IO;
            using Tekla.Structures.Filtering;
            using Tekla.Structures.Filtering.Categories;
            
            public class FilterExample
            {
                   // Creates a selection filter for the following filter expression:
                   // (PartName == BEAM1 OR PartName == BEAM2 OR PartName == BEAM3 OR PartComment StartsWith test)
                   public void CreateSelectionFilter()
                   {
                       // Creates the filter expressions
                       PartFilterExpressions.Name PartName = new PartFilterExpressions.Name();
                       StringConstantFilterExpression Beam1 = new StringConstantFilterExpression("BEAM1");
                       StringConstantFilterExpression Beam2 = new StringConstantFilterExpression("BEAM2");
                       StringConstantFilterExpression Beam3 = new StringConstantFilterExpression("BEAM3");
            
                       // Creates a custom part filter
                       PartFilterExpressions.CustomString PartComment = new PartFilterExpressions.CustomString("Comment");
                       StringConstantFilterExpression Test = new StringConstantFilterExpression("test");
            
                       // Creates the binary filter expressions
                       BinaryFilterExpression Expression1 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam1);
                       BinaryFilterExpression Expression2 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam2);
                       BinaryFilterExpression Expression3 = new BinaryFilterExpression(PartName, StringOperatorType.IS_EQUAL, Beam3);
                       BinaryFilterExpression Expression4 = new BinaryFilterExpression(PartComment, StringOperatorType.STARTS_WITH, Test);
            
                       // Creates the binary filter expression collection
                       BinaryFilterExpressionCollection ExpressionCollection = new BinaryFilterExpressionCollection();
                       ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression1, BinaryFilterOperatorType.BOOLEAN_OR));
                       ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression2, BinaryFilterOperatorType.BOOLEAN_OR));
                       ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression3, BinaryFilterOperatorType.BOOLEAN_OR));
                       ExpressionCollection.Add(new BinaryFilterExpressionItem(Expression4));
            
                       string AttributesPath = Path.Combine(@"c:\modelPath", "attributes");
                       string FilterName = Path.Combine(AttributesPath, "filter");
            
                       Filter Filter = new Filter(ExpressionCollection);
                       // Generates the filter file
                       Filter.CreateFile(FilterExpressionFileType.OBJECT_GROUP_SELECTION, FilterName);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Filtering.Filter.FilterExpression">
            <summary>
            Gets the current <see cref="P:Tekla.Structures.Filtering.Filter.FilterExpression"/> instance.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when a null value is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.Filter.#ctor(Tekla.Structures.Filtering.FilterExpression)">
            <summary>
            Initializes a new instance of the Filter class.
            </summary>
            <param name="FilterExpression">The <see cref="P:Tekla.Structures.Filtering.Filter.FilterExpression"/> object to be generated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null <paramref name="FilterExpression"/> is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.Filter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the Filter class.
            </summary>
            <param name="FullFileName">The filter's full file name to load.</param>
            <param name="Provider">An object that supports the <see cref="T:System.IFormatProvider"/> interface to correctly parse numbers
            and dates according to the current culture information. If not provided, the current CultureInfo is used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null <paramref name="FullFileName"/> is specified.</exception>
        </member>
        <member name="M:Tekla.Structures.Filtering.Filter.CreateFile(Tekla.Structures.Filtering.FilterExpressionFileType,System.String)">
            <summary>
            Creates a filter and saves it as a text file.
            </summary>
            <param name="FilterExpressionFileType">The <see cref="T:Tekla.Structures.Filtering.FilterExpressionFileType"/> to be generated.</param>
            <param name="FullFileName">The full file name of the file to be saved.</param>
            <returns>A string containing the filter's full file name.</returns>
        </member>
        <member name="M:Tekla.Structures.Filtering.Filter.ToString">
            <summary>
             Returns the current <see cref="P:Tekla.Structures.Filtering.Filter.FilterExpression"/> as a string.
            </summary>
            <returns>A string representation of the current <see cref="P:Tekla.Structures.Filtering.Filter.FilterExpression"/>.</returns>
        </member>
        <member name="T:Tekla.Structures.Filtering.FilterExpression">
            <summary>
            The FilterExpression class represents a filter expression. This is a base class for other
            filter expressions and should not be used directly.
            </summary>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpression"/>
            <seealso cref="T:Tekla.Structures.Filtering.BinaryFilterExpressionCollection"/>
        </member>
        <member name="P:Tekla.Structures.Filtering.FilterExpression.IsEnable">
            <summary>
            Gets or sets the enabled state of the filter expression.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.FilterExpressionFileType">
            <summary>
            The filter expression file type defines the filter expression file types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.OBJECT_GROUP_SELECTION">
            <summary>
            The object group selection filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.OBJECT_GROUP_VIEW">
            <summary>
            The object group view filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.DRAWING_SINGLE_PART">
            <summary>
            The drawing single part filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.DRAWING_ASSEMBLY">
            <summary>
            The drawing assembly filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.DRAWING_CAST_UNIT">
            <summary>
            The drawing cast unit filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.FilterExpressionFileType.DRAWING_GENERAL">
            <summary>
            The drawing general filter.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.InvalidFilterExpressionException">
            <summary>
            The InvalidFilterExpressionException class represents an error that occurred during the expression evaluation.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.InvalidFilterExpressionException.#ctor(Tekla.Structures.Filtering.Expression,Tekla.Structures.Filtering.InvalidFilterExpressionExceptionReasonsType)">
            <summary>
            Initializes a new instance of the InvalidFilterExpressionException class.
            </summary>
            <param name="Expression">The invalid expression.</param>
            <param name="InvalidFilterExpressionExceptionReasonsType">The reason why the exception is thrown.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.InvalidFilterExpressionException.#ctor(Tekla.Structures.Filtering.Expression,Tekla.Structures.Filtering.OperatorType,Tekla.Structures.Filtering.Expression,Tekla.Structures.Filtering.InvalidFilterExpressionExceptionReasonsType)">
            <summary>
            Initializes a new instance of the InvalidFilterExpressionException class.
            </summary>
            <param name="LeftExpression">The invalid expression's left operand.</param>
            <param name="OperatorType">The invalid expression's operator type.</param>
            <param name="RightExpression">The invalid expression's right operand.</param>
            <param name="InvalidFilterExpressionExceptionReasonsType">The reason why the exception is thrown.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.InvalidFilterExpressionException.#ctor(Tekla.Structures.Filtering.Expression,Tekla.Structures.Filtering.InvalidFilterExpressionExceptionReasonsType,System.Int32)">
            <summary>
            Initializes a new instance of the InvalidFilterExpressionException class.
            </summary>
            <param name="Expression">The invalid expression.</param>
            <param name="InvalidFilterExpressionExceptionReasonsType">The reason why the exception is thrown.</param>
            <param name="MaximumExpressionNumber">The maximun number of expressions.</param>
        </member>
        <member name="P:Tekla.Structures.Filtering.InvalidFilterExpressionException.Expression">
            <summary>
            Gets the invalid expression.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.InvalidFilterExpressionException.InvalidFilterExpressionExceptionReasonsType">
            <summary>
            Gets the reason why the exception is thrown.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.InvalidFilterExpressionException.LeftExpression">
            <summary>
            Gets the invalid expression's left operand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.InvalidFilterExpressionException.RightExpression">
            <summary>
            Gets the invalid expression's right operand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Filtering.InvalidFilterExpressionException.OperatorType">
            <summary>
            Gets the invalid expression's operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.InvalidFilterExpressionExceptionReasonsType">
            <summary>
            The invalid filter expression exception reasons type defines the possible reasons for the
            InvalidFilterExpressionException.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.InvalidFilterExpressionExceptionReasonsType.TOO_MANY_NESTED_COLLECTIONS">
            <summary>
            There are too many nested collections.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.NumericConstantFilterExpression">
            <summary>
            The NumericConstantFilterExpression class represents a constant numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(Tekla.Structures.TeklaStructuresDatabaseTypeEnum)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="ObjectType">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{Tekla.Structures.TeklaStructuresDatabaseTypeEnum})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="ObjectTypes">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The  values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int16,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int16},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt16,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt16},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int32,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt32,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt32},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Int64,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Int64},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.UInt64,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.UInt64},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The values to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Double,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.IFormatProvider)">
            <summary>
            Initializes a new instance of the NumericConstantFilterExpression class.
            </summary>
            <param name="Values">The value to represent.</param>
            <param name="Provider">An IFormatProvider object.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.NumericFilterExpression">
            <summary>
            The NumericFilterExpression class represents a numeric filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericFilterExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NumericFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.NumericFilterExpression.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the NumericFilterExpression class.
            </summary>
            <param name="Name">The name of the expression.</param>
            <param name="Category">The category of the expression.</param>
            <param name="Property">The property of the expression.</param>
            <param name="LocalizationKey">The localization key of the expression.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.NumericOperatorType">
            <summary>
            The numeric operator type defines the operators between two numeric filter expressions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.IS_EQUAL">
            <summary>
            The "is equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.IS_NOT_EQUAL">
            <summary>
            The "is not equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.SMALLER_THAN">
            <summary>
            The "smaller than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.SMALLER_OR_EQUAL">
            <summary>
            The "smaller or equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.GREATER_THAN">
            <summary>
            The "greater than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.NumericOperatorType.GREATER_OR_EQUAL">
            <summary>
            The "greater or equal" operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.OperatorType">
            <summary>
            The operator type defines the operators between two filter expressions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.IS_EQUAL">
            <summary>
            The "is equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.IS_NOT_EQUAL">
            <summary>
            The "is not equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.BOOLEAN_OR">
            <summary>
            The Boolean OR operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.BOOLEAN_AND">
            <summary>
            The Boolean AND operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.SMALLER_THAN">
            <summary>
            The "smaller than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.SMALLER_OR_EQUAL">
            <summary>
            The "smaller or equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.GREATER_THAN">
            <summary>
            The "greater than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.GREATER_OR_EQUAL">
            <summary>
            The "greater or equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.CONTAINS">
            <summary>
            The "contains" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.NOT_CONTAINS">
            <summary>
            The "not contains" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.STARTS_WITH">
            <summary>
            The "starts with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.NOT_STARTS_WITH">
            <summary>
            The "not starts with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.ENDS_WITH">
            <summary>
            The "ends with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.NOT_ENDS_WITH">
            <summary>
            The "not ends with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.EARLIER_THAN">
            <summary>
            The "earlier than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.EARLIER_OR_EQUAL">
            <summary>
            The "earlier or equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.LATER_THAN">
            <summary>
            The "later than" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.OperatorType.LATER_OR_EQUAL">
            <summary>
            The "later or equal" operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Filtering.StringConstantFilterExpression">
            <summary>
            The StringConstantFilterExpression class represents a constant string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.StringConstantFilterExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringConstantFilterExpression class.
            </summary>
            <param name="Value">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.StringConstantFilterExpression.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the StringConstantFilterExpression class.
            </summary>
            <param name="Values">The value to represent.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.StringFilterExpression">
            <summary>
            The StringFilterExpression class represents a string filter expression.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Filtering.StringFilterExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringFilterExpression class.
            </summary>
            <param name="Key">The value to represent.</param>
        </member>
        <member name="M:Tekla.Structures.Filtering.StringFilterExpression.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the StringFilterExpression class.
            </summary>
            <param name="Name">The name of the expression.</param>
            <param name="Category">The category of the expression.</param>
            <param name="Property">The property of the expression.</param>
            <param name="LocalizationKey">The localization key of the expression.</param>
        </member>
        <member name="T:Tekla.Structures.Filtering.StringOperatorType">
            <summary>
            The string operator type defines the operators between two string filter expressions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.IS_EQUAL">
            <summary>
            The "is equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.IS_NOT_EQUAL">
            <summary>
            The "is not equal" operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.CONTAINS">
            <summary>
            The "contains" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.NOT_CONTAINS">
            <summary>
            The "not contains" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.STARTS_WITH">
            <summary>
            The "starts with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.NOT_STARTS_WITH">
            <summary>
            The "not starts with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.ENDS_WITH">
            <summary>
            The "ends with" string operator.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Filtering.StringOperatorType.NOT_ENDS_WITH">
            <summary>
            The "not ends with" string operator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Forming.FormingStates">
            <summary>
            FormingStates class which contains different forming options.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Forming.FormingStates" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.#ctor(Tekla.Structures.Forming.DeformingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Forming.FormingStates" /> class.
            </summary>
            <param name="deforming">Deforming type.</param>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.#ctor(Tekla.Structures.Forming.FoldingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Forming.FormingStates" /> class.
            </summary>
            <param name="folding">Folding type.</param>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.#ctor(Tekla.Structures.Forming.WrappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Forming.FormingStates" /> class.
            </summary>
            <param name="wrapping">Wrapping type.</param>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.#ctor(Tekla.Structures.Forming.DeformingType,Tekla.Structures.Forming.FoldingType,Tekla.Structures.Forming.WrappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Forming.FormingStates" /> class.
            </summary>
            <param name="deforming">Deforming type.</param>
            <param name="folding">Folding type.</param>
            <param name="wrapping">Wrapping type.</param>
        </member>
        <member name="P:Tekla.Structures.Forming.FormingStates.Deforming">
            <summary>
            Gets or sets the deforming type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Forming.FormingStates.Folding">
            <summary>
            Gets or sets the folding type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Forming.FormingStates.Wrapping">
            <summary>
            Gets or sets the wrapping type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Forming.FormingStates.Clone">
            <summary>
            Method for cloning the current object.
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="T:Tekla.Structures.Forming.DeformingType">
            <summary>
            Enumeration for deforming type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.DeformingType.NOT_SPECIFIED">
            <summary>
            Not specified, default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.DeformingType.DEFORMED">
            <summary>
            Indiactes deformed item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.DeformingType.UNDEFORMED">
            <summary>
            Indicates undeformed item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Forming.FoldingType">
            <summary>
            Enumeration for folding type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.FoldingType.NOT_SPECIFIED">
            <summary>
            Not specified, default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.FoldingType.FOLDED">
            <summary>
            Indicates folded item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.FoldingType.UNFOLDED">
            <summary>
            Indicates unfolded item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Forming.WrappingType">
            <summary>
            Enumeration for wrapping type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.WrappingType.NOT_SPECIFIED">
            <summary>
            Not specified, default value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.WrappingType.WRAPPED">
            <summary>
            Indicates wrapped item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Forming.WrappingType.UNWRAPPED">
            <summary>
            Indicates unwrapped item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.AABB">
            <summary>
            The AABB class represents an axis-aligned 3d bounding box.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures.Model;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam MyBeam1 = new Beam();
                       Beam MyBeam2 = new Beam();
            
                       Solid MySolid1 = MyBeam1.GetSolid();
                       Solid MySolid2 = MyBeam2.GetSolid();
                       AABB MyAxisAlignedBoundingBox1 = new AABB(MySolid1.MinimumPoint, MySolid1.MaximumPoint);
                       AABB MyAxisAlignedBoundingBox2 = new AABB(MySolid2.MinimumPoint, MySolid2.MaximumPoint);
            
                       if (MyAxisAlignedBoundingBox1.Collide(MyAxisAlignedBoundingBox2))
                       {
                           Console.WriteLine("Collision between beams!");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.AABB.MinPoint">
            <summary>
            The minimum point of the axis-aligned 3d bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.AABB.MaxPoint">
            <summary>
            The maximum point of the axis-aligned 3d bounding box.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.#ctor">
            <summary>
            Instantiates a new axis-aligned 3d bounding box with the maximum point
            initialized to the smallest possible value and the minimum point to the
            largest possible value.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Instantiates a new axis-aligned 3d bounding box with the given minimum and maximum points.
            </summary>
            <param name="MinPoint">The minimum point to be used.</param>
            <param name="MaxPoint">The maximum point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.#ctor(Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Instantiates a new axis-aligned 3d bounding box which is a copy
            of the given axis-aligned 3d bounding box.
            </summary>
            <param name="AABB">The axis-aligned 3d bounding box to copy from.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.IsInside(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Checks if the given point is inside the current axis-aligned 3d bounding box.
            </summary>
            <param name="Point">The point to be checked.</param>
            <returns>True if the point is inside the current axis-aligned 3d bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.IsInside(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Checks if the given line segment is inside the current axis-aligned 3d bounding box.
            </summary>
            <param name="LineSegment">The line segment to be checked.</param>
            <returns>True if the point is inside the current axis-aligned 3d bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.GetCenterPoint">
            <summary>
            Returns the geometric center point of the current axis-aligned 3d bounding box.
            </summary>
            <returns>The geometric center point of the current axis-aligned 3d bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.Collide(Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Checks if the current axis-aligned 3d bounding box collides with
            another given axis-aligned 3d bounding box. Both axis-aligned 3d
            bounding boxes need to be in the same coordinate system or in the
            same workplane, so that they are defined using the same axes.
            </summary>
            <param name="Other">Another axis-aligned 3d bounding box to be used in the collision check.</param>
            <returns>True if the axis-aligned 3d bounding boxes collide.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.op_Addition(Tekla.Structures.Geometry3d.AABB,Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Combines (adds) the given two axis-aligned 3d bounding boxes.
            </summary>
            <param name="AABB1">The first axis-aligned 3d bounding box to combine.</param>
            <param name="AABB2">The second axis-aligned 3d bounding box to combine.</param>
            <returns>The new combined axis-aligned 3d bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.op_Addition(Tekla.Structures.Geometry3d.AABB,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds the given point to the given axis-aligned 3d bounding box.
            </summary>
            <param name="AABB">The axis-aligned 3d bounding box to add to.</param>
            <param name="Point">The point to be added.</param>
            <returns>The new axis-aligned 3d bounding box which includes the
            given axis-aligned 3d bounding box and the given point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.AABB.op_Addition(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.AABB)">
            <summary>
            Adds the given point to the given axis-aligned 3d bounding box.
            </summary>
            <param name="Point">The point to be added.</param>
            <param name="AABB">The axis-aligned 3d bounding box to add to.</param>
            <returns>The new axis-aligned 3d bounding box which includes the given
            axis-aligned 3d bounding box and the given point.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Arc">
            <summary>
            Represents an arc geometry
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.Length">
            <summary>
            Returns the length of the arc
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.StartPoint">
            <summary>
             Gets or sets start point of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.EndPoint">
            <summary>
             Gets or sets end point of the arc.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.Clone">
            <summary>
            Returns a copy of itself
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.CenterPoint">
            <summary>
            Gets or sets center point of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.ArcMiddlePoint">
            <summary>
            Gets the point located at the middle of the arc
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.Normal">
            <summary>
            Gets normal of the arc, which defines the axis of rotation of the radial vector pointing to the start point
            of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.Angle">
            <summary>
            Gets angle of the arc in radians.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.Radius">
            <summary>
            Gets the radius of the arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.StartTangent">
            <summary>
            Gets the unit vector tangent to the start point which defines the Y axis of the arc coordinate system
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Arc.StartDirection">
            <summary>
            Gets the unit vector which points from the center point to the start point of the arc, which defines the
            X axis of the arc coordinate system.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Constructs a new arc geometry
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point that defines the arc.</param>
            <exception cref="T:System.ArgumentException">Throws when input points are not defined correctly</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Constructs a new arc geometry
            </summary>
            <param name="centerPoint">Center point of the arc.</param>
            <param name="startPoint">StartPoint point of the arc.</param>
            <param name="normal">Normal vector of the arc, defines the axis of rotation of the start vector.</param>
            <param name="deltaAngleRadians">Angle of the arc in radians. From 0 to 2*PI.</param>
            <exception cref="T:System.ArgumentException">Throws when input values are not defined correctly</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Double,System.Double)">
            <summary>
            Constructs a new arc geometry
            </summary>
            <param name="centerPoint">Center point of the arc.</param>
            <param name="startDirection">Direction vector pointing from the center towards the start point of the arc.</param>
            <param name="startTangent">Vector tangent to the arc at its start point, pointing towards the arc.</param>
            <param name="radius">Radius of the arc</param>
            <param name="deltaAngleRadians">Angle of the arc in radians. From 0 to 2*PI.</param>
            <exception cref="T:System.ArgumentException">Throws when input values are not defined correctly</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.Equals(System.Object)">
            <summary>
            Checks for equality with another arc
            </summary>
            <param name="other">Other arc</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.Equals(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Checks for equality with another curve
            </summary>
            <param name="other">Other curve</param>
            <returns>True if the other curve is an arc and is equal to this</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Arc.GetHashCode">
            <summary>
            Get HashCode override
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.IBoundingVolume">
            <summary>
            The BoundingVolume interface represents any generic 3D bounding volume.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods">
            <summary>
            This class defines extension methods for type conversions between
            Open API Geometry3d types and Tekla.Common.Geometry types.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToPoint(Tekla.Common.Geometry.Vector3)">
            <summary>
            Extension method for creating a point out of Vector3.
            </summary>
            <param name="vector3">Vector3 to be converted.</param>
            <returns>Point created from Vector3.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToVector3(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Extension method for creating a Vector3 out of Point.
            </summary>
            <param name="point">Point to be converted.</param>
            <returns>Vector3 created from point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToUnitVector3(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Extension method for creating a UnitVector3 out of Vector.
            </summary>
            <param name="vector">Vector to be converted.</param>
            <returns>UnitVector3 created from vector.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToVector(Tekla.Common.Geometry.UnitVector3)">
            <summary>
            Extension method for creating a Vector out of UnitVector3.
            </summary>
            <param name="unitVector3">UnitVector3 to be converted.</param>
            <returns>Vector created from UnitVector3.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToUnitVector3Array(Tekla.Structures.Geometry3d.Vector[])">
            <summary>
            Extension method for creating a UnitVector3 array out of Vector array.
            </summary>
            <param name="vectors">Array of vectors to be converted.</param>
            <returns>Array of UnitVector3 converted from array of Vectors.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToPointArray(System.Collections.Generic.IEnumerable{Tekla.Common.Geometry.Vector3})">
            <summary>
            Extension method for creating a Point array out of Vector3 IEnumerable.
            </summary>
            <param name="vectors3">Vector3 IEnumerable to be converted.</param>
            <returns>Array of Points converted from Vector3 IEnumerable.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToLine3(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Extension method for creating a Line3 out of Line.
            </summary>
            <param name="line">Line to be converted.</param>
            <returns>Line3 created from line.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToSegment3(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Extension method for creating a Segment3 out of LineSegment.
            </summary>
            <param name="lineSegment">LineSegment to be converted.</param>
            <returns>Segment3 created from LineSegment.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToLineSegment(Tekla.Common.Geometry.Segment3)">
            <summary>
            Extension method for creating a LineSegment out of Segment3.
            </summary>
            <param name="segment3">Segment3 to be converted.</param>
            <returns>LineSegment created from Segment3.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CommonGeometryExtensionMethods.ToPlane3(Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Extension method for creating a Plane3 out of GeometricPlane.
            </summary>
            <param name="geometricPlane">GeometricPlane to be converted.</param>
            <returns>Plane3 created from GeometricPlane.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.GeometryConstants">
            <summary>
            The Constants class of Geometry3d holds certain constant values that are used
            internally by the other geometry classes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.GeometryConstants.DISTANCE_EPSILON">
            <summary>
            The minimum distance used for checking if points, lines, etc. coincide.
            Anything smaller will be considered equivalent to 0.0.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.GeometryConstants.ANGULAR_EPSILON">
            <summary>
            The minimum angle (radians) used for checking angular parallelism, perpendicularity, etc.
            Anything smaller will be considered equivalent to 0.0.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.GeometryConstants.SCALAR_EPSILON">
            <summary>
            The minimum value used for comparing floating point scalar values. Any smaller difference will be considered
            equivalent to 0.0.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.CoordinateSystem">
            <summary>
            The CoordinateSystem class defines a coordinate system in space. The system is
            defined by an origin, an X-axis and a Y-axis. The Z-axis is the cross product of the X-axis and the Y-axis.
            </summary>
            <example>
            The following example creates a new coordinate system which is used to create a new view.
            <code>
            using System;
            using Tekla.Structures.Drawing;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Drawing GADrawing = new GADrawing();
                       CoordinateSystem CoordinateSystem = new CoordinateSystem(new Point(), new Vector(1, 0, 0), new Vector(0, 1, 0));
                       View newView = new View(GADrawing.GetSheet(), CoordinateSystem, CoordinateSystem, new AABB(new Point(0, 0), new Point(1000, 1000, 1000)));
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.CoordinateSystem._Origin">
            <summary>
            The origin of the coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.CoordinateSystem._AxisX">
            <summary>
            The X-axis of the coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.CoordinateSystem._AxisY">
            <summary>
            The Y-axis of the coordinate system.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.CoordinateSystem.Origin">
            <summary>
            The origin of the coordinate system.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.CoordinateSystem.AxisX">
            <summary>
            The X-axis of the coordinate system.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.CoordinateSystem.AxisY">
            <summary>
            The Y-axis of the coordinate system.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CoordinateSystem.#ctor">
            <summary>
            Instantiates a coordinate system in the current work plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.CoordinateSystem.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Instantiates a coordinate system with the given origin, X-axis and Y-axis.
            </summary>
            <param name="Origin">The origin for the coordinate system.</param>
            <param name="AxisX">The X-axis for the coordinate system.</param>
            <param name="AxisY">The Y-axis for the coordinate system.</param>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Distance">
            <summary>
            The Distance class contains methods for calculating the distance between geometric objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Distance.PointToPoint(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns the distance between the given two points.
            </summary>
            <param name="Point1">The first point to be used.</param>
            <param name="Point2">The second point to be used.</param>
            <returns>The distance between the given points.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Distance.PointToLine(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Returns the distance between the given point and line.
            </summary>
            <param name="Point">The point to be used.</param>
            <param name="Line">The line to be used.</param>
            <returns>The distance between the given point and line.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Distance.PointToLineSegment(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns the distance between the given point and line segment.
            </summary>
            <param name="Point">The point to be used.</param>
            <param name="LineSegment">The line segment to be used.</param>
            <returns>The distance between the given point and line segment.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Distance.PointToPlane(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns the distance between the given point and plane.
            </summary>
            <param name="Point">The point to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>The distance between the given point and plane.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.FacetedBrep">
             <summary>
             The FacetedBrep class defines a faceted BREP.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                 public void Example1()
                 {
                     var vertex = new[]
                     {
                         new Vector(0.0, 0.0, 0.0), // 0
                         new Vector(300.0, 0.0, 0.0), // 1
                         new Vector(300.0, 700.0, 0.0), // 2
                         new Vector(0.0, 700.0, 0.0), // 3
                         new Vector(300.0, 700.0, 0.0), // 4
                         new Vector(300.0, 700.0, 2000.0), // 5
                         new Vector(0.0, 700.0, 2000.0), // 6
                         new Vector(100.0, 100.0, 0.0), // 7
                         new Vector(200.0, 100.0, 0.0), // 8
                         new Vector(200.0, 200.0, 0.0), // 9
                         new Vector(100.0, 200.0, 0.0) // 10
                     };
                     var outerWires = new[]
                     {
                         new[] { 0, 1, 2, 3 },
                         new[] { 3, 4, 5, 6 }
                     };
                     var innerWires = new Dictionary&lt;int,int[][]&gt;
                     {
                         { 0, new[] { new[] { 10, 9, 8, 7 } } }
                     };
            
                     var brep = new FacetedBrep(vertex, outerWires, innerWires);
                     Console.WriteLine("This BREP has {0} faces", brep.Faces.Count);
                 }
             }
             </code>
             </example>
             
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.#ctor(Tekla.Structures.Geometry3d.Vector[],System.Int32[][],System.Collections.Generic.IDictionary{System.Int32,System.Int32[][]})">
            <summary>
            Initializes a new instance of the FacetedBrep class.
            </summary>
            <param name="vertices">Vector of the faceted brep vertices.</param>
            <param name="outerWires">outerWires is an array of integer arrays, providing indices in the traversing order
            for each outer loop/wire. The indices correspond to the position of a vertex in the vertices array."</param>
            <param name="innerWires">innerWires is an array of integer arrays, providing indices in the traversing order
            for each inner loop/wire. The dictionary key for the innerWires is the Face index (0-origin).
            The indices correspond to the position of a vertex in the vertices array."</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.#ctor(Tekla.Structures.Geometry3d.Vector[],System.Int32[][],System.Collections.Generic.IDictionary{System.Int32,System.Int32[][]},System.Collections.Generic.IList{Tekla.Structures.Geometry3d.IndirectPolymeshEdge})">
            <summary>
            Initializes a new instance of the FacetedBrep class.
            </summary>
            <param name="vertices">Vector of the faceted brep vertices.</param>
            <param name="outerWires">outerWires is an array of integer arrays, providing indices in the traversing order
            for each outer loop/wire. The indices correspond to the position of a vertex in the vertices array."</param>
            <param name="innerWires">innerWires is an array of integer arrays, providing indices in the traversing order
            for each inner loop/wire. The dictionary key for the innerWires is the Face index (0-origin).
            The indices correspond to the position of a vertex in the vertices array."</param>
            <param name="edges">The edge information as indirect edges.</param>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrep.Faces">
            <summary>
            Gets the faces.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrep.InnerWires">
            <summary>
            Gets the inner wires.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrep.OuterWires">
            <summary>
            Gets the outer wires.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrep.GetEdges">
            <summary>
            Gets the edges.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrep.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.CheckForTwoManifold">
            <summary>
            Gets a value indicating whether this instance is 2-manifold.
            </summary>
            <returns><c>true</c> if this instance is 2-manifold; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.GetInnerFace(System.Int32)">
            <summary>
            Gets the inner face at the specified index.
            </summary>
            <param name="faceIndex">The index of the face.</param>
            <returns>The array of vertex indexes for the inner face.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.GetInnerFaceCount(System.Int32)">
            <summary>
            Gets the inner face count of the outer face at the specified index.
            </summary>
            <param name="faceIndex">The index of the face.</param>
            <returns>The count of inner faces for the outer face.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrep.GetOuterFace(System.Int32)">
            <summary>
            Gets the outer face at the specified index.
            </summary>
            <param name="faceIndex">The index of the face.</param>
            <returns>The array of vertex indexes for the outer face.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.FacetedBrepFace">
             <summary>
             The FacetedBrepFace class defines a face of a faceted BREP.
             A FacetedBrepFace cannot be instantiated directly. They are managed internally by a FacetedBrep.
             </summary>
             <example>
             <code>
             using System.Linq;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
            
             public void PrintHoleVerticesFromCubeFace()
             {
            
                 var cubeWithHoleVertices = new[]
                 {
                     new Vector(   0.0,    0.0,    0.0),   // 0
                     new Vector( 500.0,    0.0,    0.0),   // 1
                     new Vector( 500.0,  500.0,    0.0),   // 2
                     new Vector(   0.0,  500.0,    0.0),   // 3
                     new Vector(   0.0,    0.0,  500.0),   // 4
                     new Vector( 500.0,    0.0,  500.0),   // 5
                     new Vector( 500.0,  500.0,  500.0),   // 6
                     new Vector(   0.0,  500.0,  500.0),   // 7
             
                     new Vector( 100.0,  100.0,  0.0),     // 8
                     new Vector( 300.0,  100.0,  0.0),     // 9
                     new Vector( 300.0,  300.0,  0.0),     // 10
                     new Vector( 100.0,  300.0,  0.0),     // 11
             
                     new Vector( 100.0,  100.0, 500.0),    // 12
                     new Vector( 300.0,  100.0, 500.0),    // 13
                     new Vector( 300.0,  300.0, 500.0),    // 14
                     new Vector( 100.0,  300.0, 500.0),    // 15
                 };
             
                 var outloops = new[]
                 {
                     new[] {  0,  3,  2,  1 },
                     new[] {  0,  1,  5,  4 },
                     new[] {  1,  2,  6,  5 },
                     new[] {  2,  3,  7,  6 },
                     new[] {  3,  0,  4,  7 },
                     new[] {  4,  5,  6,  7 },
             
                     new[] { 15, 12,   8, 11 },
                     new[] { 14, 15,  11, 10 },
                     new[] { 13, 14,  10,  9 },
                     new[] { 12, 13,   9,  8 }
                 };
             
                 var innerLoops = new Dictionary{int, int[][]}
                 {
                     { 0, new[] { new[] {  8,  9, 10, 11 } } }, // this innerloop is on face 0
                     { 5, new[] { new[] { 12, 15, 14, 13 } } }, // this innerloop is on face 5
                 };
             
                 var brep = new FacetedBrep(cubeWithHoleVertices, outloops, innerLoops);
             
                 foreach (FacetedBrepFace face in brep.Faces.Where(x => x.HasHoles))
                 {
                     foreach (FacetedBrepFaceHole hole in face.Holes)
                     {
                         foreach (Vector vertex in hole.Vertices)
                         {
                             Console.WriteLine("Hole point x:{0} y:{1} z:{2}", vertex.X, vertex.Y, vertex.Z);
                         }
                     }
                 }
             } // QueryHoleFromCubeFace
             } // Example
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.FacetedBrepFace.brepFace">
            The actual data type this is encapsulating.
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFace.HasHoles">
            <summary>
            Gets a value indicating whether this instance has holes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFace.Holes">
            <summary>
            Gets the holes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFace.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFace.VerticeIndexes">
            <summary>
            Gets the vertex indexes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFace.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.FacetedBrepFaceHole">
            <summary>
            The FacetedBrepFaceHole class defines a hole on a faceted BREP face.
            A FacetedBrepFaceHole cannot be instantiated directly. They are managed internally by a FacetedBrepFace.
            You can look also at the code example for the class FacetedBrepFace to see more examples.
            </summary>
            <example>
            <code>
            using System.Linq;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                public void Example1()
                {
                    FacetedBrep brep = SomeFunctionThatReturnFacetedBrep();
                    foreach (FacetedBrepFace face in brep.Faces.Where(x => x.HasHoles))
                    {
                        foreach (FacetedBrepFaceHole hole in face.Holes)
                        {
                            foreach (Vector vertex in hole.Vertices)
                            {
                                Console.WriteLine("Hole point x:{0} y:{1} z:{2}", vertex.X, vertex.Y, vertex.Z);
                            }
                        }
                    }
                }
            }
            </code>
            </example> 
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFaceHole.Count">
            <summary>
            Gets the count;
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFaceHole.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFaceHole.VerticeIndexes">
            <summary>
            Gets the vertice indexes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepFaceHole.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.FacetedBrepWithNormals">
            <summary>
            The FacetedBRepWithNormals class defines a faceted BREP that has also vertex normal vectors.
            </summary>
            <example>
            <code> 
            public void Example()
            {
                /* See the method <b>InsertUsingNormals</b> in the <b>ShapeItem</b> class for a code example*/
            }     
            </code>
            </example>
            
        </member>
        <member name="M:Tekla.Structures.Geometry3d.FacetedBrepWithNormals.#ctor(Tekla.Structures.Geometry3d.Vector[],System.Int32[][],System.Collections.Generic.IDictionary{System.Int32,System.Int32[][]},Tekla.Structures.Geometry3d.Vector[])">
            <summary>
            Initializes a new instance of the FacetedBrepWithNormals class. 
            </summary>
            <param name="vertices">
            The vertex geometries.
            </param>
            <param name="outerWires">
            The outer wires as a two dimensional array. Integer indexes are used for identifying the
            corresponding vertex for the node in the wire from the array provided by parameter <b>vertices</b>.
            </param>
            <param name="innerWires">
            The inner wires also known as inner loops or holes. 
            </param>
            <param name="normals">
            Normal unit vectors for each vertex in <b>vertices</b>. 
            </param>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.FacetedBrepWithNormals.Normals">
            <summary>
            Gets or sets the vertex normal unit vectors
            </summary> 
        </member>
        <member name="T:Tekla.Structures.Geometry3d.GeometricPlane">
            <summary>
            The GeometricPlane class represents a 3d geometric plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.GeometricPlane.Origin">
            <summary>
            The origin point of the plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.GeometricPlane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.GeometricPlane.#ctor">
            <summary>
            Instantiates an XY-plane with the origin at (0,0,0).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.GeometricPlane.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Instantiates a plane defined by the given origin point and normal vector.
            </summary>
            <param name="Origin">The origin point to be used.</param>
            <param name="Normal">The normal vector to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.GeometricPlane.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Instantiates a plane defined by the given origin, X-axis vector and Y-axis vector.
            </summary>
            <param name="Origin">The origin to be used.</param>
            <param name="Xaxis">The X-axis to be used.</param>
            <param name="Yaxis">The Y-axis to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.GeometricPlane.#ctor(Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            Instantiates a plane defined by the given coordinate system.
            </summary>
            <param name="CoordSys">The coordinate system to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.GeometricPlane.GetNormal">
            <summary>
            Returns a normalized normal vector of the plane.
            </summary>
            <returns>The normalized normal vector of the plane.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.ICurve">
            <summary>
            Interface that represents an abstract curved geometry defined by a set of points. This interface is intended
            to be the base class of 3D curves.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.ICurve.Clone">
            <summary>
            Returns a deep copy of the geometry
            </summary>
            <returns>Copy of self</returns>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.ICurve.StartPoint">
            <summary>
            Gets the start point of the curve
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.ICurve.EndPoint">
            <summary>
            Gets the end point of the curve. May be the same as <see cref="P:Tekla.Structures.Geometry3d.ICurve.StartPoint"/> if the curve is closed.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.ICurve.Length">
            <summary>
            Gets the length of the curve
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.PolymeshEdgeTypeEnum">
            <summary>
            The type of the polymesh edge. This should always correspond 1:1 with
            geometry::IndirectEdge_s::EdgeType_e on the Tekla Structures Core side
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.PolymeshEdgeTypeEnum.VISIBLE_EDGE">
            <summary>
            Explicitly states that this edge is visible
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.PolymeshEdgeTypeEnum.INVISIBLE_EDGE">
            <summary>
            For hiding edges in visualizations
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.IndirectPolymeshEdge">
             <summary>
             The IndirectEdge class represents a single global edge in a solid
             using integer indexes to reference to vertices instead of directly using
             geometric (coordinate) values.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             
             public void InsertCubeWithEdgeInfoExample()
             {
                var cubeVertices = new[]
                {
                        new Vector(  0.0,   0.0,   0.0), // 0
                        new Vector(300.0,   0.0,   0.0), // 1
                        new Vector(300.0, 300.0,   0.0), // 2
                        new Vector(  0.0, 300.0,   0.0), // 3
                        new Vector(  0.0,   0.0, 300.0), // 4
                        new Vector(300.0,   0.0, 300.0), // 5
                        new Vector(300.0, 300.0, 300.0), // 6
                        new Vector(  0.0, 300.0, 300.0), // 7
                };
                var outerloop = new[] { new[] { 0, 3, 2, 1 },
                                          new[] { 0, 1, 5, 4 },
                                          new[] { 1, 2, 6, 5 },
                                          new[] { 2, 3, 7, 6 },
                                          new[] { 3, 0, 4, 7 },
                                          new[] { 4, 5, 6, 7 }};
            
                var innerLoop = new Dictionary{int, int[][]}
                {
                };
            
                var edges = new List{IndirectPolymeshEdge}
                {
                         new IndirectPolymeshEdge { StartPoint = 0, EndPoint = 3, EdgeType = PolymeshEdgeTypeEnum.INVISIBLE_EDGE },
                         new IndirectPolymeshEdge { StartPoint = 4, EndPoint = 5, EdgeType = PolymeshEdgeTypeEnum.INVISIBLE_EDGE }
                };
            
                var polymesh = new FacetedBrep(cubeVertices, outerloop, innerLoop, edges);
            
                var shapeItem = new ShapeItem
                {
                    Name = "Cube with two invisible edges",
                    ShapeFacetedBrep = polymesh,
                    UpAxis = ShapeUpAxis.Z_Axis
                };
                var result = shapeItem.Insert();
            }
             </code>
             </example>
            
        </member>
        <member name="P:Tekla.Structures.Geometry3d.IndirectPolymeshEdge.EdgeType">
            <summary>
            Type of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.IndirectPolymeshEdge.StartPoint">
            <summary>
            Start point of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.IndirectPolymeshEdge.EndPoint">
            <summary>
            End point of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.IndirectPolymeshEdge.ShellIndex">
            <summary>
            The index of the shell the edge belongs to.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Intersection">
            <summary>
            The Intersection class contains methods for calculating intersections between geometric objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.LineToLine(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Returns a new line segment which is the shortest path between the given lines or null if the lines are
            parallel. If the resulting line segment has a length of 0.0, the given lines actually intersect
            in 3d space.
            </summary>
            <param name="line1">The first line to be used.</param>
            <param name="line2">The second line to be used.</param>
            <returns>The shortest line segment between the given lines or null if the lines are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.LineToPlane(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new point which is an intersection of the given line and plane or null if the line and the plane are
            parallel.
            </summary>
            <param name="line">The line to be used.</param>
            <param name="plane">The plane to be used.</param>
            <returns>The intersection point or null if no intersection was found.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.LineSegmentToPlane(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new point which is an intersection of the given line segment and plane or null if
            the line segment and the plane are parallel or do not intersect.
            </summary>
            <param name="lineSegment">The line segment to be used.</param>
            <param name="plane">The plane to be used.</param>
            <returns>The intersection point or null if no intersection was found.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.PlaneToPlane(Tekla.Structures.Geometry3d.GeometricPlane,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new line which is an intersection of the given two planes or null if the planes are
            parallel.
            </summary>
            <param name="plane1">The first plane to be used.</param>
            <param name="plane2">The second plane to be used.</param>
            <returns>The intersection line or null if no intersection was found.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.LineToObb(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.OBB)">
            <summary>
            Returns a new line segment which is an intersection of the given line and the oriented bounding box
            or null if the line and oriented bounding box do not intersect.
            </summary>
            <param name="line">Line to be used.</param>
            <param name="obb">Oriented bounding box to be used.</param>
            <returns>The intersection line segment or null if no intersection was found.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.LineSegmentToObb(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.OBB)">
            <summary>
            Returns a new line segment which is an intersection of the given line segment and the oriented bounding box
            or null if the line segment and oriented bounding box do not intersect.
            </summary>
            <param name="lineSegment">Line segment to be used.</param>
            <param name="obb">Oriented bounding box to be used.</param>
            <returns>The intersection line segment or null if no intersection was found.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Intersection.SmallerThanEpsilon(Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Method for zero vector evaluation.
            </summary>
            <param name="vector">Vector to be evaluated.</param>
            <param name="epsilon">Epsilon to be used in comparison.</param>
            <returns>True if all the vector points are smaller than the given epsilon.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Line">
            <summary>
            The Line class represents a single infinite line in 3D space. See LineSegment for
            the implementation of a segment of a line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Line.Origin">
            <summary>
            The origin of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Line.Direction">
            <summary>
            The direction vector of the line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Line.#ctor">
            <summary>
            Instantiates a line with an undefined direction.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Line.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Instantiates a line defined by the given points.
            </summary>
            <param name="p1">The first point to be used.</param>
            <param name="p2">The second point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Line.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Instantiates a line defined by the given point and direction vector.
            </summary>
            <param name="Point">A point that will be on the line.</param>
            <param name="Direction">The direction of the line.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Line.#ctor(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Instantiates a line defined by the given line segment.
            </summary>
            <param name="LineSegment">The line segment to be used.</param>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.LineSegment">
            <summary>
            The LineSegment class represents a single finite segment of a line in 3D space. See Line
            for the implementation of a straight line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.LineSegment.Point1">
            <summary>
            Gets the start point of the line segment
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.LineSegment.Point2">
            <summary>
            Gets the end point of the line segment
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.LineSegment.StartPoint">
            <summary>
            Gets the start point of the line segment
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.LineSegment.EndPoint">
            <summary>
            Gets the end point of the line segment
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.LineSegment.Tekla#Structures#Geometry3d#ICurve#Length">
            <summary>
            Gets the
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.Clone">
            <summary>
            Creates a copy of itself
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.#ctor">
            <summary>
            Instantiates a line segment with both the starting point and the end point zeroed.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Instantiates a line segment with the given points.
            </summary>
            <param name="Point1">The starting point to be used.</param>
            <param name="Point2">The end point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="o">The object that equality is wished to be checked with.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.Equals(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Returns true if the other curve is a line segment equal to this
            </summary>
            <param name="other">The curve to check equality against</param>
            <returns>True if the curves are equal</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.Length">
            <summary>
            Returns the length of a line segment.
            </summary>
            <returns>The length of the line segment.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.GetDirectionVector">
            <summary>
            Returns a new unit direction vector of a line segment.
            </summary>
            <returns>The unit direction vector of the line segment.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.GetHashCode">
            <summary>
            Returns a hash code for a line segment.
            Notice, in extremely rare cases, you might not get the same
            hash code for two line segments even though they are considered equal! This
            should, however, happen only in extremely rare cases!
            </summary>
            <returns>The hash code for the line segment.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.op_Equality(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Checks the equality of two line segments.
            </summary>
            <param name="Segment1">The first line segment to be used.</param>
            <param name="Segment2">The second line segment to be used.</param>
            <returns>True if the two line segments are equal.
            False otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.LineSegment.op_Inequality(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Checks the inequality of two line segments.
            </summary>
            <param name="Segment1">The first line segment to be used.</param>
            <param name="Segment2">The second line segment to be used.</param>
            <returns>True if the two line segments are not equal.
            False otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Matrix">
            <summary>
            The Matrix class represents a 4x3 matrix.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Matrix.Transformation">
            <summary>
            The transformation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Sets or gets the matrix element values.
            </summary>
            <param name="row">The matrix row index (0-3).</param>
            <param name="column">The matrix column index (0-2).</param>
            <returns>The value at the specified index.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.#ctor">
            <summary>
            Creates a new indentity matrix.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.#ctor(Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Creates a new matrix which is a copy of the given matrix.
            </summary>
            <param name="m">The matrix to copy from.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.Transpose">
            <summary>
            Transposes a matrix. The resulting matrix is an inversion of the current matrix,
            if the current matrix was a valid rotation matrix.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.GetTranspose">
            <summary>
            Returns a new matrix which is a transpose of the current matrix.
            The transposed matrix is an inversion of the current matrix,
            if the current matrix was a valid rotation matrix.
            </summary>
            <returns>The new transposed matrix.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.op_Multiply(Tekla.Structures.Geometry3d.Matrix,Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Multiplies (combines) two transformation matrices.
            </summary>
            <param name="B">The transformation matrix which is applied second.</param>
            <param name="A">The transformation matrix which is applied first.</param>
            <returns>The new compound transformation matrix.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.Transform(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Transforms the given point using the current matrix.
            </summary>
            <param name="p">The point to be transformed.</param>
            <returns>The new transformed point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.op_Multiply(Tekla.Structures.Geometry3d.Matrix,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Transforms the given point using the given matrix.
            </summary>
            <param name="A">The transformation matrix.</param>
            <param name="p">The point to be transformed.</param>
            <returns>The new transformed point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Matrix.ToString">
            <summary>
            Returns a string that represents the current matrix.
            </summary>
            <returns>The string that represents the current matrix.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.MatrixFactory">
            <summary>
            The MatrixFactory class provides a convenient way to generate different
            kinds of transformation matrices.
            </summary>
            <example>
            The matrix factory can be used to create some useful transformation
            matrices between different coordinate systems:
            <code>
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam1 = new Beam();
                       Beam Beam2 = new Beam();
                       Point Point1 = new Point();
            
                       CoordinateSystem Csys1 = Beam1.GetCoordinateSystem();
                       CoordinateSystem Csys2 = Beam2.GetCoordinateSystem();
            
                       Matrix Matrix = MatrixFactory.ByCoordinateSystems(Csys1, Csys2);
                       Point Point2 = Matrix.Transform(Point1);
            
                       // The same result for Point2 when using two separate transformations
                       Matrix ToCurrentWP = MatrixFactory.FromCoordinateSystem(Csys1);
                       Point CurrentPoint = ToCurrentWP.Transform(Point1);
            
                       Matrix ToLocal = MatrixFactory.ToCoordinateSystem(Csys2);
                       Point2 = ToLocal.Transform(CurrentPoint);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.MatrixFactory.Rotate(System.Double,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns a rotation matrix in a Clockwise rotation around the given rotation axis,
            defined by the given angle and the given rotation axis.
            </summary>
            <param name="Angle">The rotation angle (in radians).</param>
            <param name="Axis">The rotation axis.</param>
            <returns>The new rotation matrix.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.MatrixFactory.ToCoordinateSystem(Tekla.Structures.Geometry3d.CoordinateSystem)">
             <summary>
             Returns a coordinate transformation matrix defined by the given coordinate system.
             With the returned matrix points can be transformed from the current work plane coordinate system
             to the given coordinate system.
             </summary>
             <param name="CoordSys">The coordinate system to transform points to.</param>
             <returns>The transformation matrix defined by the given coordinate system.</returns>
             <example>This example shows the extremes of the beam in its local coordinate system.
             <code>
             using System;
             using System.Globalization;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.UI;
             
             public class Example
             {
                    private readonly Model _Model = new Model();
                    private static GraphicsDrawer GraphicsDrawer = new GraphicsDrawer();
                    private readonly static Color TextColor = new Color(1, 0, 1);
            
                    //Shows the beam's extremes in its local coordinates
                    private static void ShowExtremesInBeamLocalCoordinates(Beam Beam)
                    {
                        //Get matrix to transform points to the beam's local coordinate system
                        Matrix TransformationMatrix = MatrixFactory.ToCoordinateSystem(Beam.GetCoordinateSystem());
            
                        //Transform the points from current work plane to the local coordinate system
                        Point LocalStartPoint = TransformationMatrix.Transform(Beam.StartPoint);
                        Point LocalEndPoint = TransformationMatrix.Transform(Beam.EndPoint);
            
                        //Display results
                        DrawCoordinateSytem(Beam.GetCoordinateSystem());
                        GraphicsDrawer.DrawText(Beam.StartPoint, FormatPointCoordinates(LocalStartPoint), TextColor);
                        GraphicsDrawer.DrawText(Beam.EndPoint, FormatPointCoordinates(LocalEndPoint), TextColor);
                    }
             
                    //Draws the coordinate system in which the values are shown
                    private static void DrawCoordinateSytem(CoordinateSystem CoordinateSystem)
                    {
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisX, "X");
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisY, "Y");
                    }
            
                    //Draws the vector of the coordinate system
                    private static void DrawVector(Point StartPoint, Vector Vector, string Text)
                    {
                        Color Color = new Color(0, 1, 1);
                        const double Radians = 0.43;
            
                        Vector = Vector.GetNormal();
                        Vector Arrow01 = new Vector(Vector);
            
                        Vector.Normalize(500);
                        Point EndPoint = new Point(StartPoint);
                        EndPoint.Translate(Vector.X, Vector.Y, Vector.Z);
                        GraphicsDrawer.DrawLineSegment(StartPoint, EndPoint, Color);
            
                        GraphicsDrawer.DrawText(EndPoint, Text, Color);
            
                        Arrow01.Normalize(-100);
                        Vector Arrow = ArrowVector(Arrow01, Radians);
            
                        Point ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
            
                        Arrow = ArrowVector(Arrow01, -Radians);
            
                        ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
                    }
            
                    //Draws the arrows of the vectors
                    private static Vector ArrowVector(Vector Vector, double Radians)
                    {
                        double X, Y, Z;
            
                        if(Vector.X == 0 &amp;&amp; Vector.Y == 0)
                        {
                            X = Vector.X;
                            Y = (Vector.Y * Math.Cos(Radians)) - (Vector.Z * Math.Sin(Radians));
                            Z = (Vector.Y * Math.Sin(Radians)) + (Vector.Z * Math.Cos(Radians));
                        }
                        else
                        {
                            X = (Vector.X * Math.Cos(Radians)) - (Vector.Y * Math.Sin(Radians));
                            Y = (Vector.X * Math.Sin(Radians)) + (Vector.Y * Math.Cos(Radians));
                            Z = Vector.Z;
                        }
            
                        return new Vector(X, Y, Z);
                    }
            
                    //Shows the point coordinates with only two decimals
                    private static string FormatPointCoordinates(Point Point)
                    {
                        string Output = String.Empty;
            
                        Output = "(" + Point.X.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Y.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Z.ToString("0.00", CultureInfo.InvariantCulture) + ")";
            
                        return Output;
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.MatrixFactory.FromCoordinateSystem(Tekla.Structures.Geometry3d.CoordinateSystem)">
             <summary>
             Returns a coordinate transformation matrix defined by the given coordinate system.
             With the returned matrix points can be transformed from the given coordinate system to
             the current work plane coordinate system.
             </summary>
             <param name="CoordSys">The coordinate system to transform points from.</param>
             <returns>The transformation matrix defined by the given coordinate system.</returns>
             <example>This example shows the extremes of the beam in the current work plane coordinate system.
             <code>
             using System;
             using System.Globalization;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.UI;
             
             public class Example
             {
                    private readonly Model _Model = new Model();
                    private static GraphicsDrawer GraphicsDrawer = new GraphicsDrawer();
                    private readonly static Color TextColor = new Color(1, 0, 1);
            
                    //Shows the beam's extremes in the current work plane coordinates
                    private void ShowExtremesInCurrentCoordinates(Beam Beam)
                    {
                        //Set the transformation plane to be in another location than global
                        //Comment these lines out if you have done that already
                        TransformationPlane CurrentTP = _Model.GetWorkPlaneHandler().GetCurrentTransformationPlane();
                        _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(Beam.GetCoordinateSystem()));
            
                        //Update the beam's extremes to the new transformation plane
                        Beam.Select();
                        Point LocalStartPoint = Beam.StartPoint;
                        Point LocalEndPoint = Beam.EndPoint;
            
                        _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(CurrentTP);
            
                        //Get the matrix to transform the coordinates from local to current
                        Matrix TransformationMatrix = MatrixFactory.FromCoordinateSystem(Beam.GetCoordinateSystem());
            
                        //Transform the points from local to the current work plane coordinate system
                        Point CurrentStartPoint = TransformationMatrix.Transform(LocalStartPoint);
                        Point CurrentEndPoint = TransformationMatrix.Transform(LocalEndPoint);
            
                        //Display results
                        DrawCoordinateSytem(new CoordinateSystem());
                        GraphicsDrawer.DrawText(CurrentStartPoint, FormatPointCoordinates(CurrentStartPoint), TextColor);
                        GraphicsDrawer.DrawText(CurrentEndPoint, FormatPointCoordinates(CurrentEndPoint), TextColor);
                    }
             
                    //Draws the coordinate system in which the values are shown
                    private static void DrawCoordinateSytem(CoordinateSystem CoordinateSystem)
                    {
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisX, "X");
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisY, "Y");
                    }
            
                    //Draws the vector of the coordinate system
                    private static void DrawVector(Point StartPoint, Vector Vector, string Text)
                    {
                        Color Color = new Color(0, 1, 1);
                        const double Radians = 0.43;
            
                        Vector = Vector.GetNormal();
                        Vector Arrow01 = new Vector(Vector);
            
                        Vector.Normalize(500);
                        Point EndPoint = new Point(StartPoint);
                        EndPoint.Translate(Vector.X, Vector.Y, Vector.Z);
                        GraphicsDrawer.DrawLineSegment(StartPoint, EndPoint, Color);
            
                        GraphicsDrawer.DrawText(EndPoint, Text, Color);
            
                        Arrow01.Normalize(-100);
                        Vector Arrow = ArrowVector(Arrow01, Radians);
            
                        Point ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
            
                        Arrow = ArrowVector(Arrow01, -Radians);
            
                        ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
                    }
            
                    //Draws the arrows of the vectors
                    private static Vector ArrowVector(Vector Vector, double Radians)
                    {
                        double X, Y, Z;
            
                        if(Vector.X == 0 &amp;&amp; Vector.Y == 0)
                        {
                            X = Vector.X;
                            Y = (Vector.Y * Math.Cos(Radians)) - (Vector.Z * Math.Sin(Radians));
                            Z = (Vector.Y * Math.Sin(Radians)) + (Vector.Z * Math.Cos(Radians));
                        }
                        else
                        {
                            X = (Vector.X * Math.Cos(Radians)) - (Vector.Y * Math.Sin(Radians));
                            Y = (Vector.X * Math.Sin(Radians)) + (Vector.Y * Math.Cos(Radians));
                            Z = Vector.Z;
                        }
            
                        return new Vector(X, Y, Z);
                    }
            
                    //Shows the point coordinates with only two decimals
                    private static string FormatPointCoordinates(Point Point)
                    {
                        string Output = String.Empty;
            
                        Output = "(" + Point.X.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Y.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Z.ToString("0.00", CultureInfo.InvariantCulture) + ")";
            
                        return Output;
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.MatrixFactory.ByCoordinateSystems(Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem)">
             <summary>
             Returns a coordinate transformation matrix defined by two coordinate systems.
             With the returned matrix points can be transformed from the first coordinate system to
             the second coordinate system. The ByCoordinateSystems method is meant for transforming
             points between coordinate systems asked in the same work plane.
             </summary>
             <param name="CoordSys1">The coordinate system to start from.</param>
             <param name="CoordSys2">The target coordinate system.</param>
             <returns>The transformation matrix defined by the two coordinate systems.</returns>
             <example>This example shows the beam's extremes in some other model object's coordinate system.
             <code>
             using System;
             using System.Globalization;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.UI;
             
             public class Example
             {
                    private readonly Model _Model = new Model();
                    private static GraphicsDrawer GraphicsDrawer = new GraphicsDrawer();
                    private readonly static Color TextColor = new Color(1, 0, 1);
            
                    //Shows the beam's extremes in the coordinates of the reference model object
                    private void ShowExtremesInOtherObjectCoordinates(ModelObject ReferenceObject, Beam Beam)
                    {
                        //Set the transformation plane to use the beam's coordinate system in order to get the beam's extremes in the local coordinate system
                        TransformationPlane CurrentTP = _Model.GetWorkPlaneHandler().GetCurrentTransformationPlane();
                        _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(Beam.GetCoordinateSystem()));
            
                        //Update the beam's extremes to the new transformation plane
                        Beam.Select();
                        Point LocalStartPoint = Beam.StartPoint;
                        Point LocalEndPoint = Beam.EndPoint;
            
                        //Get the beam's extremes in the reference object's coordinates
                        Matrix TransformationMatrix = MatrixFactory.ByCoordinateSystems(Beam.GetCoordinateSystem(), ReferenceObject.GetCoordinateSystem());
            
                        //Transform the extreme points to the new coordinate system
                        Point BeamStartPoint = TransformationMatrix.Transform(LocalStartPoint);
                        Point BeamEndPoint = TransformationMatrix.Transform(LocalEndPoint);
            
                        _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(CurrentTP);
            
                        //Transform the points where to show the texts to current work plane coordinate system
                        Matrix TransformationToCurrent = MatrixFactory.FromCoordinateSystem(ReferenceObject.GetCoordinateSystem());
                        Point BeamStartPointInCurrent = TransformationToCurrent.Transform(BeamStartPoint);
                        Point BeamEndPointInCurrent = TransformationToCurrent.Transform(BeamEndPoint);
            
                        //Display results
                        DrawCoordinateSytem(ReferenceObject.GetCoordinateSystem());
                        GraphicsDrawer.DrawText(BeamStartPointInCurrent, FormatPointCoordinates(BeamStartPoint), TextColor);
                        GraphicsDrawer.DrawText(BeamEndPointInCurrent, FormatPointCoordinates(BeamEndPoint), TextColor);
                    }
             
                    //Draws the coordinate system in which the values are shown
                    private static void DrawCoordinateSytem(CoordinateSystem CoordinateSystem)
                    {
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisX, "X");
                        DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisY, "Y");
                    }
            
                    //Draws the vector of the coordinate system
                    private static void DrawVector(Point StartPoint, Vector Vector, string Text)
                    {
                        Color Color = new Color(0, 1, 1);
                        const double Radians = 0.43;
            
                        Vector = Vector.GetNormal();
                        Vector Arrow01 = new Vector(Vector);
            
                        Vector.Normalize(500);
                        Point EndPoint = new Point(StartPoint);
                        EndPoint.Translate(Vector.X, Vector.Y, Vector.Z);
                        GraphicsDrawer.DrawLineSegment(StartPoint, EndPoint, Color);
            
                        GraphicsDrawer.DrawText(EndPoint, Text, Color);
            
                        Arrow01.Normalize(-100);
                        Vector Arrow = ArrowVector(Arrow01, Radians);
            
                        Point ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
            
                        Arrow = ArrowVector(Arrow01, -Radians);
            
                        ArrowExtreme = new Point(EndPoint);
                        ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
                        GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
                    }
            
                    //Draws the arrows of the vectors
                    private static Vector ArrowVector(Vector Vector, double Radians)
                    {
                        double X, Y, Z;
            
                        if(Vector.X == 0 &amp;&amp; Vector.Y == 0)
                        {
                            X = Vector.X;
                            Y = (Vector.Y * Math.Cos(Radians)) - (Vector.Z * Math.Sin(Radians));
                            Z = (Vector.Y * Math.Sin(Radians)) + (Vector.Z * Math.Cos(Radians));
                        }
                        else
                        {
                            X = (Vector.X * Math.Cos(Radians)) - (Vector.Y * Math.Sin(Radians));
                            Y = (Vector.X * Math.Sin(Radians)) + (Vector.Y * Math.Cos(Radians));
                            Z = Vector.Z;
                        }
            
                        return new Vector(X, Y, Z);
                    }
            
                    //Shows the point coordinates with only two decimals
                    private static string FormatPointCoordinates(Point Point)
                    {
                        string Output = String.Empty;
            
                        Output = "(" + Point.X.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Y.ToString("0.00", CultureInfo.InvariantCulture) + ", " +
                                 Point.Z.ToString("0.00", CultureInfo.InvariantCulture) + ")";
            
                        return Output;
                    }
             }
             </code>
             </example>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.OBB">
             <summary>
             The OBB class represents an oriented 3d bounding box.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             
             public class Example
             {
                public void Example1()
                {
                     OBB obb = null;
             
                     // In this simplified example, there are two existing beams in the model.
                     ModelObjectEnumerator beamsEnumerator =
                         TeklaModel.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BEAM);
            
                     if (beamsEnumerator != null)
                     {
                         while (beamsEnumerator.MoveNext())
                         {
                             Beam beam = beamsEnumerator.Current as Beam;
            
                             if (beam != null)
                             {
                                 if (obb == null)
                                 {
                                     obb = CreateOrientedBoundingBox(beam);
                                 }
                                 else
                                 {
                                     if (obb.Intersects(CreateOrientedBoundingBox(beam)))
                                     {
                                         // Boxes intersect.
                                     }
                                     else
                                     {
                                         // Boxes did not intersect.
                                     }
                                 }
                             }
                         }
                     }     
                 }
             
                 private Point CalculateCenterPoint(Point min, Point max)
                 {
                     double x = min.X + ((max.X - min.X) / 2);
                     double y = min.Y + ((max.Y - min.Y) / 2);
                     double z = min.Z + ((max.Z - min.Z) / 2);
            
                     return new Point(x, y, z);
                 }
            
                 private OBB CreateOrientedBoundingBox(Beam beam)
                 {
                     OBB obb = null;
            
                     if (beam != null)
                     {
                         WorkPlaneHandler workPlaneHandler = TeklaModel.GetWorkPlaneHandler();
                         TransformationPlane originalTransformationPlane = workPlaneHandler.GetCurrentTransformationPlane();
            
                         Solid solid = beam.GetSolid();
                         Point minPointInCurrentPlane = solid.MinimumPoint;
                         Point maxPointInCurrentPlane = solid.MaximumPoint;
            
                         Point centerPoint = CalculateCenterPoint(minPointInCurrentPlane, maxPointInCurrentPlane);
             
                         CoordinateSystem coordSys = beam.GetCoordinateSystem();
                         TransformationPlane localTransformationPlane = new TransformationPlane(coordSys);
                         workPlaneHandler.SetCurrentTransformationPlane(localTransformationPlane);
            
                         solid = beam.GetSolid();
                         Point minPoint = solid.MinimumPoint;
                         Point maxPoint = solid.MaximumPoint;
                         double extent0 = (maxPoint.X - minPoint.X) / 2;
                         double extent1 = (maxPoint.Y - minPoint.Y) / 2;
                         double extent2 = (maxPoint.Z - minPoint.Z) / 2;
            
                         workPlaneHandler.SetCurrentTransformationPlane(originalTransformationPlane);
            
                         obb = new OBB(centerPoint, coordSys.AxisX, coordSys.AxisY,
                                         coordSys.AxisX.Cross(coordSys.AxisY), extent0, extent1, extent2);
                     }
             
                     return obb;
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.OBB.InitializationExceptionMessage">
            <summary>
            Represents an exception message to be thrown when internal OBB initialization fails.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.OBB.RequiredArraySize">
            <summary>
            Represents a constant required array size for axis and extents.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.OBB.obbInternal">
            <summary>
            This field is used for storing the wrapped item.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.OBB" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.OBB" /> class.
            </summary>
            <param name="center">Center point of the OBB</param>
            <param name="axis0">Unit-length vector parallel to one axis of the OBB.</param>
            <param name="axis1">Unit-length vector parallel to the second axis of the OBB.</param>
            <param name="axis2">Unit-length vector parallel to the third axis of the OBB.</param>
            <param name="extent0">The extent (half-length) of the side parallel to axis one.</param>
            <param name="extent1">The extent (half-length) of the side parallel to axis two.</param>
            <param name="extent2">The extent (half-length) of the side parallel to axis three.</param>
            <exception cref="T:System.ArgumentException">Thrown when initialization fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.OBB" /> class.
            </summary>
            <param name="center">Center point of the OBB.</param>
            <param name="axis">Three element array of unit-length vectors parallel the axis of the OBB.</param>
            <param name="extent">Three element array of the OBB extents (half-lengths of the edges).</param>
            <exception cref="T:System.ArgumentException">Thrown when initialization fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.#ctor(Tekla.Structures.Geometry3d.OBB)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.OBB" /> class.
            </summary>
            <param name="obb">OBB to be copied.</param>
            <exception cref="T:System.ArgumentException">Thrown when initialization fails.</exception>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Center">
            <summary>
            Gets or sets the center point of the box.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the property.</exception>
            <exception cref="T:System.ArgumentException">Thrown when setting the value fails.</exception>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Axis0">
            <summary>
            Gets an axis parallel to one side of the OBB,
            a unit-length vector orthogonal to Axis1 and Axis2.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Axis1">
            <summary>
            Gets an axis parallel to the second side of the OBB,
            a unit-length vector orthogonal to Axis0 and Axis2.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Axis2">
            <summary>
            Gets an axis parallel to the third side of the OBB,
            a unit-length vector orthogonal to Axis0 and Axis1.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Extent0">
            <summary>
            Gets or sets the extent parallel to Axis0.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when setting the value fails.</exception>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Extent1">
            <summary>
            Gets or sets the extent parallel to Axis1.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when setting the value fails.</exception>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.OBB.Extent2">
            <summary>
            Gets or sets the extent parallel to Axis2.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when setting the value fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.SetAxis(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Sets the Axis to the OBB.
            </summary>
            <param name="axis0">Unit-length vector parallel to one axis of the OBB.</param>
            <param name="axis1">Unit-length vector parallel to the second axis of the OBB.</param>
            <param name="axis2">Unit-length vector parallel to the third axis of the OBB.</param>
            <exception cref="T:System.ArgumentException">Thrown when setting the axis fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.SetAxis(Tekla.Structures.Geometry3d.Vector[])">
            <summary>
            Sets the Axis to the OBB.
            </summary>
            <param name="axis">Three element array of unit-length vectors parallel the axis of the OBB.</param>
            <exception cref="T:System.ArgumentException">Thrown when setting the axis fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.SetExtent(System.Double,System.Double,System.Double)">
            <summary>
            Sets the extents to the OBB.
            </summary>
            <param name="extent0">The extent (half-length) of the side parallel to axis one.</param>
            <param name="extent1">The extent (half-length) of the side parallel to axis two.</param>
            <param name="extent2">The extent (half-length) of the side parallel to axis three.</param>
            <exception cref="T:System.ArgumentException">Thrown when setting the extent fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.SetExtent(System.Double[])">
            <summary>
            Sets the extents to the OBB.
            </summary>
            <param name="extent">Three element array of the OBB extents (half-lengths of the edges).</param>
            <exception cref="T:System.ArgumentException">Thrown when setting the extent fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ComputeVertices">
            <summary>
            Calculates the corner points of the OBB.
            </summary>
            <returns>Array of corner points.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Equals(System.Object)">
            <summary>
            Tests for the exact equality of two OBBs.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if the OBBs are equal, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Equals(Tekla.Structures.Geometry3d.OBB)">
            <summary>
            Tests for the exact equality of two OBBs.
            </summary>
            <param name="other">OBB to compare.</param>
            <returns>True if the OBBs are equal, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.GetHashCode">
            <summary>
            Gets the hash code for the obb.
            </summary>
            <returns>Hash code for the obb.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ClosestPointTo(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Calculates the closest point in OBB to given point.
            </summary>
            <param name="point">Point to calculate against.</param>
            <returns>Closest point in OBB to given point.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the point parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ClosestPointTo(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Calculates the closest point in OBB to given Line.
            </summary>
            <param name="line">Line to calculate against.</param>
            <returns>Closest point in OBB to given Line.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ClosestPointTo(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Calculates the closest point in OBB to given LineSegment.
            </summary>
            <param name="lineSegment">LineSegment to calculate against.</param>
            <returns>Closest point in OBB to given LineSegment.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.DistanceTo(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Calculates the distance from OBB to given point.
            </summary>
            <param name="point">Point to calculate against.</param>
            <returns>Distance from OBB to given point.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the point parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.DistanceTo(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Calculates the distance from OBB to given Line.
            </summary>
            <param name="line">Line to calculate against.</param>
            <returns>Distance from OBB to given Line.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.DistanceTo(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Calculates the distance from OBB to given LineSegment.
            </summary>
            <param name="lineSegment">LineSegment to calculate against.</param>
            <returns>Distance from OBB to given LineSegment.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.IntersectionPointsWith(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Calculates the intersection points between OBB and given Line. 
            </summary>
            <param name="line">Line to calculate against.</param>
            <returns>Array of intersection points.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.IntersectionPointsWith(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Calculates the intersection points between OBB and given LineSegment. 
            </summary>
            <param name="lineSegment">LineSegment to calculate against.</param>
            <returns>Array of intersection points.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.IntersectionWith(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Creates an intersection between the OBB and the given Line. 
            </summary>
            <param name="line">Line to calculate against</param>
            <returns>Intersection as LineSegment or null if no intersection was found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.IntersectionWith(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Creates an intersection between the OBB and the given LineSegment. 
            </summary>
            <param name="lineSegment">LineSegment to calculate against</param>
            <returns>Intersection as LineSegment or null if no intersection was found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Intersects(Tekla.Structures.Geometry3d.OBB)">
            <summary>
            Tests if current OBB intersects with the given OBB
            </summary>
            <param name="obb">OBB to test against</param>
            <returns>True if the OBBs intersect, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the obb parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Intersects(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Tests if current OBB intersects with the given Line
            </summary>
            <param name="line">Line to test against</param>
            <returns>True if the OBB intersects with the given Line, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Intersects(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Tests if current OBB intersects with the given LineSegment
            </summary>
            <param name="lineSegment">LineSegment to test against</param>
            <returns>True if the OBB intersects with the given LineSegment, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.Intersects(Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Tests if current OBB intersects with the given GeometricPlane
            </summary>
            <param name="geometricPlane">GeometricPlane to test against</param>
            <returns>True if the OBB intersects with the given GeometricPlane, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the geometricPlane parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ShortestSegmentTo(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Calculates the shortest LineSegment from OBB to the given Line.
            </summary>
            <param name="line">Line to calculate against</param>
            <returns>Shortest LineSegment from OBB to the given Line.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the line parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ShortestSegmentTo(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Calculates the shortest LineSegment from OBB to the given LineSegment.
            </summary>
            <param name="lineSegment">LineSegment to calculate against</param>
            <returns>Shortest LineSegment from OBB to the given LineSegment.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the lineSegment parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.ShortestSegmentTo(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Calculates the shortest LineSegment from OBB to the given point.
            </summary>
            <param name="point">Point to calculate against.</param>
            <returns>Shortest LineSegment from OBB to the given point.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when null is assigned to the point parameter.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.CollectionValid(System.Collections.ICollection,System.Int32)">
            <summary>
            Checks the validity of the given ICollection and performs null checks to items in the collection.
            </summary>
            <param name="collection">ICollection to be checked.</param>
            <param name="sizeDemand">Size demand for the Collection.</param>
            <returns>True if collection is valid, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.CollectionValid(System.Collections.ICollection,System.Int32,System.Boolean)">
            <summary>
            Checks the validity of given ICollection.
            </summary>
            <param name="collection">ICollection to be checked.</param>
            <param name="sizeDemand">Size demand for the Collection.</param>
            <param name="includeItemNullCheck">Specifies whether a null check should be done for collection items.</param>
            <returns>True if collection is valid, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.InitializeOBBInternal">
            <summary>
            Initializes the default internal obb.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.InitializeOBBInternal(Tekla.Common.Geometry.Vector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,Tekla.Common.Geometry.UnitVector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the internal obb.
            </summary>
            <param name="center">Center point of the OBB</param>
            <param name="axis0">Unit-length vector parallel to one axis of the OBB.</param>
            <param name="axis1">Unit-length vector parallel to the second axis of the OBB.</param>
            <param name="axis2">Unit-length vector parallel to the third axis of the OBB.</param>
            <param name="extent0">The extent (half-length) of the side parallel to axis one.</param>
            <param name="extent1">The extent (half-length) of the side parallel to axis two.</param>
            <param name="extent2">The extent (half-length) of the side parallel to axis three.</param>
            <exception cref="T:System.ArgumentException">Thrown when initialization fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.UpdateOBBInternal(Tekla.Common.Geometry.Vector3)">
            <summary>
            Updates the internal obb with center point.
            </summary>
            <param name="center">Center point of the OBB</param>
            <exception cref="T:System.ArgumentException">Thrown when update fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.UpdateOBBInternal(Tekla.Common.Geometry.UnitVector3[])">
            <summary>
            Updates the internal obb with axis.
            </summary>
            <param name="axis">Three element array of unit-length vectors parallel the axis of the OBB.</param>
            <exception cref="T:System.ArgumentException">Thrown when update fails.</exception>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.OBB.UpdateOBBInternal(System.Double[])">
            <summary>
            Updates the internal obb with extent.
            </summary>
            <param name="extent">Three element array of the OBB extents (half-lengths of the edges).</param>
            <exception cref="T:System.ArgumentException">Thrown when update fails.</exception>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Parallel">
            <summary>
            The Parallel class contains methods for testing the parallelism of geometric objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.VectorToVector(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns true if the given vectors are parallel.
            </summary>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <returns>True if the given vectors are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.VectorToVector(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Returns true if the given vectors are parallel within the given angular tolerance.
            </summary>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given vectors are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineToLine(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Returns true if the given lines are parallel.
            </summary>
            <param name="Line1">The first line to be used.</param>
            <param name="Line2">The second line to be used.</param>
            <returns>True if the given lines are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineToLine(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Line,System.Double)">
            <summary>
            Returns true if the given lines are parallel within the given angular tolerance.
            </summary>
            <param name="Line1">The first line to be used.</param>
            <param name="Line2">The second line to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given lines are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineSegmentToLineSegment(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns true if the given line segments are parallel.
            </summary>
            <param name="LineSegment1">The first line segment to be used.</param>
            <param name="LineSegment2">The second line segment to be used.</param>
            <returns>True if the given line segments are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineSegmentToLineSegment(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment,System.Double)">
            <summary>
            Returns true if the given line segments are parallel within the given angular tolerance.
            </summary>
            <param name="LineSegment1">The first line segment to be used.</param>
            <param name="LineSegment2">The second line segment to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given line segments are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.PlaneToPlane(Tekla.Structures.Geometry3d.GeometricPlane,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns true if the given planes are parallel.
            </summary>
            <param name="Plane1">The first plane to be used.</param>
            <param name="Plane2">The second plane to be used.</param>
            <returns>True if the given planes are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.PlaneToPlane(Tekla.Structures.Geometry3d.GeometricPlane,Tekla.Structures.Geometry3d.GeometricPlane,System.Double)">
            <summary>
            Returns true if the given planes are parallel within the given angular tolerance.
            </summary>
            <param name="Plane1">The first plane to be used.</param>
            <param name="Plane2">The second plane to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given planes are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.VectorToPlane(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns true if the given vector and plane are parallel.
            </summary>
            <param name="Vector">The vector to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>True if the given vector and plane are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.VectorToPlane(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.GeometricPlane,System.Double)">
            <summary>
            Returns true if the given vector and plane are parallel within the given angular tolerance.
            </summary>
            <param name="Vector">The vector to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given vector and plane are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineToPlane(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns true if the given line and plane are parallel.
            </summary>
            <param name="Line">The line to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>True if the given line and plane are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineToPlane(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.GeometricPlane,System.Double)">
            <summary>
            Returns true if the given line and plane are parallel within the given angular tolerance.
            </summary>
            <param name="Line">The line to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given line and plane are parallel within the given tolerance.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineSegmentToPlane(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns true if the given line segment and plane are parallel.
            </summary>
            <param name="LineSegment">The line segment to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>True if the given line segment and plane are parallel.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Parallel.LineSegmentToPlane(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.GeometricPlane,System.Double)">
            <summary>
            Returns true if the given line segment and plane are parallel within the given angular tolerance.
            </summary>
            <param name="LineSegment">The line segment to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <param name="Tolerance">The angular tolerance (in radians) to be used.</param>
            <returns>True if the given line segment and plane are parallel within the given tolerance.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Point">
            <summary>
            The Point class represents a single position in 3D space.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Point.X">
            <summary>
            The X-coordinate of the point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Point.Y">
            <summary>
            The Y-coordinate of the point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Point.Z">
            <summary>
            The Z-coordinate of the point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Point.EPSILON_SQUARED">
            <summary>
            A boundary value for comparing if two points are similar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.Point.HASH_SEED">
            <summary>
            A default seed value for creating hash codes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.#ctor">
            <summary>
            Instantiates a point with zero members.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a point with the given coordinates.
            </summary>
            <param name="X">The X-coordinate to be used.</param>
            <param name="Y">The Y-coordinate to be used.</param>
            <param name="Z">The Z-coordinate to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.#ctor(System.Double,System.Double)">
            <summary>
            Instantiates a point with the given coordinates and zero Z-coordinate.
            </summary>
            <param name="X">The X-coordinate to be used.</param>
            <param name="Y">The Y-coordinate to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.#ctor(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Instantiates a point with the given other point.
            </summary>
            <param name="Point">The other point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.Zero">
            <summary>
            Zeros all the members of the point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.ToString">
            <summary>
            Formats the point into a string.
            </summary>
            <returns>The string that represents the point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translates the point using the given vector.
            </summary>
            <param name="X">The X-translation to be used.</param>
            <param name="Y">The Y-translation to be used.</param>
            <param name="Z">The Z-translation to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.op_Addition(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns the sum of the given two points.
            </summary>
            <param name="p1">The first point to be used.</param>
            <param name="p2">The second point to be used.</param>
            <returns>The sum of the given two points.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.op_Subtraction(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns the difference of the given two points.
            </summary>
            <param name="p1">The first point to be used.</param>
            <param name="p2">The second point to be used.</param>
            <returns>The difference of the given two points.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.op_Equality(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Compares the given two points for similarity.
            </summary>
            <param name="p1">The first point to be used.</param>
            <param name="p2">The second point to be used.</param>
            <returns>True if the given two points are similar. False otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.op_Inequality(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Compares if the two given points are not similar.
            </summary>
            <param name="p1">The first point to be used.</param>
            <param name="p2">The second point to be used.</param>
            <returns>True if the given two points are not similar. False otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.Equals(System.Object)">
            <summary>
            Returns true if the current object and the given object are equal.
            </summary>
            <param name="obj">The object we wish to check the equality with.</param>
            <returns>True if the given object equals the current object.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.GetHashCode">
            <summary>
            Returns a hash code for the point.
            Notice, in extremely rare cases, you might not get the same
            hash code for two points even though they are considered equal! This 
            should, however, happen only in extremely rare cases!
            </summary>
            <returns>The hash code for the point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.AreEqual(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Compares two points and tells whether they are equal.
            </summary>
            <param name="Point1">The first point to be compared.</param>
            <param name="Point2">The second point to be compared.</param>
            <returns>True if the points are equal, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Point.CompareTo(System.Object)">
            <summary>
            Compares two points. To use binarysearch somekind of sorting should be used.
            </summary>
            <param name="obj">The point to be compared.</param>
            <returns>0 if both are equal, -1 if this point is before, 1 if this point is after.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Polycurve">
             <summary>
             Represents 3D polycurve geometry, which itself is composed of one or more connected curves. The class offers
             facilities for iteration through the polycurve, and implements the <see cref="T:Tekla.Structures.Geometry3d.ICurve"/> interface.
            
             Once this class is constructed, it represents an immutable polycurve. The curves that can be obtained during
             iteration are mere copies of the curves in the polycurve, and mutating them won't affect the polycurve. Please
             use the <see cref="T:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder"/> class to build and manipulate this objects of this class.
            
             Since it implements <see cref="T:System.Collections.IEnumerable"/>, the curves can be iterated using foreach loops, and it supports
             all of the LINQ operations, and it is possible to build arbitrarily complex queries over the curves of this
             class.
             </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Polycurve.StartPoint">
            <summary>
            Gets the start point of the polycurve
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Polycurve.EndPoint">
            <summary>
            Gets the end point of the polycurve
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.Polycurve.Length">
            <summary>
            Gets the total length of the polycurve
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.Clone">
            <summary>
            Creates a deep copy of the polycurve
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.Equals(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Determines whether the polycurve equals another polycurve
            This function only checks for equality among polycurves
            </summary>
            <param name="other">The other polycurve</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.#ctor(System.Collections.Generic.IEnumerable{Tekla.Structures.Geometry3d.ICurve})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.Polycurve"/> class from a list of geometries.
            This offers high degree of control over the creation.
            </summary>
            <param name="geometryList">List of geometries to be applied</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.Polycurve"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.#ctor(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.Polycurve"/> class from a curve geometry.
            </summary>
            <param name="geometry">Initial geometry for the polycurve</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.#ctor(Tekla.Structures.Geometry3d.PolyLine)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Geometry3d.Polycurve"/> class from a <see cref="T:Tekla.Structures.Geometry3d.PolyLine"/>.
            The lines are converted to line segments.
            </summary>
            <param name="polyLine">Initial geometry for the geometry list</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.GetEnumerator">
            <summary>
            This method implements the IEnumerable interface
            </summary>
            <returns>Enumerator of the geometry list</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Polycurve.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements the IEnumerable interface
            </summary>
            <returns>Enumerator of the geometry list</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder">
             <summary>
             The polycurve geometry builder class is in charge of building the geometry list of a polycurve. All the
             geometries that the builder connects must be connected on the correct end points. The builder has a fluent
             interface, and can be used as follows:
             <code>
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                 static void Main(string[] args)
                 {
                     var segment = new LineSegment(new Point(0, 0, 0), new Point(1000, 0, 0));
                     var arc = new Arc(new Point(1000, 0, 0), new Point(2000, 1000, 0), new Point(1707.1, 292.89, 0));
            
                     var geometryList = new PolycurveGeometrySolver().Append(arc).Append(segment).GetPolycurve();
            
                     var polycurve = new ControlPolycurve();
                     polycurve.Geometry = geometryList;
                     polycurve.Insert();
                 }
             }
             </code>
             </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.finalGeometry">
            <summary>
            Contains the built geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.NonConnectedMessage">
            <summary>
            Message to be sent when an exception of non connected geometry is thrown
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.#ctor">
            <summary>
            Creates an empty geometry builder. This builder contains no geometries
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.#ctor(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Constructs a geometry builder from an existing geometry list
            </summary>
            <param name="geometries">Initial geometry list</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.GetPolycurve">
            <summary>
            Gets the final geometry after all the modifications made by the builder
            </summary>
            <returns>The final geometry list</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Append(Tekla.Structures.Geometry3d.Arc)">
            <summary>
            Appends an arc to the geometry list
            </summary>
            <param name="arc">Geometry to append</param>
            <exception cref="T:System.ArgumentException">Thrown if input geometry is not connected to the polycurve</exception>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Append(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Appends a line segment to the geometry list
            </summary>
            <param name="segment">Geometry to append</param>
            <exception cref="T:System.ArgumentException">Thrown if input geometry is not connected to the polycurve</exception>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Append(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Appends another polycurve to the geometry list
            </summary>
            <param name="otherPolycurve">Polycurve to add to the list</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.AppendArc(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Appends an arc using three points. The first point is taken as the last point of the last element of the
            polycurve.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="middlePoint">Arc middle point</param>
            <param name="endPoint">Arc end point</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.AppendSegment(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Appends an line segment. The first point is taken as the last point of the last element of the polycurve.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="endPoint">Segment end point</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.AppendTangentArc(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Appends an arc tangent to the last curve of the curve list.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="endPoint">End point of the arc</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.AppendTangentSegment(System.Double)">
            <summary>
            Appends a line segment of the given length tangent to the last curve of the list.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="length">Length of the segment to append</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Prepend(Tekla.Structures.Geometry3d.Arc)">
            <summary>
            Prepends an arc to the geometry list
            </summary>
            <param name="arc">Geometry to prepend</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Prepend(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Prepends a line segment to the geometry list
            </summary>
            <param name="segment">Geometry to prepend</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.PrependArc(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Prepends an arc using three points. The last point is taken as the start point of the first element of the
            polycurve.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="startPoint">Arc start point</param>
            <param name="middlePoint">Arc middle point</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.PrependSegment(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Prepends an line segment. The last point is taken as the start point of the first element of the polycurve.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="startPoint">Segment start point</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.PrependTangentArc(Tekla.Structures.Geometry3d.Point)">
             <summary>
             Prepends an arc tangent to the first curve of the curve list.
             </summary>
            <remarks>
             This function requires that there is at least one curve in the polycurve
             </remarks>
             <param name="startPoint">Start point of the arc</param>
             <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.PrependTangentSegment(System.Double)">
            <summary>
            Prepends a line segment of the given length tangent to the first curve of the list.
            </summary>
            <remarks>
            This function requires that there is at least one curve in the polycurve
            </remarks>
            <param name="length">Length of the segment to append</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Replace(System.Int32,Tekla.Structures.Geometry3d.Arc)">
            <summary>
            Replaces the geometry at a given index
            </summary>
            <param name="index">Index of the geometry to replace</param>
            <param name="arc">Geometry to insert in place of the existing one</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Replace(System.Int32,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Replaces the geometry at a given index
            </summary>
            <param name="index">Index of the geometry to replace</param>
            <param name="segment">Geometry to insert in place of the existing one</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.GetEndTangentDirection(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Calculates the direction of the tangent to the end point of the given curve
            </summary>
            <param name="curve">Input curve</param>
            <returns>Tangent direction pointing towards outside the polycurve</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.GetStartTangentDirection(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Calculates the direction of the tangent to the start point of the given curve
            </summary>
            <param name="curve">Input curve</param>
            <returns>Tangent direction pointing towards outside the polycurve</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Append(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Appends a curve to the list
            </summary>
            <param name="curve">Curve to append</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Prepend(Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Prepends a curve to the list
            </summary>
            <param name="curve">Curve to prepend</param>
            <returns>The builder itself</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.IsCurveConnectedToNeighbors(System.Int32,Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Determines whether a curve is connected to the neighbors of the given index
            </summary>
            <param name="index">Index of the reference curve whose neighbors are to be checked</param>
            <param name="curve">Curve to check connectedness</param>
            <returns>True if the curve is connected to the neighbors of the index, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolycurveGeometryBuilder.Replace(System.Int32,Tekla.Structures.Geometry3d.ICurve)">
            <summary>
            Replaces the geometry at a given index
            </summary>
            <param name="index">Index of the geometry to replace</param>
            <param name="curveToInsert">Geometry to insert in place of the existing one</param>
            <returns>The builder itself</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.PolyLine">
            <summary>
            The PolyLine class represents a line that consists of one or more line segments.
            To create a polyline, you have to give a list of the points that will form the polyline.
            The first point in the list will be connected with the second point in the list,
            the second point in the list will be connected with the third point in the list, etc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Geometry3d.PolyLine.Points">
            <summary>
            The points the polyline consists of.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.#ctor(System.Collections.IEnumerable)">
            <summary>
            Instantiates a polyline with the given Points.
            </summary>
            <param name="Points">A list of the points that will form the polyline.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal.
            </summary>
            <param name="O">The object that equality is wished to be checked with.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.Length">
            <summary>
            Returns the length of a polyline.
            </summary>
            <returns>The length of the polyline.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.GetHashCode">
            <summary>
            Returns a hash code for a polyline.
            Notice, in extremely rare cases, you might not get the same
            hash code for two polylines even though they are considered equal! This
            should, however, happen only in extremely rare cases!
            </summary>
            <returns>The hash code for the polyline.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.op_Equality(Tekla.Structures.Geometry3d.PolyLine,Tekla.Structures.Geometry3d.PolyLine)">
            <summary>
            Checks the equality of two polylines.
            </summary>
            <param name="PolyLine1">The first polyline to be used.</param>
            <param name="PolyLine2">The second polyline to be used.</param>
            <returns>True if the two polylines are equal.
            False otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.PolyLine.op_Inequality(Tekla.Structures.Geometry3d.PolyLine,Tekla.Structures.Geometry3d.PolyLine)">
            <summary>
            Checks the inequality of two polylines.
            </summary>
            <param name="PolyLine1">The first polyline to be used.</param>
            <param name="PolyLine2">The second polyline to be used.</param>
            <returns>True if the two polylines are not equal.
            False otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Projection">
            <summary>
            The Projection class contains methods for calculating the projection of geometric objects on
            other geometric objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Projection.PointToLine(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Returns a new point which is a projection of the given point onto the given line.
            </summary>
            <param name="Point">The point to be used.</param>
            <param name="Line">The line to be used.</param>
            <returns>The new projection point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Projection.PointToPlane(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new point which is a projection of the given point onto the given plane.
            </summary>
            <param name="Point">The point to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>The new projection point.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Projection.LineToPlane(Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new line which is a projection of the given line onto the given plane.
            </summary>
            <param name="Line">The line to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>The new projection line.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Projection.LineSegmentToPlane(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.GeometricPlane)">
            <summary>
            Returns a new line segment which is a projection of the given line segment onto the given plane.
            </summary>
            <param name="LineSegment">The line segment to be used.</param>
            <param name="Plane">The plane to be used.</param>
            <returns>The new projection line segment.</returns>
        </member>
        <member name="T:Tekla.Structures.Geometry3d.Vector">
            <summary>
            The Vector class defines a direction and magnitude from the current origin.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.#ctor">
            <summary>
            Instantiates a zero length vector.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Instantiates a vector with the given coordinates.
            </summary>
            <param name="X">The X-coordinate to be used.</param>
            <param name="Y">The Y-coordinate to be used.</param>
            <param name="Z">The Z-coordinate to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.#ctor(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Instatiates a new vector with the given point.
            </summary>
            <param name="Point">The point to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Normalize">
            <summary>
            Normalizes the vector using the length 1.0 (the length of a unit vector).
            </summary>
            <returns>The normalized vector's length.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Normalize(System.Double)">
            <summary>
            Normalizes the vector using the given length.
            </summary>
            <param name="NewLength">The length to be used.</param>
            <returns>The normalized vector's length.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.GetLength">
            <summary>
            Gets the length (magnitude) of a vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.GetAngleBetween(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Gets the angle (in radians) between the current vector and the given vector.
            </summary>
            <param name="Vector">The vector to be used.</param>
            <returns>The angle between the vectors in radians.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.GetNormal">
            <summary>
            Returns a new normalized equivalent of the current vector.
            </summary>
            <returns>The normalized equivalent of the current vector.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Dot(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns a dot product of the current vector and the given vector.
            </summary>
            <param name="Vector">The vector to be used.</param>
            <returns>The dot product of the vectors.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Dot(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns a dot product of the given two vectors.
            </summary>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <returns>The dot product of the vectors.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Cross(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns a new cross product vector of the current vector and the given vector.
            </summary>
            <param name="Vector">The vector to be used.</param>
            <returns>The new cross product vector.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.Cross(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Returns a new cross product vector of the given two vectors.
            </summary>
            <param name="Vector1">The first vector to be used.</param>
            <param name="Vector2">The second vector to be used.</param>
            <returns>The new cross product vector.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.op_Multiply(Tekla.Structures.Geometry3d.Vector,System.Double)">
            <summary>
            Calculates the multiplication of the given vector with the given scalar.
            </summary>
            <param name="Vector">The vector to be multiplied.</param>
            <param name="Multiplier">The scalar to multiply the vector with.</param>
            <returns>The new vector that is the multiplication of the vector and the scalar.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.op_Multiply(System.Double,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Calculates the multiplication of the given vector with the given scalar.
            </summary>
            <param name="Multiplier">The scalar to multiply the vector with.</param>
            <param name="Vector">The vector to be multiplied.</param>
            <returns>The new vector that is the multiplication of the vector and the scalar.</returns>
        </member>
        <member name="M:Tekla.Structures.Geometry3d.Vector.ToString">
            <summary>
            Formats the 3D vector into a string with fixed decimals, in the following way: "(X, Y, Z)".
            </summary>
            <returns>The string that represents the vector.</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.ArcTools">
            <summary>
            Contains method to obtain parameters of an arc.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcCenterPointUsing3Points(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets arc center point using 3 points.
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point on arc.</param>
            <returns>Center point.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcCenterPointFromTangent(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector@)">
            <summary>
            Gets arc center point from the start point, end point, and a point along the tangent line to the start point
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnTangent">Point along the tangent line to the start point of the arc</param>
            <param name="arcNormal">Output parameter that will contain the arc normal</param>
            <returns>Center point.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcMiddlePoint(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Gets the arc middle point using the start and end points, given the center and the normal of the arc
            </summary>
            <param name="startPoint">Start point of the arc</param>
            <param name="endPoint">End point of the arc</param>
            <param name="centerPoint">Center of the arc</param>
            <param name="normal">Normal of the arc. Defines the direction.</param>
            <returns>Middle point of the arc</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcNormal(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Computes the arc normal using three points
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point on the arc.</param>
            <returns>Arc normal that allows to compute the arc angle correctly</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcAngleBy3Points(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector@)">
            <summary>
            Gets arc angle in range of 0 to 2PI rad using arc points. Returns the normal that gives that angle when calculating
            the angle between start and end.
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point on the arc.</param>
            <param name="arcNormal">Output arc normal</param>
            <returns>Arc angle.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcAngleBy3Points(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets arc angle in range of 0 to 2PI rad using arc points.
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point on the arc.</param>
            <returns>Arc angle.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetBulgeToWidthRatio(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Calculates the bulge/width ratio of an arc (width is the distance between start and end points)
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point on the arc.</param>
            <returns>Bulge-To-Width ratio</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.GetArcMiddlePoint(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Gets an middle point on an arc with the given bulge-to-width-ratio
            </summary>
            <param name="startPoint">Start point of the arc</param>
            <param name="endPoint">End point of the arc</param>
            <param name="bulgeToWidth">Bulge to width ratio</param>
            <param name="normal">Normal of the arc</param>
            <returns>Arc middle point with the given parameters</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.ArcTools.AreArcPointsCollinear(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Determines whether three points are collinear
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <param name="point3">Third point</param>
            <returns>True if the points are collinear, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.dotCoordinateSystem_t">
            <summary>
            The serialization structure for CoordinateSystem.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotCoordinateSystem_t.Origin">
            <summary>
            The origin of the coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotCoordinateSystem_t.AxisX">
            <summary>
            The X-Axis of the coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotCoordinateSystem_t.AxisY">
            <summary>
            The Y-Axis of the coordinate system.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotCoordinateSystem_t.ToStruct(Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            CoordinateSystem to dotCoordinateSystem_t.
            </summary>
            <param name="P"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotCoordinateSystem_t.FromStruct(Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="P"></param>
        </member>
        <member name="T:Tekla.Structures.Internal.dotMatrix_t">
            <summary>
            Serialization structure for TransformationPlane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotMatrix_t.aMatrix">
            <summary>
            Matrix4x3 as an array.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotMatrix_t.#ctor(System.Int32)">
            <summary>
            Creates a new dotMatrix_t instance.
            </summary>
            <param name="Size">4x3 elements.</param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotMatrix_t.ToStruct(Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Matrix4x3 to struct.
            </summary>
            <param name="Matrix">Matrix4x3.</param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotMatrix_t.FromStruct(Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Matrix4x3 from struct.
            </summary>
            <param name="Matrix">Matrix4x3.</param>
        </member>
        <member name="T:Tekla.Structures.Internal.dotPoint_t">
            <summary>
            Struct for the Point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotPoint_t.X">
            <summary>
            The points coordinates.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotPoint_t.Y">
            <summary>
            The points coordinates.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotPoint_t.Z">
            <summary>
            The points coordinates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.#ctor(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Construct point from point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.ToStruct(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Point to dotPoint_t.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.FromStruct(Tekla.Structures.Geometry3d.Point)">
            <summary>
            dotPoint to Point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.ToString">
            <summary>
            Returns the string presentation.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.Equals(Tekla.Structures.Internal.dotPoint_t)">
            <summary>
            Check equality.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.Equals(System.Object)">
            <summary>
            Check equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotPoint_t.GetHashCode">
            <summary>
            Get the hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Internal.dotVector_t">
            <summary>
            Struct for Vector.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotVector_t.Direction">
            <summary>
            Vector data.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.#ctor(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Construct point from point.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.ToStruct(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Vector to dotVector_t.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.FromStruct(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Vector from dotVector_t.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.ToString">
            <summary>
            Returns the string presentation.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.Equals(Tekla.Structures.Internal.dotVector_t)">
            <summary>
            Check equality.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.Equals(System.Object)">
            <summary>
            Check equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotVector_t.GetHashCode">
            <summary>
            Get the hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Internal.dotIdentifier_t">
            <summary>
            Identifier class serialization.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifier_t.ID">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifier_t.ID2">
            <summary>
            Sub ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifier_t.aGUID">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Constructs a serialization struct from a public API class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.CreateTeklaStructuresGuid(Tekla.Structures.Identifier)">
            <summary>
            Creates a guid in Tekla Structures Format.
            </summary>
            <param name="identifier">The identifier to create from.</param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.ToStruct(Tekla.Structures.Identifier)">
            <summary>
            From Identifier to dotIdentifier_t.
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.FromStruct">
            <summary>
            From dotIdentifier_t to Identifier.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.GetGuidFromMaybeTsGuid(System.String)">
            <summary>
            Construct a Guid object from a guid string (36 chars).
            </summary>
            <param name="maybeTsGuid">Tekla Structures guid or normal guid.</param>
            <returns>The constructed guid</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifier_t.FromStruct(Tekla.Structures.Identifier)">
            <summary>
            From dotIdentifier_t to Identifier.
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="T:Tekla.Structures.Internal.dotIdentifierToGUID_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifierToGUID_t.legacyGuidPrefix">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifierToGUID_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotIdentifierToGUID_t.GUID">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifierToGUID_t.GetIdentifierByGuid(System.String)">
            <summary>
            Returns an identifier instance that has the given GUID in the model.
            </summary>
            <param name="guid">The GUID to look for in the model.</param>
            <returns>The identifier of the GUID, with empty values if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.dotIdentifierToGUID_t.GetGuidByIdentifier(Tekla.Structures.Identifier)">
            <summary>
            Returns the GUID of the given identifier instance.
            </summary>
            <returns>The GUID of the identifier.</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.dotModuleManagerQuery_t">
            <summary> Serialization structure for ModuleManager querys. </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotModuleManagerQuery_t.aModule">
            <summary> Module string </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotModuleManagerQuery_t.IsPresent">
            <summary> Reply </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotModuleManagerQuery_t.Configuration">
            <summary> Configuration currently running. </summary>
        </member>
        <member name="T:Tekla.Structures.Internal.DotAnalysisModuleManagerQuery">
            <summary> Serialization structure for AnalysisModuleManager querys. </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.DotAnalysisModuleManagerQuery.Module">
            <summary> Module string. </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.DotAnalysisModuleManagerQuery.IsPresent">
            <summary> Reply. </summary>
        </member>
        <member name="T:Tekla.Structures.Internal.Channels">
            <summary>
            The Channels class creates .NET communication channels (currently IPC).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.Channels.RegisterChannel(System.String)">
            <summary>
            Registers a .NET remoting channel (currently IPC) with the given name.
            </summary>
            <param name="ChannelName">The name of the channel.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.FormWrapperFunctionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke0``1(Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod0{``0})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke1r``2(``0@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1r{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke1v``2(``0,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1v{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke2rr``3(``0@,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke2rv``3(``0@,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke2vr``3(``0,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3vvr``4(``0,``1,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3vrr``4(``0,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vrr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke2vv``3(``0,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3rrv``4(``0@,``1@,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrv{``0,``1,``2,``3})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4rrvv``5(``0@,``1@,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrvv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3vvv``4(``0,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvv{``0,``1,``2,``3})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3rrr``4(``0@,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrr{``0,``1,``2,``3})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke3rvv``4(``0@,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rvv{``0,``1,``2,``3})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4rrrr``5(``0@,``1@,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrr{``0,``1,``2,``3,``4})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4rrrv``5(``0@,``1@,``2@,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrv{``0,``1,``2,``3,``4})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4vvvr``5(``0,``1,``2,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvr{``0,``1,``2,``3,``4})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4vvrr``5(``0,``1,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvrr{``0,``1,``2,``3,``4})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke4vvvv``5(``0,``1,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvv{``0,``1,``2,``3,``4})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5vvrrr``6(``0,``1,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrr{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5rrrrr``6(``0@,``1@,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrrrr{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5rvvvv``6(``0@,``1,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rvvvv{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5rrvvv``6(``0@,``1@,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrvvv{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5vvvrr``6(``0,``1,``2,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvvrr{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke5vvrrv``6(``0,``1,``2@,``3@,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrv{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke9rrrrrrrrr``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod9rrrrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vrrrrr``7(``0,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vvrrrr``7(``0,``1,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vvvrrr``7(``0,``1,``2,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6rrrrrv``7(``0@,``1@,``2@,``3@,``4@,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrv{``0,``1,``2,``3,``4,``5,``6})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="T5"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="p5"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vvrrvv``7(``0,``1,``2@,``3@,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6rrrrrr``7(``0@,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vvvvvv``7(``0,``1,``2,``3,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke6vvvvvr``7(``0,``1,``2,``3,``4,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke8vvvvvvvv``9(``0,``1,``2,``3,``4,``5,``6,``7,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod8vvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke16vvvvvvvvvvvvvvvv``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod16vvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke17vvvvvvvvvvvvvvvvv``18(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod17vvvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke7vvrrrrr``8(``0,``1,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke7vvvvvvr``8(``0,``1,``2,``3,``4,``5,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvvvvvr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.Invoke7rrrrrrr``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7rrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.Internal.FormWrapperFunctionality.RequiresMessagePolling">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.FormWrapperFunctionality.WaitAsyncOperation(System.IAsyncResult)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.RemotingProxyHelper">
             <summary>
             Helper class for remoting proxies that serve activated client type objects as singleton instances.
             </summary>
             <example>This is an example implementation of the remoting proxy for RemoteType type.
             <code>
             using System;
             using Tekla.Structures.Internal;
            
             namespace Tekla.Structures.MyProject
             {
                 public interface IRemoteType
                 {
                     // Implementation omitted
                 }
            
                 public sealed class RemoteType : MarshalByRefObject, IRemoteType
                 {
                     // Implementation omitted
                 }
            
                 public sealed class RemoteTypeProxy
                 {
                     private static IRemoteType _Instance;
            
                     static RemoteTypeProxy()
                     {
                         string appUrl = "ipc://ApplicationName";
                         RemoteTypeProxy._Instance = RemotingProxyHelper.CreateInstance&lt;RemoteType&gt;(appUrl);
                     }
            
                     public static IRemoteType Instance
                     {
                         get
                         {
                             RemotingProxyHelper.TestInstance(RemoteTypeProxy._Instance);
                             return RemoteTypeProxy._Instance;
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyHelper.IsFormWrapperRequired">
            <summary>
            Checks if the FormWrapperFunctionality needs to be used with the current process and thread.
            </summary>
            <returns>true if FormWrapperFunctionality is required; otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyHelper.SetRemotingProxyFactory(Tekla.Structures.Internal.RemotingProxyFactory)">
            <summary>
            Call SetRemotingProxyFactory once.
            </summary>
            <param name="factory">Factory</param>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyHelper.CreateInstance``1(System.String)">
             <summary>
             Creates an instance of the remote object. If necessary the object type is
             registered as activated client type before it is created. The created instance
             is also sponsored if necessary.
            
             This method should be called only once per type. Subsequent calls may throw an exception.
             </summary>
             <param name="appUrl">
             URL of the application where this type is activated.
             </param>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyHelper.TestInstance(System.Object)">
            <summary>
            Checks that the type of the given instance has not been registered as
            activated client type after the instance was instantiated.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyHelper.InitializeChannels">
            <summary>
            Instantiates and registers client and server channels for remoting.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Internal.RemotingProxyFactory">
            <summary>
            Factory used to instantiate remote proxies correctly in default application domain.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.RemotingProxyFactory.CreateRemotingProxy(System.String,System.String)">
            <summary>
            Instantiates given remoting proxy type from given assembly.
            </summary>
            <param name="assemblyName">Assembly from which proxy should be loaded</param>
            <param name="typeName">Proxy type name</param>
            <returns>Proxy object</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.SynchronizeInvokeFunctionality">
            <summary>
            SynchronizeInvokeFunctionality is a part of the remoting implementation for plugins and applications to connect to Tekla Structures
            </summary>
            <seealso cref="T:Tekla.Structures.Internal.WrapperFunctionalityBase" />
        </member>
        <member name="F:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.instance">
            <summary>
            The _ instance
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.#ctor(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Internal.SynchronizeInvokeFunctionality" /> class.
            </summary>
            <param name="Instance">The instance in.</param>
            <exception cref="T:System.ArgumentNullException">Instance is null</exception>
        </member>
        <member name="P:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.InvokeRequired">
            <summary>
            Gets a value indicating whether [invoke required].
            </summary>
            <value>
              <c>true</c> if [invoke required]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke0``1(Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod0{``0})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke1r``2(``0@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1r{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke1v``2(``0,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1v{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke2rr``3(``0@,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke2rv``3(``0@,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke2vr``3(``0,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3vvr``4(``0,``1,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3vrr``4(``0,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vrr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke2vv``3(``0,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3rrv``4(``0@,``1@,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4rrvv``5(``0@,``1@,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrvv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3rrr``4(``0@,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3rvv``4(``0@,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rvv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke3vvv``4(``0,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4vvrr``5(``0,``1,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvrr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4vvvv``5(``0,``1,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4rrrv``5(``0@,``1@,``2@,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4rrrr``5(``0@,``1@,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke4vvvr``5(``0,``1,``2,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5rrrrr``6(``0@,``1@,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrrrr{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5rvvvv``6(``0@,``1,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rvvvv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5rrvvv``6(``0@,``1@,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrvvv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5vvrrv``6(``0,``1,``2@,``3@,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5vvvrr``6(``0,``1,``2,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvvrr{``0,``1,``2,``3,``4,``5})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="P0"></param>
             <param name="P1"></param>
             <param name="P2"></param>
             <param name="P3"></param>
             <param name="P4"></param>
             <param name="Method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke9rrrrrrrrr``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod9rrrrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke5vvrrr``6(``0,``1,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrr{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vvvrrr``7(``0,``1,``2,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vvrrrr``7(``0,``1,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vrrrrr``7(``0,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6rrrrrv``7(``0@,``1@,``2@,``3@,``4@,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrv{``0,``1,``2,``3,``4,``5,``6})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="T5"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="p5"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vvrrvv``7(``0,``1,``2@,``3@,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6rrrrrr``7(``0@,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vvvvvv``7(``0,``1,``2,``3,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke6vvvvvr``7(``0,``1,``2,``3,``4,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke8vvvvvvvv``9(``0,``1,``2,``3,``4,``5,``6,``7,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod8vvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke16vvvvvvvvvvvvvvvv``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod16vvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke17vvvvvvvvvvvvvvvvv``18(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod17vvvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke7vvrrrrr``8(``0,``1,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke7vvvvvvr``8(``0,``1,``2,``3,``4,``5,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvvvvvr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke7rrrrrrr``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7rrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Begins the invoke.
            </summary>
            <param name="Method">The method.</param>
            <param name="Args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.EndInvoke(System.IAsyncResult)">
            <summary>
            Ends the invoke.
            </summary>
            <param name="Result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.SynchronizeInvokeFunctionality.Invoke(System.Delegate,System.Object[])">
            <summary>
            Invokes the specified method.
            </summary>
            <param name="Method">The method.</param>
            <param name="Args">The arguments.</param>
            <returns>returns result of invoke.</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperDelegateHelper">
            <summary>
            Helper class to create delegates
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperDelegateHelper.CreateDelegate``1(System.Object,System.String)">
            <summary>
            Creates a delegate of the specified type.
            </summary>
            <typeparam name="T">The type of delegate to create.</typeparam>
            <param name="Instance">The class instance on which the method is invoked.</param>
            <param name="MethodName">The name of the Instance method that the delegate is to present.</param>
            <returns>A delegate of the specified type that represents the specified method.</returns>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod0`1">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1r`2">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1v`2">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rr`3">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrv`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrvv`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrr`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rv`3">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vr`3">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vv`3">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvr`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vrr`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvv`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rvv`4">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrv`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrr`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvv`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvr`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvrr`5">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrr`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrrrr`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rvvvv`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrvvv`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvvrr`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrv`6">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvrrr`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrrr`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vrrrrr`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrvv`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvv`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvr`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod8vvvvvvvv`9">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod16vvvvvvvvvvvvvvvv`17">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod17vvvvvvvvvvvvvvvvv`18">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrv`7">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="T5"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="p5"></param>
             <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrr`7">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvvvvvr`8">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod9rrrrrrrrr`10">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvrrrrr`8">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7rrrrrrr`8">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke0``1(Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod0{``0})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke1r``2(``0@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1r{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke1v``2(``0,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod1v{``0,``1})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke2rr``3(``0@,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3vvv``4(``0,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3rrv``4(``0@,``1@,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4rrvv``5(``0@,``1@,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrvv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3rrr``4(``0@,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rrr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke2rv``3(``0@,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2rv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke2vr``3(``0,``1@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vr{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3rvv``4(``0@,``1,``2,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3rvv{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3vvr``4(``0,``1,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vvr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke3vrr``4(``0,``1@,``2@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod3vrr{``0,``1,``2,``3})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke2vv``3(``0,``1,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod2vv{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4rrrr``5(``0@,``1@,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4rrrv``5(``0@,``1@,``2@,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4rrrv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4vvrr``5(``0,``1,``2@,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvrr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4vvvv``5(``0,``1,``2,``3,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvv{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke4vvvr``5(``0,``1,``2,``3@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod4vvvr{``0,``1,``2,``3,``4})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5rrrrr``6(``0@,``1@,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrrrr{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5rvvvv``6(``0@,``1,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rvvvv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5rrvvv``6(``0@,``1@,``2,``3,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5rrvvv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5vvvrr``6(``0,``1,``2,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvvrr{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5vvrrv``6(``0,``1,``2@,``3@,``4,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrv{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke5vvrrr``6(``0,``1,``2@,``3@,``4@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod5vvrrr{``0,``1,``2,``3,``4,``5})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vvvrrr``7(``0,``1,``2,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vvrrrr``7(``0,``1,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vrrrrr``7(``0,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vvrrvv``7(``0,``1,``2@,``3@,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvrrvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6rrrrrr``7(``0@,``1@,``2@,``3@,``4@,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vvvvvv``7(``0,``1,``2,``3,``4,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvv{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6vvvvvr``7(``0,``1,``2,``3,``4,``5@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6vvvvvr{``0,``1,``2,``3,``4,``5,``6})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke8vvvvvvvv``9(``0,``1,``2,``3,``4,``5,``6,``7,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod8vvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke16vvvvvvvvvvvvvvvv``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod16vvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke17vvvvvvvvvvvvvvvvv``18(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod17vvvvvvvvvvvvvvvvv{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke6rrrrrv``7(``0@,``1@,``2@,``3@,``4@,``5,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod6rrrrrv{``0,``1,``2,``3,``4,``5,``6})">
             <summary>
            
             </summary>
             <typeparam name="T0"></typeparam>
             <typeparam name="T1"></typeparam>
             <typeparam name="T2"></typeparam>
             <typeparam name="T3"></typeparam>
             <typeparam name="T4"></typeparam>
             <typeparam name="T5"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="p0"></param>
             <param name="p1"></param>
             <param name="p2"></param>
             <param name="p3"></param>
             <param name="p4"></param>
             <param name="p5"></param>
             <param name="method"></param>
             <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke7vvvvvvr``8(``0,``1,``2,``3,``4,``5,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvvvvvr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke9rrrrrrrrr``10(``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod9rrrrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke7vvrrrrr``8(``0,``1,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7vvrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.WrapperFunctionalityBase.Invoke7rrrrrrr``8(``0@,``1@,``2@,``3@,``4@,``5@,``6@,Tekla.Structures.Internal.WrapperFunctionalityBase.TargetMethod7rrrrrrr{``0,``1,``2,``3,``4,``5,``6,``7})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.TeklaStructuresDatabaseHelper">
            <summary>
            Helper class to bypass string length limitation for string values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.TeklaStructuresDatabaseHelper.MAX_DATABASE_NAME_LENGTH">
            <summary>
            Max db name length
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.TeklaStructuresDatabaseHelper.MAX_DATABASE_STRING_LENGTH">
            <summary>
            Max db string length
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.TeklaStructuresDatabaseHelper.GetIndexedAttributeName(System.String,System.Int32)">
            <summary>
            Formulates a dialog attribute name for string value.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <param name="index">The index for the attribute name.</param>
        </member>
        <member name="T:Tekla.Structures.Internal.TeklaStructuresInfo">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Internal.TeklaStructuresInfo.GetTsBuildType">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.TsBuildTypes">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.TsBuildTypes.INVALID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.TsBuildTypes.DAILY">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.TsBuildTypes.BETA_VERSION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.TsBuildTypes.TESTPACKAGE_VERSION">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.TsBuildTypes.RC_SP_FINAL_VERSION">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.dotProgramVersion_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aProgramVersion">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aBuildNumber">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aRevisionDate">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aCopyRightText">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aLocalAppDataFolder">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aCommonAppDataFolder">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.aFullTSRegistryKeyText">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotProgramVersion_t.BuildType">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Internal.dotClashCheckOptions_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotClashCheckOptions_t.BoltHeadDiameter">
            <summary> Bolt Head Diameter.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotClashCheckOptions_t.NutThickness">
            <summary> Nut Thickness.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotClashCheckOptions_t.GetSet">
            <summary> Get = 0; Set = 1;</summary>
        </member>
        <member name="T:Tekla.Structures.Internal.dotComponentOptions_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.PlateProfileName">
            <summary>The plate profile name.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.FoldedPlateProfileName">
            <summary>The folded plate profile name.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.BoltEdgeDistanceFactor">
            <summary>The factor of bolt edge distance.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.BoltEdgeDistanceReference">
            <summary> The bolt edge distance reference.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.BoltStandard">
            <summary> The bolt standard.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.BoltSize">
            <summary>The bolt size.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.PartMaterial">
            <summary>The part material.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.PartWeldedToPrimaryStartNumber">
            <summary>The part welded to primary start number.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.PartWeldedToSecondaryStartNumber">
            <summary>The part welded to secondary start number.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.LoosePartStartNumber">
            <summary>The loose part start number.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.AssemblyLoosePartStartNumber">
            <summary>The assembly loose part number.</summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotComponentOptions_t.GetSet">
            <summary> Get = 0; Set = 1;</summary>
        </member>
        <member name="T:Tekla.Structures.Internal.dotGetAdvancedOption_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.Internal.dotGetAdvancedOption_t.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Internal.dotGetAdvancedOption_t"/> struct. DO NOT USE! For internal usage only!
            </summary>
            <param name="OptionName">Name of the option.</param>
            <param name="OptionType">Type of the option.</param>
            <param name="ValueStringIteration">The value string iteration.</param>
            <exception cref="T:System.ArgumentException">Invalid advanced option variable name.</exception>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.aName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.ValueBool">
            <summary>
            The value bool
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.ValueInt">
            <summary>
            The value int
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.aValueString">
            <summary>
            a value string
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.ValueDouble">
            <summary>
            The value double
            </summary>
        </member>
        <member name="F:Tekla.Structures.Internal.dotGetAdvancedOption_t.ValueStringIteration">
            <summary>
            The value string iteration
            </summary>
        </member>
        <member name="T:Tekla.Structures.Identifier">
            <summary>
            The Identifier class represents an identifier that holds information
            about the identifier number of an object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Identifier.ID">
            <summary>
            The identifier number.
            If the ID value is set manually, the GUID is initialized to Guid.Empty and the identification is done based on the ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Identifier.Id2">
            <summary>
            Secondary identifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Identifier.ID2">
            <summary>
            The sub identifier number.
            If the subID value is set manually, the GUID is initialized to Guid.Empty and the identification is done based on the ID.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Identifier.GUID">
            <summary>
            The object's globally unique identifier.
            If the GUID value is set manually, the ID is initialized to 0 and the identification is done based on the GUID.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor">
            <summary>
            Constructs an empty identifier.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor(System.Int32)">
            <summary>
            Constructs an identifier with the given ID.
            </summary>
            <param name="id">The ID to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor(System.Guid)">
            <summary>
            Constructs an identifier with the given GUID.
            </summary>
            <param name="guid">The GUID to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor(System.Int32,System.Int32,System.Guid)">
            <summary>
            Constructs an identifier with the given GUID.
            </summary>
            <param name="id2"></param>
            <param name="id"></param>
            <param name="guid">The GUID to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs an identifier with the given GUID string.
            </summary>
            <remarks>The guid string is lazily converted to actual Guid object when needed.</remarks>
            <param name="id2"></param>
            <param name="id"></param>
            <param name="guid">The GUID string to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Identifier.#ctor(System.String)">
            <summary>
            Constructs an identifier with the given GUID string.
            </summary>
            <param name="guid">The GUID to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Identifier.GetIdentifierByGuidFromModel(System.String)">
            <summary>
            Returns an identifier instance that has the given GUID in the model.
            </summary>
            <param name="guid">The GUID to look for in the model.</param>
            <returns>The identifier of the GUID, or null if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.ToString">
            <summary>
            Returns the integer ID as a string.
            </summary>
            <returns>The integer ID as a string.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.Equals(Tekla.Structures.Identifier)">
            <summary>
            Compares the identifier with another identifier instance.
            </summary>
            <param name="otherIdentifier">The identifier to compare with.</param>
            <returns>True if the identifiers are equal, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.Equals(System.Object)">
            <summary>
            Compares the identifier with another object instance.
            </summary>
            <param name="otherObject">The object to compare with.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.GetHashCode">
            <summary>
            Gets the hash number of the identifier.
            </summary>
            <returns>The hashed number.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.IsValid">
            <summary>
            Returns true if the identifier seems to be valid.
            The validation is done based on the ID or GUID property.
            </summary>
            <returns>True if the identifier seems to be valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Identifier.SetGuid(System.Guid)">
            <summary>
            Sets GUID without resetting ID.
            </summary>
            <returns>True if the identifier seems to be valid.</returns>
        </member>
        <member name="T:Tekla.Structures.ModuleManager">
            <summary>
            The ModuleManager class handles the product model module configuration information: the
            information that defines what configuration the customer is currently running.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModuleManager.ProgramConfigurationEnum">
            <summary> The configuration information of the program. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_VIEWER">
            <summary> The viewer configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_PRODUCTION_PLANNER">
            <summary> The production planner configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_DRAFTER">
            <summary> The drafter configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_PROJECT_MANAGEMENT">
            <summary> The project management configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_ENGINEERING">
            <summary> The construction management configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_REINFORCED_CONCRETE_DETAILING">
            <summary> The reinforced concrete detailing configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_PRECAST_CONCRETE_DETAILING">
            <summary> The precast concrete detailing configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_STEEL_DETAILING">
            <summary> The steel detailing configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_FULL">
            <summary> The full detailing configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_PRIMARY">
            <summary> The Primary configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_EDUCATIONAL">
            <summary> The educational configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_DEVELOPER">
            <summary> The developer configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_CONSTRUCTION_MODELING">
            <summary> The construction management configuration with modeling capabilities. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_STEEL_DETAILING_LIMITED">
            <obsolete>Deprecated since 19.0 </obsolete><summary> The old steel detailing limited configuration. This definition was left here to enable old macros in 19.0. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_CONSTRUCTION_VIEWER">
            <obsolete>Deprecated since 20.0 </obsolete><summary> The construction management configuration restricted to viewer mode. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_CONSTRUCTION_MANAGEMENT">
            <obsolete>Deprecated since 20.0 </obsolete>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_PARTNER">
            <summary> The partner configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_EPM_MODELER">
            <summary> The EPM Modeler configuration. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_CARBON">
            <summary> The subscription license Carbon. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_GRAPHITE">
            <summary> The subscription license Graphite. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.ProgramConfigurationEnum.CONFIGURATION_DIAMOND">
            <summary> The subscription license Diamond. </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.events">
            <summary>
            The events
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.configuration">
            <summary> Configuration info </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.multimaterialModeling">
            <summary> "MM" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.loadModeling">
            <summary> "LM" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.steelDetailing">
            <summary> "SD" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.concreteDetailing">
            <summary> "CD" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.rebarModeling">
            <summary> "RM" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.taskManagement">
            <summary> "TM" </summary>
        </member>
        <member name="F:Tekla.Structures.ModuleManager.analysisAndDesign">
            <summary> "AD" </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.Configuration">
            <summary> The currently running configuration of Tekla Structures. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.MultimaterialModeling">
            <summary> Indicates whether the multimaterial modeling is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.LoadModeling">
            <summary> Indicates whether the load modeling is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.SteelDetailing">
            <summary> Indicates whether the steel detailing is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.ConcreteDetailing">
            <summary> Indicates whether the concrete detailing is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.RebarModeling">
            <summary> Indicates whether the rebar modeling is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.AnalysisAndDesign">
            <summary> Indicates whether the Analysis and Design management is enabled. </summary>
        </member>
        <member name="P:Tekla.Structures.ModuleManager.TaskManagement">
            <summary> Indicates whether the task management is enabled. </summary>
        </member>
        <member name="M:Tekla.Structures.ModuleManager.#cctor">
            <summary> Initializes currently available modules. </summary>
        </member>
        <member name="M:Tekla.Structures.ModuleManager.OnModuleManagerUpdate">
            <summary>
            Module manager update event.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModuleManager.GetModules">
            <summary> Must be called once. </summary>
            <returns>true</returns>
        </member>
        <member name="T:Tekla.Structures.RemotingHelper.GenericDelegateProxy`2">
            <summary>
            Generic delegate proxy class
            </summary>
            <typeparam name="I">Interface class type</typeparam>
            <typeparam name="T">Delegate class type</typeparam>
        </member>
        <member name="T:Tekla.Structures.RemotingHelper.GenericDelegateProxy`2.WrapDelegate">
            <summary>
            Delegate for creating a wrapper for an instance of I
            </summary>
            <param name="wrappee">Instance on I</param>
            <param name="wrapperFunctionality">The wrapper functionality</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.RemotingHelper.GenericDelegateProxy`2.#ctor(System.String,Tekla.Structures.RemotingHelper.GenericDelegateProxy{`0,`1}.WrapDelegate,System.Boolean)">
            <summary>
            Constructor for GenericDelegateProxy
            </summary>
            <param name="channelName">Name of the remoting pipe</param>
            <param name="wrapDelegate">Delegate for creating a wrapper</param>
            <param name="WeAreUnitTesting">Flag for unit testing</param>
        </member>
        <member name="P:Tekla.Structures.RemotingHelper.GenericDelegateProxy`2.Delegate">
            <summary>
            Gets the CDelegate instance
            </summary>
        </member>
        <member name="T:Tekla.Structures.Solid.Edge">
            <summary>
            The Edge class represents a single global edge in a solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.type">
            <summary>
            Type of the edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.startPoint">
            <summary>
            Start point of the edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.endPoint">
            <summary>
            End point of the edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.shellIndex">
            <summary>
            The index of the shell the edge belongs to.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Edge.#ctor(Tekla.Structures.Solid.Edge.EdgeTypeEnum,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Solid.Edge" /> class.
            </summary>
            <param name="type">Type of the new edge.</param>
            <param name="startPoint">Start point of the new edge.</param>
            <param name="endPoint">End point of the new edge.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.Edge.#ctor(Tekla.Structures.Solid.Edge.EdgeTypeEnum,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Solid.Edge" /> class.
            </summary>
            <param name="type">Type of the new edge.</param>
            <param name="startPoint">Start point of the new edge.</param>
            <param name="endPoint">End point of the new edge.</param>
            <param name="shellIndex">The inde xof the shell the dge blongs to. -1 if unknown.</param>
        </member>
        <member name="T:Tekla.Structures.Solid.Edge.EdgeTypeEnum">
            <summary>
            The type of the edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.EdgeTypeEnum.EDGE_TYPE_NORMAL">
            <summary>
            The normal edge type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.EdgeTypeEnum.EDGE_TYPE_CURVED_SURFACE">
            <summary>
            The curved surface edge type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Edge.EdgeTypeEnum.EDGE_TYPE_HIDDEN">
            <summary>
            The hidden edge type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Edge.Type">
            <summary>
            Gets the type of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Edge.StartPoint">
            <summary>
            Gets the start point of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Edge.EndPoint">
            <summary>
            Gets the end point of the edge.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Edge.ShellIndex">
            <summary>
            Gets the shell index of the edge.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Edge.Clone">
            <summary>
            Method for cloning the current object.
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="T:Tekla.Structures.Solid.EdgeEnumerator">
             <summary>
             The EdgeEnumerator class is used to enumerate the edges of a solid.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Solid;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                 public void Example1()
                 {
                     ModelObjectEnumerator myEnum = new Model().GetModelObjectSelector().GetAllObjectsWithType(new Type[] { typeof(Part) });
                     while (myEnum.MoveNext())
                     {
                         try
                         {
                             Part part = myEnum.Current as Part;
                             if (part != null)
                             {
                                 Console.WriteLine("Part id: " + part.Identifier.ID.ToString());
                                 Solid solid = part.GetSolid();
                                 if (solid != null)
                                 {
                                     EdgeEnumerator edgeEnumerator = solid.GetEdgeEnumerator();
                                     int edgeCount = 0;
                                     while (edgeEnumerator.MoveNext())
                                     {
                                         var edge = edgeEnumerator.Current as Edge;
                                         if (edge != null)
                                         {
                                             Console.WriteLine("Start : " + edge.StartPoint.ToString());
                                             Console.WriteLine("End : " + edge.EndPoint.ToString());
                                             Console.WriteLine("Type : " + edge.Type.ToString());
                                             edgeCount++;
                                         }
                                     }
            
                                     Console.WriteLine("Edge count : " + edgeCount.ToString());
                                 }
                             }
                         }
                         catch { }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Solid.EdgeEnumerator.enumerator">
            <summary>
            The enumerator holding edges.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.EdgeEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Solid.EdgeEnumerator" /> class. This constructor should
            only be called by someone inheriting from ISolid.
            </summary>
            <param name="enumerator">The father solid's global edge list enumerator.</param>
        </member>
        <member name="P:Tekla.Structures.Solid.EdgeEnumerator.Current">
            <summary>
            Gets the current edge.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.EdgeEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.EdgeEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Solid.Face">
            <summary>
            The Face class represents a single face in a solid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Face.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}},Tekla.Structures.Internal.dotPoint_t,System.Int32,Tekla.Structures.Identifier)">
            <summary>
            Instantiates a new face.
            </summary>
            <param name="LoopList">A list of loops in the new face.</param>
            <param name="NormalVector">A normal vector of the new face.</param>
            <param name="ShellIndex">Index of the shell.</param>
            <param name="OriginPartId">The origin part identifier.</param>
        </member>
        <member name="P:Tekla.Structures.Solid.Face.Normal">
            <summary>
            The normal vector of the face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Face.ShellIndex">
            <summary>
            The shell index of the face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.Face.OriginPartId">
            <summary>
            The part id of the part that this face originated from.
            For example, a face create by a part cut has the id of the cutting part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Face.GetLoopEnumerator">
            <summary>
            Gets a new loop enumerator for enumerating through the face's loops.
            </summary>
            <returns>The new loop enumerator.</returns>
        </member>
        <member name="T:Tekla.Structures.Solid.FaceEnumerator">
            <summary>
            The FaceEnumerator class is used to enumerate the faces of a solid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.FaceEnumerator.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}},System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Tekla.Structures.Identifier})">
            <summary>
            Instantiates a new face enumerator. This constructor should
            only be called by someone inheriting from ISolid.
            </summary>
            <param name="Faces">The faces.</param>
            <param name="Normals">The normals.</param>
            <param name="ShellIndices">The shell indices.</param>
            <param name="OriginPartIds">The origin part ids.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.FaceEnumerator.#ctor(System.Collections.Generic.List{Tekla.Structures.Solid.Face})">
            <summary>
            Instantiates a new face enumerator. This constructor should
            only be called by someone inheriting from ISolid.
            </summary>
            <param name="Faces">The faces to enumerate.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.FaceEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.FaceEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.FaceEnumerator.Current">
            <summary>
            Returns the current face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.FaceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Solid.ISolid">
            <summary>
            The ISolid interface represents a physical object in the model or a drawing created by a part instance.
            The solid instance can be used to query the actual geometry of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.ISolid.MinimumPoint">
            <summary>
            The minimum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.ISolid.MaximumPoint">
            <summary>
            The maximum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.ISolid.GetFaceEnumerator">
            <summary>
            Returns a new face enumerator in the current plane.
            </summary>
            <returns>A face enumerator to enumerate through the solid's faces.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.ISolid.GetEdgeEnumerator">
            <summary>
            Returns a new edge enumerator in the current plane.
            </summary>
            <returns>An edge enumerator to enumerate through the solid's global edges.</returns>
        </member>
        <member name="T:Tekla.Structures.Solid.Loop">
            <summary>
            The Loop class represents a single loop in a face.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Loop.#ctor(System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t})">
            <summary>
            Instantiates a new loop.
            </summary>
            <param name="VertexList">A list of vertexes that will be in the new loop.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.Loop.GetVertexEnumerator">
            <summary>
            Gets a new vertex enumerator.
            </summary>
            <returns>A vertex enumerator to enumerate through the vertexes in the loop.</returns>
        </member>
        <member name="T:Tekla.Structures.Solid.LoopEnumerator">
            <summary>
            The LoopEnumerator class is used to enumerate the loops of a face instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.LoopEnumerator.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}})">
            <summary>
            Instantiates a new loop enumerator.
            </summary>
            <param name="Enumerator">The father face's loop list enumerator.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.LoopEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.LoopEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.LoopEnumerator.Current">
            <summary>
            Returns the current loop.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Solid.Shell">
            <summary>
            The Shell class represents a single shell in a solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Shell.edgeList">
            <summary>
            List of shell edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Solid.Shell.faceList">
            <summary>
            List of shell faces.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.Shell.#ctor(System.Collections.Generic.List{Tekla.Structures.Solid.Edge},System.Collections.Generic.List{Tekla.Structures.Solid.Face})">
            <summary>
            Instantiates a new shell.
            </summary>
            <param name="edgeList">A list of edges in the new shell.</param>
            <param name="faceList">A faces in the new shell.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.Shell.GetFaceEnumerator">
            <summary>
            Returns a new face enumerator in the current plane.
            </summary>
            <returns>A face enumerator to enumerate through shell's faces.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.Shell.GetEdgeEnumerator">
            <summary>
            Returns a new edge enumerator in the current plane.
            </summary>
            <returns>An edge enumerator to enumerate through the shell's edges.</returns>
        </member>
        <member name="T:Tekla.Structures.Solid.ShellEnumerator">
             <summary>
             The ShellEnumerator class is used to enumerate the shells of a solid.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Solid;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
             
                 private static Beam CreateBeam(Point p1, Point p2, String profileName, bool SetAsOperativeClass)
                 {
                     Beam beam1 = new Beam
                     {
                         StartPoint = p1,
                         EndPoint = p2,
                         Profile = { ProfileString = profileName },
                         Finish = "PAINT",
                         Material = { MaterialString = "S235JR" },
                         Position = { Depth = Position.DepthEnum.MIDDLE },
                         Class = SetAsOperativeClass ? BooleanPart.BooleanOperativeClassName : "1"
                     };
            
                     return beam1;
                 }
            
                 public void Example1()
                 {
                     Beam beam1 = CreateBeam(new Point(1000.0, 1000.0, 0.0), new Point(1000.0, 2000.0, 0.0), "500*500", false);
                     Beam beam2 = CreateBeam(new Point(500.0, 1500.0, 250.0), new Point(1500.0, 1500.0, 250.0), "500*500", true);
                     BooleanPart cut = new BooleanPart { Father = beam1 };
                     cut.SetOperativePart(beam2);
                    
                     Solid solid1 = beam1.GetSolid(Solid.SolidCreationTypeEnum.RAW);
                     Solid solid2 = beam1.GetSolid(Solid.SolidCreationTypeEnum.NORMAL);
                    
                     ShellEnumerator shells = solid1.GetCutPart(solid2);
                    
                     int shellCount = 0;
                     var faceCounts = new List&lt;int&gt;();
                    
                     while (shells.MoveNext())
                     {
                         var shell = shells.Current as Shell;
                         if (shell != null)
                         {
                             FaceEnumerator faces = shell.GetFaceEnumerator();
                             faceCounts.Insert(shellCount, 0); 
                             while(faces.MoveNext())
                             {
                                 faceCounts[shellCount]++; 
                             }
                         }
                         shellCount++;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Solid.ShellEnumerator.enumerator">
            <summary>
            The enumerator holding shells.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.ShellEnumerator.#ctor(System.Collections.Generic.List{Tekla.Structures.Solid.Shell})">
            <summary>
            
            </summary>
            <param name="shells"></param>
        </member>
        <member name="P:Tekla.Structures.Solid.ShellEnumerator.Current">
            <summary>
            Gets the current shell.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.ShellEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.ShellEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Solid.VertexEnumerator">
            <summary>
            The VertexEnumerator class is used to enumerate the vertexes of a loop instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Solid.VertexEnumerator.#ctor(System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t})">
            <summary>
            Instantiates a new vertex enumerator.
            </summary>
            <param name="Enumerator">The father loop's vertex list enumerator.</param>
        </member>
        <member name="M:Tekla.Structures.Solid.VertexEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Solid.VertexEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.VertexEnumerator.Current">
            <summary>
            Returns the current vertex.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Solid.VertexEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current vertex.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresDatabaseTypeEnum">
            <summary> The object types to be used in filter expressions.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.UNKNOWN">
            <summary> The unknown type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.POINT">
            <summary> The point type, this is not a ModelObject. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.PART">
            <summary> The part type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.CONNECTION">
            <summary> The connection type, used for details and seams as well. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.COMPONENT">
            <summary> The component type, used for macros, plug-ins and custom parts. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.GRID">
            <summary> The grid type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.FITTING">
            <summary> The fitting type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.BOLT">
            <summary> The bolt type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.PART_CUT">
            <summary> The part cut type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.PLANE_CUT">
            <summary> The plane cut type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.WELDING">
            <summary> The welding type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.ASSEMBLY">
            <summary> The assembly type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.CONSTRUCTION_LINE">
            <summary> The construction line type, this is not a ModelObject. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.PLANE">
            <summary> The plane type, used for control planes and grid planes.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DRAWING">
            <summary>The drawing.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DB_CONNECTION">
            <summary>The connection type.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.PART_ADD">
            <summary> The part add type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.WELD_CUT">
            <summary> The weld preparation.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.CONSTRUCTION_CIRCLE">
            <summary> The construction circle type, this is not a ModelObject. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.CONSTRUCTION_ARC">
            <summary>The construction arc</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DB_COMPONENT">
            <summary> The component type.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.REBAR">
            <summary> The rebar type, used for single rebars, groups, meshes and strands.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.FOREIGN_OBJECT">
            <summary>The foreign object.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_LOAD">
            <summary> The load type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_POINT">
            <summary> The load point type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_LINE">
            <summary> The load line type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_AREA">
            <summary> The load area type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_UNIFORM">
            <summary> The load uniform type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_GROUP">
            <summary> The load group type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.LOAD_TEMPERATURELOAD">
            <summary> The temperature load type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.SURFACE_TREATMENT">
            <summary> The surface treatment type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.REBAR_SPLICE">
            <summary> The rebar splice type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.ANALYSIS_MODEL">
            <summary>The analysis model.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.ANALYSIS_PART">
            <summary>The analysis part.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.ANALYSIS_NODE">
            <summary>The analysis node.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.EDGE_CHAMFER">
            <summary> The edge chamfer type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.TASK">
            <summary> The task type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.TASK_DEPENDENCY">
            <summary> The task dependency type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.TASK_WORKTYPE">
            <summary> The task worktype type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.HIERARCHIC_DEFINITION">
            <summary> The hierarchic definition type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.HIERARCHIC_OBJECT">
            <summary> The hierarchic object type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DB_POUR_BREAK">
            <summary> The pour break type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DB_POUR_OBJECT">
            <summary> The pour object type. </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.REBARSET_ADDITION">
            <summary>The rebar set addition type.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.REBARSET_MODIFIER">
            <summary>The rebar set modifier type.</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.SURFACE_OBJECT">
            <summary>The surface object type</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.BENT_PLATE">
            <summary>The bent plate type</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.HELIX">
            <summary>The helix type</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.DB_POUR_UNIT">
            <summary> The pour unit type</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.CONSTRUCTION_POLYCURVE">
            <summary>The construction polycurve</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.STOREY">
            <summary>Building Hierarchy Storey</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.BUILDING_SITE">
            <summary>Building Hierarchy Building</summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresDatabaseTypeEnum.BUILDING">
            <summary>Building Hierarchy Site</summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresFiles">
            <summary>
            The TeklaStructuresFiles class is for the paths where the attributes file will be searched for.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresFiles.modelPath">
            <summary>
            The model path
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresFiles.variablesHelper">
            <summary>
            The tekla structures variables
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.TeklaStructuresFiles"/> class.
            </summary>
            <param name="modelpath">The modelpath.</param>
        </member>
        <member name="P:Tekla.Structures.TeklaStructuresFiles.PropertyFileDirectories">
            <summary>
            The directories where to look for property files.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.GetMultiDirectoryFileList(System.String,System.Boolean)">
            <summary>
            Gets a list of files with the given extension from the default search directories.
            </summary>
            <param name="fileExtension">The file extension to be used.</param>
            <param name="fullpath">If true, file with full path with extension is returned.</param>
            <returns>A list of files with the given extension.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.GetAttributeFile(System.String)">
            <summary>
            Gets a file info representing the first match in the standard property file directories.
            </summary>
            <param name="fileName">The name of the file including the file extension.</param>
            <returns>A file info for the first match in the directory list. Null if no match was found.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.GetAttributeFile(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Gets a file info representing the first match in the search directories.
            </summary>
            <param name="searchDirectories">The list of directories to be used for searching for the file.</param>
            <param name="fileName">The name of the file including the file extension.</param>
            <returns>A file info for the first match in the directory list. Null if no match was found.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.IsValidDirectory(System.String)">
            <summary>
            Checks if a directory is valid.
            </summary>
            <param name="directory">The directory to be checked.</param>
            <returns>True if the directory is valid.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.GetMultiDirectoryFileList(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Gets a list of files with the given extension from the given search directories.
            </summary>
            <param name="searchDirectories">The search directories to be used.</param>
            <param name="fileExtension">The file extension to be used.</param>
            <param name="fullpath">If true, file with full path with extension is returned.</param>
            <returns>A list of found file names without the file extension.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.GetStandardPropertyFileDirectories">
            <summary>
            Gets the paths where to look for the property files.
            </summary>
            <returns>The paths where to look for the property files.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresFiles.AddPaths(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Adds the paths.
            </summary>
            <param name="fileDirectories">The file directories.</param>
            <param name="environmentVariableName">Name of the environment variable.</param>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresInfo">
            <summary>The TeklaStructuresInfo class provides information about Tekla Structures.</summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetCurrentProgramVersion">
            <summary> Returns the current Tekla Structures version. </summary>
            <returns>The current version of Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetBuildNumber">
            <summary> Returns the Tekla Structures build number. </summary>
            <returns>The current buildnumber of Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetRevisionDate">
            <summary> Returns the Tekla Structures revision date as string. </summary>
            <returns>The current revision date of Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetCopyRightText">
            <summary> Returns the Tekla Structures copyright text as string. </summary>
            <returns>The current copyright text of Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetLocalAppDataFolder">
            <summary> Returns (XSUSERDATADIR) user's local appdata folder of the Tekla Structures as string. </summary>
            <returns>The (XSUSERDATADIR)user's local appdata folder of the Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetCommonAppDataFolder">
            <summary> Returns (XSDATADIR)environments installation folder of the Tekla Structures as string. </summary>
            <returns>The (XSDATADIR)environments installation folder of the Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetFullTSRegistryKeyText">
            <summary>Returns full registry key of the Tekla Structures as string. </summary>
            <returns>The full registry key of the Tekla Structures.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresInfo.GetCurrentUser">
            <summary> Returns the current Tekla Structures user. </summary>
            <returns>The current user of Tekla Structures.</returns>
        </member>
        <member name="T:Tekla.Structures.ClashCheckOptions">
            <summary>The ClashCheckOptions class represents the clash check options.</summary>
        </member>
        <member name="P:Tekla.Structures.ClashCheckOptions.BoltHeadDiameter">
            <summary>The bolt head diameter.</summary>
        </member>
        <member name="P:Tekla.Structures.ClashCheckOptions.NutThickness">
            <summary>The nut thickness.</summary>
        </member>
        <member name="T:Tekla.Structures.ComponentOptions">
            <summary>The ComponentOptions class represents the component options.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PlateProfileName">
            <summary>The plate profile name.</summary>
             <remarks>The maximum length is 10 characters.</remarks>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.FoldedPlateProfileName">
            <summary>The folded plate profile name.</summary>
             <remarks>The maximum length is 10 characters.</remarks>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.BoltEdgeDistanceFactor">
            <summary>The factor of bolt edge distance.</summary>
        </member>
        <member name="T:Tekla.Structures.ComponentOptions.BoltEdgeDistanceReferenceEnum">
            <summary> The bolt edge distance reference type. </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentOptions.BoltEdgeDistanceReferenceEnum.BOLT_DIAMETER">
            <summary> Compares the edge distance to the bolt diameter. </summary>
        </member>
        <member name="F:Tekla.Structures.ComponentOptions.BoltEdgeDistanceReferenceEnum.HOLE_DIAMETER">
            <summary> Compares the edge distance to the hole diameter. </summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.BoltEdgeDistanceReference">
            <summary>The bolt edge distance reference.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.BoltStandard">
            <summary> The bolt standard.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.BoltSize">
            <summary>The bolt size.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PartMaterial">
            <summary>The part material.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PartWeldedToPrimaryStartNumber">
            <summary>The part welded to primary start number.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PartWeldedToPrimaryPositionPrefix">
            <summary>The part welded to primary position prefix.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PartWeldedToSecondaryStartNumber">
            <summary>The part welded to secondary start number.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.PartWeldedToSecondaryPositionPrefix">
            <summary>The part welded to secondary position prefix.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.LoosePartStartNumber">
            <summary>The loose part start number.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.LoosePartPositionPrefix">
            <summary>The loose part position prefix.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.AssemblyLoosePartStartNumber">
            <summary>The assembly loose part number.</summary>
        </member>
        <member name="P:Tekla.Structures.ComponentOptions.AssemblyLoosePartPositionPrefix">
            <summary>The assembly loose position prefix.</summary>
        </member>
        <member name="T:Tekla.Structures.DrawingDimensionsOptions">
            <summary>The DrawingDimensionsOptions class represents the drawing dimensions options.</summary>
        </member>
        <member name="T:Tekla.Structures.DrawingObjectsOptions">
            <summary>The DrawingObjectsOptions class represents the drawing objects options.</summary>
        </member>
        <member name="T:Tekla.Structures.GeneralOptions">
            <summary>The GeneralOptions class represents the general options.</summary>
        </member>
        <member name="T:Tekla.Structures.LoadModelingOptions">
            <summary>The LoadModelingOptions class represents the load modeling options.</summary>
        </member>
        <member name="T:Tekla.Structures.MouseSettingsOptions">
            <summary>The MouseSettingsOptions class represents the mouse settings options.</summary>
        </member>
        <member name="T:Tekla.Structures.NumberingOptions">
            <summary>The NumberingOptions class represents the numbering options.</summary>
        </member>
        <member name="T:Tekla.Structures.OrientationMarksOptions">
            <summary>The OrientationMarksOptions class represents the orientation marks options.</summary>
        </member>
        <member name="T:Tekla.Structures.UnitsAndDecimalsOptions">
            <summary>The UnitsAndDecimalsOptions class represents the units and decimals options.</summary>
        </member>
        <member name="T:Tekla.Structures.PropertyTypeEnum">
            <summary> The type of property: int/double/string.</summary>
        </member>
        <member name="F:Tekla.Structures.PropertyTypeEnum.TYPE_INT">
            <summary>
            The integer property type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PropertyTypeEnum.TYPE_DOUBLE">
            <summary>
            The double property type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.PropertyTypeEnum.TYPE_STRING">
            <summary>
            The string property type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresSettings">
            <summary>
            The TeklaStructuresSettings class provides methods to inquire application settings.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresSettings.InvalidPathCallback">
            <summary>
            The invalid path callback - provides error logging for GetAdvancedOptionPaths when a string is found to be invalid as a path
            </summary>
            <param name="advancedOption">The advanced option name.</param>
            <param name="invalidString">The invalid string.</param>
            <param name="exceptionMessage">The exception message if an exception was thrown when converting the string to a path.</param>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOptionTypeEnum">
            <summary>
            GetAdvancedOptionTypeEnum type enum
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,System.Boolean@)">
            <summary>
            Returns the value of an advanced option variable.
            </summary>
            <param name="VariableName">The name of the advanced option.</param>
            <param name="Value">The returned value of the advanced option.</param>
            <returns>True if the value was successfully retrieved.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,System.Int32@)">
            <summary>
            Returns the value of an advanced option variable.
            </summary>
            <param name="VariableName">The name of the advanced option.</param>
            <param name="Value">The returned value of the advanced option.</param>
            <returns>True if the value was successfully retrieved.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,System.String@)">
            <summary>
            Returns the value of an advanced option variable.
            </summary>
            <param name="VariableName">The name of the advanced option.</param>
            <param name="Value">The returned value of the advanced option.</param>
            <returns>True if the value was successfully retrieved.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,System.Double@)">
            <summary>
            Returns the value of an advanced option variable.
            </summary>
            <param name="VariableName">The name of the advanced option.</param>
            <param name="Value">The returned value of the advanced option.</param>
            <returns>True if the value was successfully retrieved.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOptionPaths(System.String,System.Collections.Generic.List{System.String}@,Tekla.Structures.TeklaStructuresSettings.InvalidPathCallback)">
            <summary>
            Gets the value of an advanced option as a list of valid paths.
            Strings with path separator ; are split into separate paths and any blank paths (containing only white space) are ignored.
            Paths do not need to exist but must use valid characters and format.
            Note: All valid paths are returned even when invalid paths are encountered.
            </summary>
            <example>
            The following example gets the first existing instance of a specified file name from the firm,
            project or system folders.
            <code>
            using System;
            using System.Collections.Generic;
            using System.IO;
            using Tekla.Structures;
            
            public class Example
            {
                <summary>An example GetAdvancedOptionPaths error callback which logs any advanced option path error.</summary>
                <param name="advancedOpt">The advanced option being processed when the error occurred.</param>
                <param name="invalidString">The invalid string if identified.</param>
                <param name="exceptionMessage">The exception message if an exception was thrown when converting the string to a path.</param>
                public static void MyGetAdvancedOptionPathsErrorCallback(string advancedOpt, string invalidString, string exceptionMessage)
                {
                    Console.WriteLine(
                        string.Format(
                            "The advanced option path string {0} could not be read correctly. Some or all of its content(s) will be ignored.",
                            advancedOption));
            
                    if (!string.IsNullOrWhiteSpace(invalidString))
                    {
                        Console.WriteLine("The invalid string is: " + invalidString);
                    }
            
                    if (!string.IsNullOrWhiteSpace(exceptionMessage))
                    {
                        Console.WriteLine("The exception message is: " + exceptionMessage);
                    }
                }
            
                <summary>Tries to get the first existing instance of a specified file name from the firm, 
                project or system folders.</summary>
                <param name="fileName">Name of the file.</param>
                <param name="filePath">The file path of the first file found.</param>
                <returns>True if successful; otherwise false.</returns>
                public static bool TryGetFileInFirmProjectOrSystemFolders(string fileName, out string filePath)
                {
                    filePath = null;
                    var advancedOptions = new List&lt;string&gt; { "XS_FIRM", "XS_PROJECT", "XS_SYSTEM" };
                    foreach (var advancedOption in advancedOptions)
                    {
                        List&lt;string&gt; paths;
                        if (!TeklaStructuresSettings.GetAdvancedOptionPaths(
                            advancedOption,
                            out paths,
                            MyGetAdvancedOptionPathsErrorCallback))
                        {
                            continue;
                        }
            
                        foreach (var path in paths)
                        {
                            var fileToFind = Path.Combine(path, fileName);
                            if (File.Exists(fileToFind))
                            {
                                filePath = fileToFind;
                                return true;
                            }
                        }
                    }
            
                    return false;
                }
            }
            </code>
            </example>
            <param name="advancedOption">The advanced option name.</param>
            <param name="paths">The paths.</param>
            <param name="errorHandler">The optional error handler callback.</param>
            <returns>True if the variable is read successfully and contains no invalid paths; otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetOptions(Tekla.Structures.ClashCheckOptions@)">
            <summary>
            Returns the value of the clash check options.
            </summary>
            <param name="Options">The returned value of the clash check options.</param>
            <returns>True if the values were successfully retrieved.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.SetOptions(Tekla.Structures.ClashCheckOptions)">
            <summary>
            Sets the clash check options.
            </summary>
            <param name="Options">The clash check options to be set.</param>
            <returns>
            True if the clash check options were successfully set.
            </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetOptions(Tekla.Structures.ComponentOptions@)">
            <summary>
            Returns the value of the component options.
            </summary>
            <param name="Options">The returned value of the component options.</param>
            <returns>
            True if the values were successfully retrieved.
            </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.SetOptions(Tekla.Structures.ComponentOptions)">
            <summary>
            Sets the component options.
            </summary>
            <param name="Options">The component options to be set.</param>
            <returns>
            True if the component options were successfully set.
            </returns>
            <exception cref="T:System.ArgumentNullException">Options cannot be null</exception>
            <exception cref="T:System.OverflowException">Folded Plate Profile Name is too long
            or
            Plate Profile Name is too long
            or
            Bolt Standard is too long
            or
            Bolt Size is too long
            or
            Part Material is too long
            or
            or
            or
            or</exception>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.IsToolOptionOn(System.String)">
            <summary>
            Determines whether select switch is on.
            </summary>
            <param name="toolOptionName">Name of the switch.</param>
            <returns>
              <c>true</c> if select switch is on; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.IsPourEnabled">
            <summary>
            Determines whether pour management is enabled.
            </summary>
            <returns>
              <c>true</c> if pour is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,Tekla.Structures.TeklaStructuresSettings.GetAdvancedOptionTypeEnum,Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <summary>
            Gets the advanced option.
            </summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Type">The type.</param>
            <param name="AdvancedOption">The advanced option.</param>
            <returns>true if ok</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresSettings.GetAdvancedOption(System.String,Tekla.Structures.TeklaStructuresSettings.GetAdvancedOptionTypeEnum,System.Int32,Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <summary>
            Gets the advanced option.
            </summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Type">The type.</param>
            <param name="ValueStringIteration">The value string iteration.</param>
            <param name="AdvancedOption">The advanced option.</param>
            <returns>true if ok</returns>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames">
            <summary>
            Tool option names.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.All">
            <summary>
            The all.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Joints">
            <summary>
            The joints.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Parts">
            <summary>
            The parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Surfaces">
            <summary>
            The surfaces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Points">
            <summary>
            The points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.ConstructionLines">
            <summary>
            The construction lines.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.ReferenceModels">
            <summary>
            The reference models.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Grid">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.GridLine">
            <summary>
            The grid line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Weldings">
            <summary>
            The weldings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Cuts">
            <summary>
            The cuts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Views">
            <summary>
            The views.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Screws">
            <summary>
            The screws.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.SingleScrews">
            <summary>
            The single screws.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Rebars">
            <summary>
            The rebars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.RebarGroup">
            <summary>
            The rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.RebarSingle">
            <summary>
            The rebar single.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.PourBreaks">
            <summary>
            The pour breaks.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Planes">
            <summary>
            The planes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Distances">
            <summary>
            The distances.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.Loads">
            <summary>
            The loads.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.AnalysisParts">
            <summary>
            The analysis parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.AnalysisNodes">
            <summary>
            The analysis nodes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.AnalysisNodeLinks">
            <summary>
            The analysis node links.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.CustomObjects">
            <summary>
            The custom objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.ObjectsInJoints">
            <summary>
            The objects in joints.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.SelectAssemblies">
            <summary>
            The select assemblies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.SelectObjectsInAssemblies">
            <summary>
            The select objects in assemblies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.SelectTasks">
            <summary>
            The select tasks.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.DisplaySelectionFilterDialog">
            <summary>
            The display selection filter dialog.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresSettings.ToolOptionNames.DirectManipulation">
            <summary>
            The direct manipulation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.TeklaStructuresVariables">
            <summary>
            The EnvironmentVariables class contains a sorted list specializing in getting active
            environment variables and advanced option settings. It also checks options.ini files
            in the active model folder as well as options_user.ini files.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresVariables.PourManagementOptionName">
            <summary>
            The advanced option name for pour management.
            </summary>
        </member>
        <member name="F:Tekla.Structures.TeklaStructuresVariables.Instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresVariables.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Tekla.Structures.TeklaStructuresVariables"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresVariables.Add(System.String)">
            <summary>
            Adds a variable to the list.
            </summary>
            <param name="key">The variable to be added.</param>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresVariables.Get(System.String)">
            <summary>
            Gets a key.
            </summary>
            <param name="key">The key to get.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Tekla.Structures.TeklaStructuresVariables.ContainsVariable(System.String)">
            <summary>
            Gets a key.
            </summary>
            <param name="key">The key to get.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:Tekla.Structures.VariablesHelper">
            <summary>
            TeklaStructuresVariables implementation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.VariablesHelper.cachedVariables">
            <summary>
            The cached variables.
            </summary>
        </member>
        <member name="M:Tekla.Structures.VariablesHelper.Add(System.String)">
            <summary>
            Adds a variable of given key to the list.
            </summary>
            <param name="key">The variable to be added.</param>
        </member>
        <member name="M:Tekla.Structures.VariablesHelper.Get(System.String)">
            <summary>
            Gets a value for given key.
            </summary>
            <param name="key">The key to get.</param>
            <returns>
            The value for given key, or empty if not present.
            </returns>
        </member>
        <member name="M:Tekla.Structures.VariablesHelper.ContainsVariable(System.String)">
            <summary>
            Determines whether the specified key contains variable.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <c>true</c> if the specified key contains variable; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
