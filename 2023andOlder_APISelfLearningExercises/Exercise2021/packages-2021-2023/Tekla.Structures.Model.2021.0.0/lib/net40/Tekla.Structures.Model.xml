<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekla.Structures.Model</name>
    </assembly>
    <members>
        <member name="T:Tekla.Structures.Model.Assembly">
            <summary>
            The Assembly class defines a single manufacturing unit: objects that are bolted or welded together in the workshop.
            An assembly has a main part and secondary assemblables attached to it. The number of secondaries is limited to 2048.
            Hierarchical assemblies can also have subassemblies attached to them and they can have a parent assembly instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam beam1 = new Beam(new Point(0,0,0), new Point(1000,0,0));
                       Beam beam2 = new Beam(new Point(0,0,0), new Point(0,0,1000));
            
                       beam1.Profile.ProfileString = "380*380";
                       beam1.Material.MaterialString = "K40-1";
            
                       beam2.Profile.ProfileString = "380*380";
                       beam2.Material.MaterialString = "K40-1";
            
                       beam1.Insert();
                       beam2.Insert();
            
                       Assembly assembly = beam1.GetAssembly();
                       assembly.Add(beam2);
            
                       if(!assembly.Modify())
                           Console.WriteLine("Assembly Modify Failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Assembly.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._MainPart">
            <summary>
            The main part of the assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._MainAssemblyId">
            <summary>
            The main assembly for the assembly, or null if none. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._OtherObjects">
            <summary>
            All the secondary objects of the assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly._SubAssemblies">
            <summary>
            The subassemblies of the assembly.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Assembly.AssemblyTypeEnum">
            <summary>
            The assembly types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.STEEL_ASSEMBLY">
            <summary>
            The steel assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.PRECAST_ASSEMBLY">
            <summary>
            The precast assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.IN_SITU_ASSEMBLY">
            <summary>
            The in-situ assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.TIMBER_ASSEMBLY">
            <summary>
            The timber assembly type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Assembly.AssemblyTypeEnum.UNKNOWN_ASSEMBLY">
            <summary>
            The unknown assembly type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Assembly.AssemblyNumber">
            <summary>
            Defines the numbering in the assembly sense. If the members are empty and zero, the main part attributes are used.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.#ctor">
            <summary>
            Creates a new assembly instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetMainPart">
            <summary>
            Selects and returns the main part of the assembly or null if none.
            </summary>
            <returns>The main part of the assembly or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.SetMainPart(Tekla.Structures.Model.Part)">
            <summary>
            Sets the main part of the assembly.
            </summary>
            <param name="Part">The part to set as the main part of the assembly.</param>
            <returns>True if the part was valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSecondaries">
            <summary>
            Selects and returns all the secondary assemblables belonging to the assembly. The method replaces the
            old GetObjects() method. Notice that the number of secondaries is limited to 2048.
            </summary>
            <returns>An array list containing all the secondary assemblables belonging to the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(Tekla.Structures.Model.IAssemblable)">
            <summary>
            Adds the given assemblable instance to the assembly. Notice that adding
            other than assembly instances will assume that you are adding objects to a cast unit assembly.
            </summary>
            <param name="Object">The part instance to add to the assembly.</param>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(System.Collections.ArrayList)">
            <summary>
            Adds an array list of given assemblable instances to the assembly. For assemblies use Add(Assembly Assembly). Notice that adding
            other than assembly instances will actually assume that you are adding objects to a cast unit assembly.
            </summary>
            <param name="Assemblables">A list of assemblables to add to the assembly.</param>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Remove(Tekla.Structures.Model.ModelObject)">
            <summary>
            Removes the given instance from the assembly.
            Before removing steel parts from an assembly all connecting workshop welds and bolts must be deleted.
            </summary>
            <param name="Object">The model object to remove from the assembly.</param>
            <returns>True if successfully removed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Insert">
            <summary>
            At the moment assemblies cannot be inserted.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Select">
            <summary>
            Selects the assembly instance from the model. The identifier of the instance must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Modify">
            <summary>
            Modifies the assembly instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Delete">
            <summary>
            Explodes the assembly instance.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Add(Tekla.Structures.Model.Assembly)">
            <summary>
            Adds a new subassembly for the assembly instance.
            </summary>
            <param name="Assembly">The assembly instance to be added.</param>
            <returns>True if the subassembly was successfully added.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetAssembly">
            <summary>
            Returns the assembly instance the assembly belongs to (null if none).
            </summary>
            <returns>The assembly instance or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSubAssemblies">
            <summary>
            Selects and returns a list of subassemblies belonging to the assembly.
            </summary>
            <returns>A list of subassemblies.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetAssemblyType">
            <summary>
            Returns the type of the assembly.
            </summary>
            <returns>The type of the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetFatherPour">
            <summary>
            Returns the pour that the assembly is directly associated to.
            </summary>
            <returns>The father pour object</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetFatherPourUnit">
            <summary>
            Returns the pour unit that the bolt group is associated to.
            </summary>
            <returns>A pour unit.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSubAssemblies(System.Boolean)">
            <summary>
            Selects and returns a list of subassemblies belonging to the assembly.
            </summary>
            <param name="selectSubassemblies">If subassemblies should be selected.</param>
            <returns>A list of subassemblies.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetAssemblyId">
            <summary>
            Returns the assembly identifier the assembly belongs to (null if none).
            </summary>
            <returns>The assembly identifier or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetSecondaries(System.Boolean)">
            <summary>
            Selects and returns all the secondary assemblables belonging to the assembly. The method replaces the
            old GetObjects() method. Notice that the number of secondaries is limited to 2048.
            </summary>
            <param name="selectSecondaries">If secondaries should be selected.</param>
            <returns>An array list containing all the secondary assemblables belonging to the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetMainPart(System.Boolean)">
            <summary>
            Selects and returns the main part of the assembly or null if none.
            </summary>
            <param name="selectMainPart">If main part should be selected.</param>
            <returns>The main part of the assembly or null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.Select(Tekla.Structures.Model.ModelObject)">
            <summary>
            Selects the Assembly based on given part.
            </summary>
            <param name="ObjectInAssembly">A part belonging to the Assembly</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.CheckIfPartCanBeRemovedFromAssembly(Tekla.Structures.Model.Part)">
            <summary>
            Checks that removed part is not connected to assembly with shop weld or bolt.
            </summary>
            <param name="part">The part to be checked.</param>
            <returns>True if part can be removed from assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.IsAssemblyPartOfAssembly(Tekla.Structures.Model.Assembly)">
            <summary>
            Is the assembly part of the current assembly.
            </summary>
            <param name="Assembly">The assembly to be checked.</param>
            <returns>True if the assembly belongs to the current assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.IsPartOfAssembly(Tekla.Structures.Model.IAssemblable)">
            <summary>
            Is the assemblable part of the current assembly.
            </summary>
            <param name="Assemblable">The assemblable to be checked.</param>
            <returns>True if the assemblable belongs to the current assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.CompareTo(Tekla.Structures.Model.Assembly)">
            <summary>
            Compares the instantiated assembly with another one.
            </summary>
            <param name="AssemblyToCompare">The assembly to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
            <remarks>
            If the numbering hasn't been performed the function will also return false.
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.ExportArrayListToIntList(System.Collections.ArrayList)">
            <summary>
            Converts arraylist to intlista and exports it.
            </summary>
            <param name="arrayList">The array list of ModelObjects.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.ExportArrayListToDoubleList(System.Collections.ArrayList)">
            <summary>
            Converts arraylist to DoubleList and exports it.
            </summary>
            <param name="arrayList">The array list of ModelObjects.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.UpdateSecondaries(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            Updates secondaries from IntList after fromstruct.
            </summary>
            <param name="assembly">The dot assembly.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetArrayListFromDoubleList">
            <summary>
            Imports DoubleList and returns ArrayList of ints.
            </summary>
            <returns>The ArrayList</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetArrayListFromIntList">
            <summary>
            Imports IntList and returns ArrayList.
            </summary>
            <returns>The ArrayList</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Assembly.GetIntArrayListFromEnumerable(System.Collections.ICollection)">
            <summary>
            Imports IntList.
            </summary>
            <returns>ArrayList of ModelObjects.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltArray">
            <summary>
            The BoltArray class defines a bolt group with an array shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 3000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 3000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltArray B = new BoltArray();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition  = new Point(3000,  6000, 0);
                       B.SecondPosition = new Point(6000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "NELSON";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 100;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.AddBoltDistX(100);
                       B.AddBoltDistX(90);
                       B.AddBoltDistX(80);
            
                       B.AddBoltDistY(70);
                       B.AddBoltDistY(60);
                       B.AddBoltDistY(50);
            
                       if (!B.Insert())
                           Console.WriteLine("BoltArray Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.BoltArray._BoltDistX">
            <summary>
            Array Bolt Dist X values (double).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltArray._BoltDistY">
            <summary>
            Array Bolt Dist Y values (double).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.#ctor">
            <summary>
            Creates a new bolt array instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.AddBoltDistX(System.Double)">
            <summary>
            Adds an X distance to the bolt array.
            </summary>
            <param name="DistX">The X distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.AddBoltDistY(System.Double)">
            <summary>
            Adds a Y distance to the bolt array.
            </summary>
            <param name="DistY">The Y distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.RemoveBoltDistX(System.Int32)">
            <summary>
            Removes an X distance from the bolt array in the index position.
            </summary>
            <param name="Index">The position to remove from.</param>
            <returns>True if the distance was removed. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.RemoveBoltDistY(System.Int32)">
            <summary>
            Removes a Y distance from the bolt array in the index position.
            </summary>
            <param name="Index">The position to remove from.</param>
            <returns>True if the distance was removed. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistXCount">
            <summary>
            Returns the amount of X distances in the bolt array.
            </summary>
            <returns>The amount of X distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistYCount">
            <summary>
            Returns the amount of Y distances in the bolt array.
            </summary>
            <returns>The amount of Y distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistX(System.Int32)">
            <summary>
            Returns the X distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.GetBoltDistY(System.Int32)">
            <summary>
            Returns the Y distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.SetBoltDistX(System.Int32,System.Double)">
            <summary>
            Sets the X distance at the index defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <param name="DistX">The X distance to be used.</param>
            <returns>True if the distance was modified. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.SetBoltDistY(System.Int32,System.Double)">
            <summary>
            Sets the Y distance at the index defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <param name="DistY">The Y distance to be used.</param>
            <returns>True if the distance was modified. False if the index is out of range.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Insert">
            <summary>
            Inserts the bolt array into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Select">
            <summary>
            Selects a bolt array from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Modify">
            <summary>
            Modifies the existing bolt array in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltArray.Delete">
            <summary>
            Deletes the bolt array instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltCircle">
            <summary>
            The BoltCircle class defines a bolt group with a circle shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(12000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(12000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltCircle B = new BoltCircle();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition  = new Point( 9000,  6000, 0);
                       B.SecondPosition = new Point(12000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "7968";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 100;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.NumberOfBolts = 7;
                       B.Diameter      = 160;
            
                       if (!B.Insert())
                           Console.WriteLine("BoltCircle Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.BoltCircle.NumberOfBolts">
            <summary>
            The number of bolts in the circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltCircle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.#ctor">
            <summary>
            Creates a new bolt circle instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Insert">
            <summary>
            Inserts the bolt circle into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Select">
            <summary>
            Selects a bolt circle from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Modify">
            <summary>
            Modifies the existing bolt circle in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltCircle.Delete">
            <summary>
            Deletes the bolt circle instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup">
            <summary>
            The BoltGroup class is an abstract base class for all bolt shapes, such as array, circle and XY list.
            See the Tekla Structures help file for further information about the attributes.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltTypeEnum">
            <summary>
            The type of the bolt.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltTypeEnum.BOLT_TYPE_SITE">
            <summary>
            The site bolt type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP">
            <summary>
            The workshop bolt type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum">
            <summary>
            The thread in the material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO">
            <summary>
            No thread inside the material (the part).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_YES">
            <summary>
            Thread inside the material (the part).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltShapeEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_ARRAY">
            <summary>
            The array shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_CIRCLE">
            <summary>
            The circle shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltShapeEnum.SHAPE_XY_LIST">
            <summary>
            The XY list.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum">
            <summary>
            The special hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_OVERSIZED">
            <summary>
            The oversized hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_SLOTTED">
            <summary>
            The slotted hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltHoleTypeEnum.HOLE_TYPE_NO_HOLE">
            <summary>
            The no hole type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltPlainHoleTypeEnum">
            <summary>
            The plain hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltPlainHoleTypeEnum.HOLE_TYPE_THROUGH">
            <summary>
            The through hole type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltPlainHoleTypeEnum.HOLE_TYPE_BLIND">
            <summary>
            The blind hole type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum">
            <summary>
            The rotation of the slots (the holes).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_ODD">
            <summary>
            The slots are crossed to odd parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_EVEN">
            <summary>
            The slots are crossed to even parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup.BoltRotateSlotsEnum.ROTATE_SLOTS_PARALLEL">
            <summary>
            The slots are rotated to be parallel.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltSize">
            <summary>
            The size of the bolts in the group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltStandard">
            <summary>
            The standard of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltType">
            <summary>
            The type of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ThreadInMaterial">
            <summary>
            Whether the thread goes inside the materal or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Length">
            <summary>
            The length. An extra variable that is only set when the bolt group is made of studs instead of bolts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.CutLength">
            <summary>
            The cut length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ExtraLength">
            <summary>
            The extra length for the bolts.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Shape">
            <summary>
            The shape of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Tolerance">
            <summary>
            The hole tolerance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.HoleType">
            <summary>
            The special hole type: oversized, slotted, blind or no hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SlottedHoleX">
            <summary>
            Gets or sets the X allowance of the slotted hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SlottedHoleY">
            <summary>
            Gets or sets the Y allowance of the slotted hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BlindHoleDepth">
            <summary>
            Gets or sets the blind hole depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.PlainHoleType">
            <summary>
            Gets or sets the plain hole type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.RotateSlots">
            <summary>
            Gets or sets the rotation of the slots: odd, even or parallel.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Position">
            <summary>
            The position attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.StartPointOffset">
            <summary>
            The start point offset values of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.EndPointOffset">
            <summary>
            The end point offset values of the bolt group.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer1">
            <summary>
            Indicates whether the washer 1 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer2">
            <summary>
            Indicates whether the washer 2 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Washer3">
            <summary>
            Indicates whether the washer 3 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Nut1">
            <summary>
            Indicates whether the nut 1 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Nut2">
            <summary>
            Indicates whether the nut 2 is used in the assembly.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Bolt">
            <summary>
            Indicates whether the instance is a bolt or just a hole.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole1">
            <summary>
            Indicates whether the hole 1 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole2">
            <summary>
            Indicates whether the hole 2 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole3">
            <summary>
            Indicates whether the hole 3 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole4">
            <summary>
            Indicates whether the hole 4 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.Hole5">
            <summary>
            Indicates whether the hole 5 is used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.PartToBoltTo">
            <summary>
            The part to bolt to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.PartToBeBolted">
            <summary>
            The part to be bolted.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.OtherPartsToBolt">
            <summary>
            The other parts to be bolted (read-only).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.FirstPosition">
            <summary>
            The first position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.SecondPosition">
            <summary>
            The second position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.ConnectAssemblies">
            <summary> Defines whether to connect a part or an assembly as a secondary part (false) or as a sub-assembly (true). </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltGroup._BoltPositions">
            <summary>
            Real bolt positions in selection plane
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BoltGroup.BoltPositions">
            <summary>
            Gets the single bolt positions.
            All the bolt positions are in the XY-plane defined by the bolt group coordinate
            system. The given positions are in relation to the transformation plane
            in which the bolt group was selected.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.#ctor">
            <summary>
            Creates a new bolt group instance with the given shape.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.AddOtherPartToBolt(Tekla.Structures.Model.Part)">
            <summary>
            Adds the given part to the list of the other parts that should be bolted.
            </summary>
            <param name="M">The part to add.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.RemoveOtherPartToBolt(Tekla.Structures.Model.Part)">
            <summary>
            Removes the given part from the list of the other bolted parts.
            </summary>
            <param name="M">The part to remove.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetOtherPartsToBolt">
            <summary>
            Returns an array list containing all the other parts that are bolted.
            </summary>
            <returns>An array list of parts containing all the other parts that are bolted.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetSolid">
            <summary>
            Method for getting the solid information of the bolt group.
            </summary>
            <returns>The solid instance of the bolt group.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetSolid(System.Boolean)">
            <summary>
            Method for getting the solid information of the bolt group.
            </summary>
            <param name="withHighAccuracy">Boolean value which defines if the solid is created with high accuracy</param>
            <returns>The solid instance of the bolt group.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetFatherPour">
            <summary>
            Returns the pour that the bolt group is associated to.
            </summary>
            <returns>The pour object.</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.BoltGroup.GetFatherPourUnit">
            <summary>
            Returns the pour unit that the bolt group is associated to.
            </summary>
            <returns>A pour unit.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BoltXYList">
            <summary>
            The BoltXYList class defines a bolt group with an XY list shape. The bolt group is the most generic one
            of the bolt groups.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");
            
                       BoltXYList B = new BoltXYList();
            
                       B.PartToBeBolted = cp;
                       B.PartToBoltTo   = cp;
            
                       B.FirstPosition =  new Point(6000,  6000, 0);
                       B.SecondPosition = new Point(9000, 12000, 0);
            
                       B.BoltSize     = 16;
                       B.Tolerance    = 3.00;
                       B.BoltStandard = "7968";
                       B.BoltType     = BoltGroup.BoltTypeEnum.BOLT_TYPE_WORKSHOP;
                       B.CutLength    = 105;
            
                       B.Length       = 50;
                       B.ExtraLength  = 15;
                       B.ThreadInMaterial = BoltGroup.BoltThreadInMaterialEnum.THREAD_IN_MATERIAL_NO;
            
                       B.Position.Depth          = Position.DepthEnum.MIDDLE;
                       B.Position.Plane          = Position.PlaneEnum.MIDDLE;
                       B.Position.Rotation       = Position.RotationEnum.FRONT;
            
                       B.Bolt    = true;
                       B.Washer1 = true;
                       B.Washer2 = true;
                       B.Washer3 = true;
                       B.Nut1    = true;
                       B.Nut2    = true;
            
                       B.Hole1   = true;
                       B.Hole2   = true;
                       B.Hole3   = true;
                       B.Hole4   = true;
                       B.Hole5   = true;
            
                       B.AddBoltDistX(100);
                       B.AddBoltDistX(200);
                       B.AddBoltDistX(300);
            
                       B.AddBoltDistY(100);
                       B.AddBoltDistY(200);
                       B.AddBoltDistY(300);
            
                       if (!B.Insert())
                           Console.WriteLine("BoltXYList Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.BoltXYList._BoltDistX">
            <summary>
            Bolt Dist X
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BoltXYList._BoltDistY">
            <summary>
            Bolt Dist Y
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.#ctor">
            <summary>
            Creates a new bolt XY list instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.AddBoltDistX(System.Double)">
            <summary>
            Adds an X distance to the bolt XY list.
            </summary>
            <param name="DistX">The X distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.AddBoltDistY(System.Double)">
            <summary>
            Adds a Y distance to the bolt XY list.
            </summary>
            <param name="DistY">The Y distance to be added.</param>
            <returns>True if the distance was added. Throws an OverflowException if there was no more space for the distance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistXCount">
            <summary>
            Returns the amount of X distances in the bolt XY list.
            </summary>
            <returns>The amount of X distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistYCount">
            <summary>
            Returns the amount of Y distances in the bolt XY list.
            </summary>
            <returns>The amount of Y distances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistX(System.Int32)">
            <summary>
            Returns the X distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.GetBoltDistY(System.Int32)">
            <summary>
            Returns the Y distance defined by the argument.
            </summary>
            <param name="Index">The index to the distance list.</param>
            <returns>The distance defined by the argument.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Insert">
            <summary>
            Inserts the bolt XY list into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Select">
            <summary>
            Selects a bolt XY list from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Modify">
            <summary>
            Modifies the existing bolt XY list in the model database to match the current one.
            <para>Note, the IDs of Part To Bolt To, Part To Be Bolted and OtherParts cannot be modified.</para>
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BoltXYList.Delete">
            <summary>
            Deletes the bolt XY list instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Boolean">
            <summary>
            The Boolean class is an abstract base class for boolean operations such as a part cut, an add, a fitting or
            a cut plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Boolean.Father">
            <summary>
            The father object of the boolean operation; the model object instance to operate on.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Boolean.#ctor">
            <summary>
            Constructs an empty boolean.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BooleanPart">
            <summary>
            The BooleanPart class represents a part cut or an add. This means that a model object is, for example,
            cut with a part instance to create a void to the father part. Typically the operative part is deleted after
            the boolean cut operation. In case of boolean add, operative part is deleted automatically.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 7000, 0);
                       Point point2 = new Point(1000, 7000, 0);
                       Beam Beam1 = new Beam();
                       Beam1.StartPoint = point;
                       Beam1.Profile.ProfileString = "400*400";
                       Beam1.EndPoint = point2;
                       Beam1.Insert();
            
                       Beam Beam2 = new Beam();
                       Beam2.Profile.ProfileString = "400*400";
                       Beam2.StartPoint = new Point(500, 6000, 0);
                       Beam2.EndPoint = new Point(500, 8000, 0);
                       Beam2.Class = BooleanPart.BooleanOperativeClassName;
                       Beam2.Insert();
            
                       BooleanPart Beam = new BooleanPart();
                       Beam.Father = Beam1;
                       Beam.SetOperativePart(Beam2);
                       // Beam.Type = BooleanPart.BooleanTypeEnum.BOOLEAN_ADD; // BOOLEAN_CUT is default type.
                       if(!Beam.Insert())
                           Console.WriteLine("Insert failed!");
                       Beam2.Delete(); // Not needed when using BOOLEAN_ADD, operative part is deleted automatically.
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum">
            <summary>
            Defines the boolean operation: an add or a cut.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum.BOOLEAN_ADD">
            <summary>
            Defines the add part. Typically the add part type is not used.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum.BOOLEAN_CUT">
            <summary>
            Defines the cut part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanTypeEnum.BOOLEAN_WELDPREP">
            <summary>
            Defines the weld prep part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BooleanPart.BooleanOperativeClassName">
            <summary>
            A constant string that defines a part class name to be the boolean
            operative part. This class must be used when inserting the operative part to
            the database.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BooleanPart.Type">
            <summary>
            Defines the boolean operation: an add or a cut.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BooleanPart.OperativePart">
            <summary>
            The part that does the boolean operation. When Insert() is called, this field is overwritten 
            with a new part instance which is a copy of the original operative part. This part has the
            same identifier as the boolean part. Modifications (such as profile change) have
            to be made through the part instance and not the boolean part instance. The operative part's
            class must be BooleanOperativeClass.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.#ctor">
            <summary>
            Instantiates an empty cut operation.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.SetOperativePart(Tekla.Structures.Model.Part)">
            <summary>
            Sets the part to operate with. The operative part's
            class member must be defined to be BooleanOperativeClass.
            </summary>
            <param name="Part">The operative part for the boolean.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Insert">
            <summary>
            Inserts the boolean part into the model database. All the attributes must be set.
            The operative part is overwritten by a copy of the original part.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Select">
            <summary>
            Selects a boolean part from the model database. The part ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Modify">
            <summary>
            Currently it is not possible to modify the boolean part as there is nothing
            that can be modified for it. Calling this function will actually call modify for 
            the operative part member.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BooleanPart.Delete">
            <summary>
            Deletes the boolean part instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.CutPlane">
            <summary>
            The CutPlane class defines how the end of a part is cut with a plane. A cut plane differs from a fitting because
            a cut can never extend the boundaries of the original part.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "HEA400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       CutPlane CutPlane = new CutPlane();
                       CutPlane.Plane = new Plane();
                       CutPlane.Plane.Origin = new Point(0, 0, 0);
                       CutPlane.Plane.AxisX = new Vector(0, 1000, 0);
                       CutPlane.Plane.AxisY = new Vector(0, 0, -1000);
                       CutPlane.Father = Beam;
                       CutPlane.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.CutPlane.Plane">
            <summary>
            The plane that cuts the part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.#ctor">
            <summary>
            Initializes a new instance of the CutPlane class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Insert">
            <summary>
            Inserts the cut plane into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Select">
            <summary>
            Selects a cut plane from the model database. The part ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Modify">
            <summary>
            Modifies the existing cut plane in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.Delete">
            <summary>
            Deletes the cut plane instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.CreateInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.ModifyInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.SelectInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.ToStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CutPlane.FromStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.EdgeChamfer">
            <summary>
            The EdgeChamfer class defines how the part edge is chamfered.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "400*400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       EdgeChamfer EdgeChamfer = new EdgeChamfer(new Point(0, -100, 0), new Point(0, 200, 0));
                       EdgeChamfer.FirstChamferEndType = EdgeChamfer.ChamferEndTypeEnum.BEVELLED;
                       EdgeChamfer.FirstBevelDimension = 50;
                       EdgeChamfer.Chamfer.X = 20;
                       EdgeChamfer.Chamfer.Y = 20;
                       EdgeChamfer.Father = Beam;
                       EdgeChamfer.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum">
            <summary> The end type of the edge chamfer. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.FULL">
            <summary> The chamfer continues to the end of the edge. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.STRAIGHT">
            <summary> The chamfer end is straight at the given point. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.EdgeChamfer.ChamferEndTypeEnum.BEVELLED">
            <summary> The chamfer end is bevelled at the given point. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.Chamfer">
            <summary> The chamfer values for the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstEnd">
            <summary> The start point of the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondEnd">
            <summary> The end point of the EdgeChamfer. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstChamferEndType">
            <summary> The ChamferEndTypeEnum of the first end. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondChamferEndType">
            <summary> The ChamferEndTypeEnum of the second end. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.SecondBevelDimension">
            <summary> The bevel dimension if the second end is bevelled. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.FirstBevelDimension">
            <summary> The bevel dimension if the first end is bevelled. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.EdgeChamfer.Name">
            <summary> The name of the EdgeChamfer instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.#ctor">
            <summary> Initializes a new instance of the EdgeChamfer class with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary> Initializes a new instance of the EdgeChamfer class. </summary>
            <param name="FirstEnd">The first end point of the edge chamfer.</param>
            <param name="SecondEnd">The second end point of the edge chamfer.</param>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Insert">
            <summary> Inserts the edge chamfer into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Select">
            <summary> Selects an edge chamfer from the model database. The edge chamfer ID must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Modify">
            <summary>
            Modifies the existing edge chamfer in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.EdgeChamfer.Delete">
            <summary>
            Deletes the edge chamfer instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Fitting">
            <summary>
            The Fitting class defines how the part end fits to a plane.  A fitting can make the part either longer or shorter.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
            
                       Beam Beam = new Beam();
                       Beam.StartPoint = Point;
                       Beam.EndPoint = Point2;
                       Beam.Profile.ProfileString = "HEA400";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       Fitting Fitting = new Fitting();
                       Fitting.Plane = new Plane();
                       Fitting.Plane.Origin = new Point(500, 0, 0);
                       Fitting.Plane.AxisX = new Vector(0, 1000, 0);
                       Fitting.Plane.AxisY = new Vector(0, 0, -1000);
                       Fitting.Father = Beam;
                       Fitting.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Fitting.Plane">
            <summary>
            The plane that fits the part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.#ctor">
            <summary>
            Initializes a new instance of the Fitting class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Insert">
            <summary>
            Inserts the fitting into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Select">
            <summary>
            Selects a fitting from the model database. The fitting ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Modify">
            <summary>
            Modifies the existing fitting in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.Delete">
            <summary>
            Deletes the fitting instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.CreateInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.ModifyInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.SelectInstance">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.ToStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Fitting.FromStruct(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent">
            <summary>
            The ClashChekerEvent class contains methods related to clash check events.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.GetClashCheckHandler">
            <summary>
            Returns a new clash check handler.
            </summary>
            <returns>The new clash check handler instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.ClashCheckDoneDelegate">
            <summary>
            The delegate to use for clash check completion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashChecker.ClashChekerEvent.ClashDetectedDelegate">
            <summary>
            The delegate to use for clash detection.
            Encapsulates any method that takes a clash check data object as a parameter.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseComponent">
            <summary>
            The BaseComponent class is an abstract base class that represents generic components. The generic components
            derived from the base component are the component, the connection, the detail and the seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.CUSTOM_OBJECT_NUMBER">
            <summary>
            The component number to be used when calling a custom component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.PLUGIN_OBJECT_NUMBER">
            <summary>
            The component number to be used when calling a plug-in or a type derived from the connection base.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.ConnectionCodeFromAttributeFile">
            <summary>
            A constant string defining that the connection code is to be read from the attribute file. The
            connection code must be set to this constant value before inserting the component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent.ClassFromAttributeFile">
            <summary>
            A constant integer defining that the class is to be read from the attribute file. The
            class must be set to this constant value before inserting the component.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.Name">
            <summary>
            The name of the component. The name identifies custom components or plug-ins.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.Number">
            <summary>
            The number of the component. A number greater than zero identifies system components, 
            for custom components the number is CUSTOM_OBJECT_NUMBER, and for plug-ins the number is PLUGIN_OBJECT_NUMBER.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.PrimaryObject">
            <summary>
            The primary object of the detail, seam and connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.SecondaryObjects">
            <summary>
            The secondary objects for the detail, seam and connection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent._InputPolygon">
            <summary>
            Contains the reference point for the detail or the input polygon
            for the seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseComponent._Attributes">
            <summary>
            Stores all the attributes that the user has set.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.#ctor">
            <summary>
            Creates a base component instance with default attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.String)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="StrValue">The string value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.Int32)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="Value">The integer value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.SetAttribute(System.String,System.Double)">
            <summary>
            Sets the attribute's value to the given value.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="DValue">The double value of the attribute.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.String@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="StrValue">A string for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.Int32@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="Value">An integer for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.GetAttribute(System.String,System.Double@)">
            <summary>
            Retrieves the attribute with the given name.
            </summary>
            <param name="AttrName">The name of the attribute.</param>
            <param name="DValue">A double for the return value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.AddAttributesToStack">
            <summary>
            Adds all the attributes to the stack in Tekla Structures, one attribute is added at a time.
            </summary>
            <returns>True if no errors occured while adding the attributes.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.LoadAttributesFromFile(System.String)">
            <summary>
            Loads the attributes for the component from the given file. These attributes
            will be loaded before all the attributes that have been set with the SetAttribute
            methods, so any attributes that are set with SetAttribute will override those
            loaded from the given standard file.
            </summary>
            <param name="Filename">The name of the file.</param>
            <returns>True if a file name is specified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseComponent.LoadComponentAttributes">
            <summary>
            Loads the component attributes to the stack. This needs to be run before
            the attributes the user sets are added to the stack.
            </summary>
            <returns>True if the file name was set and the attributes were correctly loaded.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.BaseComponent.InputPolygon">
            <summary>
            An input polygon for the seam and the custom part.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Component">
             <summary>
             The Component class represents a component. A component is a modelling tool that typically
             assembles multiple parts to build some type of a structure, for example a hall macro or at a
             smaller scale a reinforcement component (a macro). Also, a custom part is a component.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             using System;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                        B.Profile.ProfileString = "380*380";
                        B.Material.MaterialString = "K40-1";
                        if (B.Insert())
                        {
                            Component C = new Component();
                            C.Name = "Component Test";
                            C.Number = 30000063;
            
                            ComponentInput CI = new ComponentInput();
                            CI.AddInputObject(B);
            
                            C.SetComponentInput(CI);
            
                            C.LoadAttributesFromFile("standard");
            
                            C.SetAttribute("side_bar_space", 333.0);
            
                            if (!C.Insert())
                            {
                                Console.WriteLine("Component Insert failed");
                            }
                            else
                            {
                                Console.WriteLine(C.Identifier.ID);
            
                                Double DValue = 0.0;
                                if (!C.GetAttribute("side_bar_space", ref DValue) || DValue != 333)
                                    Console.WriteLine("Component GetAttribute failed");
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Component.#ctor">
            <summary>
            Creates a new component instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Component.#ctor(Tekla.Structures.Model.ComponentInput)">
            <summary>
            Creates a new component instance with the given component input.
            </summary>
            <param name="I">The component input to be used for the component.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Component.SetComponentInput(Tekla.Structures.Model.ComponentInput)">
            <summary>
            Sets the component input object for the component. The component input object
            contains all the input objects and positions that are needed for the
            component creation.
            </summary>
            <param name="I">The component input object.</param>
            <returns>True if the input is received.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetComponentInput">
            <summary>
            Returns the component input object.
            </summary>
            <returns>The component input object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetBooleans">
            <summary>
            Returns an enumerator of all the connected boolean objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetAssembly">
            <summary>
            Returns the assembly that the component belongs to.
            </summary>
            <returns>The assembly that the component belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Insert">
            <summary>
            Inserts the component into the model database. The component input needs to be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Select">
            <summary>
            Selects a component from the model database. The component ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Modify">
            <summary>
            Modifies the existing component in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.Delete">
            <summary>
            Deletes the component instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Component.GetComponents">
            <summary>
            Returns an enumerator of all the connected components.
            </summary>
            <returns>A ModelObjectEnumerator on success, otherwise null.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ComponentInput">
            <summary>
            The ComponentInput class handles the input of component objects and positions. A component has one component input.
            The component input must include all the needed input objects and points in the correct order. For example,
            an input with a point and a part is different from an input of a part and a point.
            The maximum number of different input items in the collection is 10.
            </summary>
            <example>
            The following example creates a component with a given component input:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                       Beam.Profile.ProfileString = "380*380";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Insert();
            
                       Component Component = new Component();
                       Component.Name = "Component Test";
                       Component.Number = 30000063;
            
                       ComponentInput ComponentInput = new ComponentInput();
                       ComponentInput.AddInputObject(Beam);
            
                       Component.SetComponentInput(ComponentInput);
            
                       Component.LoadAttributesFromFile("standard");
            
                       Component.SetAttribute("side_bar_space", 333.0);
            
                       if (!Component.Insert())
                       {
                           Console.WriteLine("Component Insert failed");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.ComponentInput._InputObjects">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ComponentInput.MAX_INPUTITEMS">
            <summary>
            Max number of input sequences
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.#ctor">
            <summary>
            Creates a new component input object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetInputObjectItemCount">
            <summary>
            Returns the number of input object sequences.
            </summary>
            <returns>The number of input object sequences.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetInputObjectItem(System.Int32)">
            <summary>
            Returns the input object item at the given index.
            </summary>
            <param name="Index">A zero based index of the input object sequence.</param>
            <returns>The input object item.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddOneInputPosition(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds an input position to the component input.
            </summary>
            <param name="P">The position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddTwoInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds two input positions to the component input.
            </summary>
            <param name="Position1">The first position to be added.</param>
            <param name="Position2">The second position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Adds a polygon to the component input.
            </summary>
            <param name="P">The polygon to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Adds a model object to the component input.
            </summary>
            <param name="M">The model object to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.AddInputObjects(System.Collections.ArrayList)">
            <summary>
            Adds an array list of  model objects to the component input.
            </summary>
            <param name="Objects">A list of model objects in the correct order.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.ComponentInput.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.ComponentInput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                    B.Profile.ProfileString = "380*380";
                    B.Material.MaterialString = "K40-1";
                    if (B.Insert())
                    {
                        Component C = new Component();
                        C.Name = "Component Test";
                        C.Number = 30000063;
            
                        ComponentInput CI = new ComponentInput();
                        CI.AddInputObject(B);
            
                        C.SetComponentInput(CI);
            
                        C.LoadAttributesFromFile("standard");
            
                        C.SetAttribute("side_bar_space", 333.0);
            
                        if (!C.Insert())
                        {
                            Console.WriteLine("Component Insert failed");
                        }
                        else
                        {
                            // test fetching component input
                            ComponentInput ComponentSel = C.GetComponentInput();
                            IEnumerator Enumerator = ComponentSel.GetEnumerator();
                            while (Enumerator.MoveNext())
                            {
                                InputItem ObjectInput = Enumerator.Current as InputItem;
                                if (ObjectInput.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                                {
                                    Beam BeamInput = ObjectInput.GetData() as Beam;
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.ComponentInputObject">
            <summary>
            Internal class that deals with single ComponentInputObjects (A ComponentInput consists of 
            multiple ComponentInputObjects)
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Connection">
            <summary>
            The Connection class represents a connection. A connection is something that connects two or more parts together.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B1 = new Beam(new Point(15000,0,-500), new Point(15000,0,6000));
                       B1.Profile.ProfileString = "HEA400";
                       B1.Material.MaterialString = "S235JR";
            
                       Beam B2 = new Beam(new Point(15000,0,0), new Point(18000,0,0));
                       B2.Profile.ProfileString = "HEA400";
                       B2.Material.MaterialString = "S235JR";
            
                       B1.Insert();
                       B2.Insert();
            
                       Connection C = new Connection();
                       C.Name = "Test End Plate";
                       C.Number = 144;
                       C.LoadAttributesFromFile("standard");
                       C.UpVector = new Vector(0,0,1000);
                       C.PositionType = PositionTypeEnum.COLLISION_PLANE;
            
                       C.SetPrimaryObject(B1);
                       C.SetSecondaryObject(B2);
            
                       C.SetAttribute("e2", 10.0);
                       C.SetAttribute("e1", 10.0);
            
                       if(!C.Insert())
                       {
                           Console.WriteLine("Connection Insert failed");
                       }
                       else
                       {
                           Console.WriteLine(C.Identifier.ID);
            
                           Double DValue = 0.0;
                           if(!C.GetAttribute("e2", ref DValue) || DValue != 10)
                               Console.WriteLine("Connection GetAttribute failed");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Class">
            <summary>
            The class of the connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction for the connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.PositionType">
            <summary>
            The position type.
            <para>When creating custom connections this attribute is not applied,
            instead the position type used when creating the custom connection
            is used.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Code">
            <summary>
            The code of the connection. The code can be used to classify the connection.
            The code of the connection can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Connection.Status">
            <summary>
            The read only status of the connection. 
            The status can be reported and shown in drawings.
            The color of the connection symbol in the model indicates the status of the connection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.#ctor">
            <summary>
            Creates a new connection instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the primary object of the connection.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.GetPrimaryObject">
            <summary>
            Returns the primary object of the connection.
            </summary>
            <returns>The primary object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetSecondaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the secondary object of the connection. Use this
            method if you wish to add only one secondary object
            to the connection.
            </summary>
            <param name="M">The secondary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.SetSecondaryObjects(System.Collections.ArrayList)">
            <summary>
            Sets an array list of model objects as the secondary objects of the connection.
            </summary>
            <param name="Secondaries">An array list containing the secondary objects.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.GetSecondaryObjects">
            <summary>
            Returns the secondary objects.
            </summary>
            <returns>An array list containing all the secondary objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Insert">
            <summary>
            Inserts the connection into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Select">
            <summary>
            Selects a connection from the model database. The connection ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Modify">
            <summary>
            Modifies the existing connection in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Connection.Delete">
            <summary>
            Deletes the connection instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.CustomPart">
            <summary>
            The CustomPart class represents a custom part object in the Tekla Structures model.
            A custom part is a modeling tool that typically assembles multiple parts to build some
            type of a beam-like structure, for example a tapered beam or a sandwich panel.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       CustomPart CPart = new CustomPart();
                       CPart.Name = "HPKM39";
                       CPart.Number = BaseComponent.CUSTOM_OBJECT_NUMBER;
                       CPart.Position.Plane = Position.PlaneEnum.LEFT;
                       CPart.Position.PlaneOffset = 10;
                       CPart.Position.Depth = Position.DepthEnum.BEHIND;
                       CPart.Position.DepthOffset = 30;
                       CPart.Position.RotationOffset = 45;
                       CPart.Position.Rotation = Position.RotationEnum.TOP;
                       CPart.SetInputPositions(new Point(100, 0, 0), new Point(300, 0, 0));
                       CPart.SetAttribute("P2a", "TEST");
                       CPart.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.CustomPart.Position">
            <summary>
            The way the custom part is positioned in the model.
            </summary>
            <remarks>Currently position attributes cannot be changed with Modify().</remarks>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.#ctor">
            <summary>
            Creates a new custom part instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new custom part instance with the given input.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.SetInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the start and end point of the custom part.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetStartAndEndPositions(Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Returns the start and end points of the custom part.
            </summary>
            <param name="StartPoint">The start point of the custom part.</param>
            <param name="EndPoint">The end point of the custom part.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetBooleans">
            <summary>
            Returns an enumerator of all the connected boolean objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetAssembly">
            <summary>
            Returns the assembly that the custom part belongs to.
            </summary>
            <returns>The assembly that the custom part belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Insert">
            <summary>
            Inserts the custom part into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Select">
            <summary>
            Selects a custom part from the model database. The custom part identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Modify">
            <summary>
            Modifies the existing custom part in the model database to match the current one.
            </summary>
            <remarks>Currently position attributes cannot be changed with Modify().</remarks>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.Delete">
            <summary>
            Deletes the custom part instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CustomPart.GetComponents">
            <summary>
            Returns an enumerator of all the connected components.
            </summary>
            <returns>A ModelObjectEnumerator on success, otherwise null.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Detail">
            <summary>
            The Detail class represents a detail. A detail is different from a connection since the detail only connects to one part.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B = new Beam(new Point(13000,3000,-500), new Point(13000,3000,6000));
                       B.Profile.ProfileString = "HEA400";
                       B.Material.MaterialString = "S235JR";
            
                       if(B.Insert())
                       {
                           Detail D = new Detail();
                           D.Name = "Test End Plate Detail";
                           D.Number = 1002;
                           D.LoadAttributesFromFile("standard");
                           D.UpVector = new Vector(0,0,0);
                           D.PositionType = PositionTypeEnum.MIDDLE_PLANE;
                           D.AutoDirectionType = AutoDirectionTypeEnum.AUTODIR_DETAIL;
                           D.DetailType = DetailTypeEnum.END;
            
                           D.SetPrimaryObject(B);
                           D.SetReferencePoint(new Point(13000,3000,3000));
            
                           D.SetAttribute("el", 33.0);
                           D.SetAttribute("er", 33.0);
            
                           if(!D.Insert())
                           {
                               Console.WriteLine("Detail Insert failed");
                           }
                           else
                           {
                               Console.WriteLine(D.Identifier.ID);
            
                               Double DValue = 0.0;
                               if(!D.GetAttribute("er", ref DValue) || DValue != 33)
                                   Console.WriteLine("Detail GetAttribute failed");
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Class">
            <summary>
            The class of the detail.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.PositionType">
            <summary>
            The position type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.DetailType">
            <summary>
            The detail type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Code">
            <summary>
            The code of the detail. The code can be used to classify the detail.
            The code can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Detail.Status">
            <summary>
            The read only status of the detail.
            The status can be reported and shown in drawings.
            The color of the detail symbol in the model indicates the status of the detail.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.#ctor">
            <summary>
            Creates a new detail instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the detail's primary object.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.GetPrimaryObject">
            <summary>
            Returns the primary object.
            </summary>
            <returns>The primary object of the detail.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.SetReferencePoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the reference point; the point the user would pick for the detail to appear to.
            </summary>
            <param name="ReferencePoint">The reference point.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.GetReferencePoint">
            <summary>
            Returns the reference point.
            </summary>
            <returns>The reference point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Insert">
            <summary>
            Inserts the detail into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Select">
            <summary>
            Selects a detail from the model database. The detail ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Modify">
            <summary>
            Modifies the existing detail in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Detail.Delete">
            <summary>
            Deletes the detail instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Seam">
            <summary>
            The Seam class represents a seam. A seam is something that connects a main part to other parts along an edge.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using Tekla.Structures;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam B1 = new Beam(new Point(15000,3000,0), new Point(21000,3000,0));
                       B1.Profile.ProfileString = "780*380";
                       B1.Material.MaterialString = "K40-1";
                       B1.Class = "5";
                       B1.Position.Plane = Position.PlaneEnum.MIDDLE;
                       B1.Position.Rotation = Position.RotationEnum.TOP;
                       B1.Position.Depth = Position.DepthEnum.BEHIND;
            
                       Beam B2 = new Beam(new Point(15000,3000,0), new Point(21000,3000,0));
                       B2.Profile.ProfileString = "780*380";
                       B2.Material.MaterialString = "K40-1";
                       B2.Class = "6";
                       B2.Position.Plane = Position.PlaneEnum.MIDDLE;
                       B2.Position.Rotation = Position.RotationEnum.TOP;
                       B2.Position.Depth = Position.DepthEnum.FRONT;
            
                       B1.Insert();
                       B2.Insert();
            
                       Seam S = new Seam();
                       S.Name = "seamdm";
                       S.Number = -1;
                       S.LoadAttributesFromFile("standard");
                       S.UpVector = new Vector(0,0,0);
                       S.AutoDirectionType = AutoDirectionTypeEnum.AUTODIR_BASIC;
                       S.AutoPosition = true;
            
                       S.SetPrimaryObject(B1);
                       S.SetSecondaryObject(B2);
            
                       S.SetInputPositions(new Point(15000,3000,0), new Point(21000,3000,0));
            
                       if(!S.Insert())
                           Console.WriteLine("Seam Insert failed");
                       else
                           Console.WriteLine(S.Identifier.ID);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.UpVector">
            <summary>
            A vector indicating which direction is considered the up direction for the seam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.AutoDirectionType">
            <summary>
            The auto direction type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.AutoPosition">
            <summary>
            The auto position type. Defines that the seam will internally evaluate the final position more accurately. The input 
            positions are still needed for reference.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Code">
            <summary>
            The code of the seam. The code can be used to classify the seam.
            The code can be reported and shown in drawings.
            The maximum length of the string is 20 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Class">
            <summary>
            The class of the seam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Seam.Status">
            <summary>
            The read only status of the seam. 
            The status can be reported and shown in drawings.
            The color of the connection symbol in the model indicates the status of the seam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.#ctor">
            <summary>
            Creates a new seam instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetPrimaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the primary object.
            </summary>
            <param name="M">The primary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetPrimaryObject">
            <summary>
            Returns the primary object.
            </summary>
            <returns>The primary object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetSecondaryObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Sets the secondary object of the seam. Use this
            method if you wish to add only one secondary object
            to the seam.
            </summary>
            <param name="M">The secondary object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetSecondaryObjects(System.Collections.ArrayList)">
            <summary>
            Sets the secondary objects.
            </summary>
            <param name="Secondaries">An array list containing all the secondary objects.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetSecondaryObjects">
            <summary>
            Returns an array list containing all the secondary objects.
            </summary>
            <returns>An array list containing the secondary objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the start and end point of the seam.
            </summary>
            <param name="StartPoint">The start point of the seam.</param>
            <param name="EndPoint">The end point of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetStartAndEndPositions(Tekla.Structures.Geometry3d.Point@,Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Returns the start and end points of the seam.
            </summary>
            <param name="StartPoint">The start point of the seam.</param>
            <param name="EndPoint">The end point of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.SetInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Sets the input polygon of the seam.
            </summary>
            <param name="InputPolygon">The input polygon of the seam.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.GetInputPolygon">
            <summary>
            Returns the input polygon of the seam.
            </summary>
            <returns>The input polygon of the seam instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Insert">
            <summary>
            Inserts the seam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Select">
            <summary>
            Selects a seam from the model database. The seam ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Modify">
            <summary>
            Modifies the existing seam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Seam.Delete">
            <summary>
            Deletes the seam instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlObjectLineType">
            <summary>
            The line types (the presentation of the line).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectLineType.SolidLine">
            <summary>
            The solid line (default).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectLineType.DashedLine">
            <summary>
            The dashed line (-----).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectLineType.SlashedLine">
            <summary>
            The slashed line (- - -).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectLineType.DashDot">
            <summary>
            The dash dotted line (--.--.).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectLineType.DottedLine">
            <summary>
            The dotted line (.....).
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BendSurface">
            <summary>
            The BendSurface class defines a surface contour that can be used as a bend between two plates
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.InwardCurved">
            <summary>
            Gets the direction of the curve - true if the curve is oriented towards the intersection line, false otherwise.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.IntersectionLine">
            <summary>
            Gets intersection line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.EndFaceNormal1">
            <summary>
            Gets the first end face normal.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.EndFaceNormal2">
            <summary>
            Gets the second end face normal.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.CenterLine">
            <summary>
            Gets the center line of the bend surface (i.e. the line that crosses every circular cross section of the
            bend at their center point)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.RotationAxis">
            <summary>
            Gets the unit vector that defines the rotation axis (for counter clockwise rotations) of the lateral
            boundaries of the surface. This axis is always parallel to the direction of the center line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.LateralBoundary1">
            <summary>
            Gets or sets the first lateral boundary
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.LateralBoundary2">
            <summary>
            Gets or sets the second lateral boundary
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.SideBoundary1">
            <summary>
            Gets or sets the first side boundary.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurface.SideBoundary2">
            <summary>
            Gets or sets the second side boundary.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.#ctor(Tekla.Structures.Geometry3d.Arc,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BendSurface"/> class from a base arc, a height and a radius at the top.
            This is the recommended constructor if no intermediate points are desired along the lateral boundaries of the bend surface.
            </summary>
            <param name="baseArc">Arc to form the base of the bend surface</param>
            <param name="height">Height of the surface measured along the normal of the arc, may be positive or
            negative, but always nonzero</param>
            <param name="radiusAtHeight">Radius of the arc located at the given height. Must be positive</param>
            <exception cref="T:System.ArgumentException">Thrown if the given lengths are invalid</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.#ctor(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BendSurface"/> class from the cone lateral boundaries and the center line.
            This is the recommended constructor if fine grained control is desired over the lateral boundaries of the surface
            </summary>
            <param name="lateralBoundary1">The first lateral boundary.</param>
            <param name="lateralBoundary2">The second lateral boundary</param>
            <param name="centerLine">The center line of the cone/cylinder</param>
            <param name="rotationAxis">
            A vector normal to the circular cross sections of the surface. It defines the rotation axis from the
            start of a lateral boundary to the end of the same lateral boundary, according to the right hand rule.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BendSurface"/> class with given parameters.
            The boundaries are defined by the side boundaries (i.e. generator lines of the surface).
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1">The first end face normal.</param>
            <param name="endFaceNormal2">The second end face normal.</param>
            <param name="sideBoundary1">The first side boundary.</param>
            <param name="sideBoundary2">The second side boundary.</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if one of the arguments has null value.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BendSurface"/> class with given parameters.
            The boundaries are defined by the lateral boundaries (i.e. the points on the sides of the curved part of the surface).
            The side boundaries are defined by the two first points and the two last points of the lateral boundaries.
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1"> The first end face normal.</param>
            <param name="endFaceNormal2"> The second end face normal.</param>
            <param name="lateralBoundary1"> The first lateral boundary</param>
            <param name="lateralBoundary2"> The second lateral boundary</param>
            <exception cref="T:System.ArgumentNullException"> Throws an exception if one of the arguments is null.</exception>
            <exception cref="T:System.ArgumentException"> Throws this exception if the boundaries are invalid.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.GetFirstFaceNormal">
            <summary>
            Gets the first face normal
            </summary>
            <returns>The face normal of the bend surface at the first face</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.GetSecondFaceNormal">
            <summary>
            Gets the second face normal
            </summary>
            <returns>The face normal of the bend surface at the second face</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.SetLateralBoundaries(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Sets lateral boundaries using side boundaries.
            </summary>
            <param name="sideBoundary1">The first side boundary.</param>
            <param name="sideBoundary2">The second side boundary.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.CreateCollinearSegment(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns a line segment in the same direction as <paramref name="originalSide"/>.
            </summary>
            <param name="originalSide">Side to get direction from.</param>
            <param name="newSide">Side to be checked.</param>
            <returns>Returns a line segment in the same direction as <paramref name="originalSide"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.ModifySideBoundary(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns new line segment as a new side boundary after validations.
            </summary>
            <param name="newSideBoundary">New side segment to set.</param>
            <param name="sideToUpdate">Old side segment to change.</param>
            <returns>Returns new line segment as a new side boundary.</returns>
            <exception cref="T:System.ArgumentException">Throws exception if distance between new side points is too small.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.GetIntersectionLine(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Calculates intersection line between two plates
            </summary>
            <param name="endFaceNormal1">The first end face normal</param>
            <param name="endFaceNormal2">The second end face normal</param>
            <returns>The intersection line.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.IsInwardCurved">
            <summary>
            Calculate Inward/Outward curve flag.
            </summary>
            <returns>True if the curve is oriented towards the intersection line, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.IsConeOrthogonalToIntersection(Tekla.Structures.Geometry3d.Line)">
            <summary>
            Checks if the conical surface is orthogonal to the intersection line
            </summary>
            <param name="intersectionLine">Intersection line of the plates</param>
            <returns>True if the cone is orthogonal to the intersection line, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.GetUShapeCylinderCenterLine(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Gets the center line for a cylinder between parallel plates
            </summary>
            <param name="endFaceNormal1">End face normal of the first face</param>
            <returns>The directed center line</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.GetUShapeConeCenterLine(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Gets the center line of a cone orthogonal to the intersection line of the plates
            </summary>
            <param name="endFaceNormal1">First face end normal</param>
            <returns>The directed center line</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurface.CalculateCenterLine(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Calculates the conical surface center line.
            </summary>
            <param name="endFaceNormal1">First end face normal</param>
            <param name="endFaceNormal2">Second end face normal</param>
        </member>
        <member name="T:Tekla.Structures.Model.BendSurfaceNode">
            <summary>
            The BendSurfaceNode class represents a bend surface geometry tree node.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurfaceNode.#ctor(Tekla.Structures.Model.BendSurface)">
            <summary>
            Initializes a new instance of the BendSurfaceNode class.
            </summary>
            <param name="surface">The contour of the node.</param>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurfaceNode.IsAutomatic">
            <summary>
            Gets a value indicating whether this geometry node was automatically generated (returns false if it was originally a user-defined part)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BendSurfaceNode.Surface">
            <summary>
            Gets the bend surface geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurfaceNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.Model.BendSurfaceNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BentPlateGeometrySolver">
             <summary>
             BentPlateGeometrySolver is a solver class to handle ConnectiveGeometry modification related computations.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                 var contour1 = new Contour();
                 contour1.AddContourPoint(new ContourPoint(new Point(6000.0, 8500.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(6000.0, 6000.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(12000.0, 6000.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(12000.0, 8500.0, 0.0), null));
                 var geometry = new ConnectiveGeometry(contour1);
            
                 var contour2 = new Contour();
                 contour2.AddContourPoint(new ContourPoint(new Point(15000.0, 8500.0, 1000.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(15000.0, 6000.0, 1000.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(19600.0, 6000.0, 3500.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(19600.0, 8500.0, 3500.0), null));
            
                 var radius = 2000.0;
                 var bentPlateGeometrySolver = new BentPlateGeometrySolver();
                 var newGeometry = bentPlateGeometrySolver.AddLeg(geometry, contour2, radius);
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.#ctor">
            <summary>
            Initializes a new instance of the BentPlateGeometrySolver class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.Contour,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Appends a polygon section to ConnectiveGeometry, using the maximal radius for the cylindrical connection, or
            the maximum cone aperture for conical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="polygon">The polygonal contour to add to geometry.</param>
            <param name="bendShape">Shape of the bend that connects the leg</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.Contour)">
            <summary>
            Appends a polygon section to ConnectiveGeometry, using the maximal radius for the cylindrical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="polygon">The polygonal contour to add to geometry.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.Contour,System.Double)">
            <summary>
            Appends a polygon section to this ConnectiveGeometry, using the specified radius for the cylindrical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="radius">the specified radius for the connecting cylindrical section</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.Contour,System.Double,System.Double)">
            <summary>
            Joins a polygon section to this ConnectiveGeometry, using the specified radius and aperture for the conical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="largestRadius">The specified largest radius for the connecting conical section.</param>
            <param name="halfAperture">The angle between the cone generatrix and any of its generator lines.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.Contour,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Appends a polygon section to this ConnectiveGeometry, using the specified connection points and maximal
            radius for the cylindrical connection, or maximum aperture for conical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">the two connection points on this instance geometry</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="segment2">the two connection points on polygon geometry</param>
            <param name="bendShape">Shape of the bend that connects the leg</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.Contour,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Appends a polygon section to this ConnectiveGeometry, using the specified connection points and maximal radius for the cylindrical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">the two connection points on this instance geometry</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="segment2">the two connection points on polygon geometry</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.Contour,Tekla.Structures.Geometry3d.LineSegment,System.Double)">
            <summary>
            Appends a polygon section to this ConnectiveGeometry, using the specified connection points and radius for the cylindrical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">the two connection points on this instance geometry</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="segment2">the two connection points on polygon geometry</param>
            <param name="radius">the specified radius for the connecting cylindrical section</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create or modify ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.Contour,Tekla.Structures.Geometry3d.LineSegment,System.Double,System.Double)">
            <summary>
            Joins a polygon section to this ConnectiveGeometry, using the specified connection points and radius
            and aperture for the conical connection.
            </summary>
            <param name="geometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">The two connection points on this instance geometry.</param>
            <param name="polygon">the polygonal contour to add to this geometry</param>
            <param name="segment2">The two connection points on polygon geometry.</param>
            <param name="largestRadius">The specified largest radius for the connecting conical section.</param>
            <param name="halfAperture">The angle between the cone generatrix and any of its generator lines.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="geometry"/> is a stand-alone bend geometry, meaning
            that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.RemoveLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection)">
            <summary>
            Removes a polygon section which is the end section, from this ConnectiveGeometry including extensions and cylindrical surface.
            </summary>
            <param name="geometry">ConnectiveGeometry used to remove a connection.</param>
            <param name="legSection">Leg GeometrySection to remove.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the supplied legSection is invalid leg section 
            or <paramref name="geometry"/> is a stand-alone bend geometry, meaning that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.Split(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection)">
            <summary>
            Returns the resulting geometry or geometries when a section and the related automatically created sections are removed from this geometry.
            </summary>
            <param name="geometry">ConnectiveGeometry used for split operation.</param>
            <param name="geometrySection">GeometrySection to remove.</param>
            <returns>The resulting geometries once the section and related automatic sections are removed.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the supplied geometrySection is invalid
            or <paramref name="geometry"/> is a stand-alone bend geometry, meaning that the first GeometrySection is a BendSurfaceNode.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyBendSurface(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.BendSurface)">
            <summary>
            Modifies the shape of a bend surface section, and updates related polygon sections accordingly.
            </summary>
            <param name="geometry">Reference geometry to modify which contains cylindricalSection.</param>
            <param name="bendSection">Geometry section to modify.</param>
            <param name="surface">The modified bend surface for the section.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify the bend surface.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyCylindricalSurface(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.CylindricalSurface)">
            <summary>
            Modifies the shape of a cylindrical surface section, and updates related polygon sections accordingly.
            </summary>
            <remarks> Identical to <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyBendSurface(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.BendSurface)"/></remarks>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyRadius(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,System.Double)">
            <summary>
            Modify the radius of a cylindrical section.
            </summary>
            <param name="geometry">Reference geometry to modify which contains cylindricalSection.</param>
            <param name="cylindricalSection">The cylindrical geometry section to modify.</param>
            <param name="radius">The new radius for the cylindrical section.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify radius.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyConicalRadiuses(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,System.Double,System.Double)">
            <summary>
            Modify the radiuses of a conical section, preserving the length of the side boundaries. The order of the
            provided radiuses is not relevant, as the cone vertex will be located on the same side of the plates as
            the original cone section.
            </summary>
            <param name="geometry">Reference geometry to modify which contains conicalSection.</param>
            <param name="conicalSection">The conical geometry section to modify.</param>
            <param name="radius1">New radius one of the cross sections of the cone.</param>
            <param name="radius2">New radius of the other cross section of the cone.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify the geometry.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ScaleConeSection(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,System.Double)">
            <summary>
            Scale the shape of a conical section.
            </summary>
            <param name="geometry">Reference geometry to modify which contains conicalSection.</param>
            <param name="conicalSection">The conical geometry section to modify.</param>
            <param name="scale">Scale to apply to the conical section (greater than 0).</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify the geometry.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ModifyPolygon(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.Contour)">
            <summary>
            Modify the shape of a polygon section, and updates related cylindrical sections accordingly.
            </summary>
            <param name="geometry">Reference geometry to modify which contains polygonSection.</param>
            <param name="polygonSection">A polygon section from geometry to modify.</param>
            <param name="points">The modified contour for the section.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="geometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify polygon.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.SetMainSection(Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.ConnectiveGeometry)">
            <summary>
            Sets <paramref name="newMainSection"/> as a main section of <paramref name="geometry"/>.
            </summary>
            <param name="newMainSection">Geometry section to set as main section.</param>
            <param name="geometry">Connective geometry to modify.</param>
            <returns>Connective geometry with <paramref name="newMainSection"/> as main section.</returns>
            <exception cref="T:System.ArgumentException">Throws an <see cref="T:System.ArgumentException"/> exception
            if the input <paramref name="newMainSection"/> is not a polygon section.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.SetBendAngle(System.Double,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.ConnectiveGeometry)">
            <summary>
            Sets <paramref name="angle"/> as the angle of curved section <paramref name="sectionToSetAngle"/>
            and modifies <paramref name="geometry"/> starting from <paramref name="sectionToMove"/>.
            </summary>
            <param name="angle">Angle in degrees to set.</param>
            <param name="sectionToSetAngle">Curved section to set <paramref name="angle"/> value.</param>
            <param name="sectionToMove">Could be curved or plate section, used to know which side of chain to modify.</param>
            <param name="geometry">Geometry of the bent plate to modify.</param>
            <returns>Returns modified geometry with on success or initial geometry on fail.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the maximum radius for the cylindrical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="geometryToAdd">the geometry instance to be joined to this</param>
            <param name="bendShape">Shape of the bend that connects the leg</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.ConnectiveGeometry,System.Double)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the specified radius for the cylindrical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="geometryToAdd">The geometry instance to be joined to this one.</param>
            <param name="radius">The specified radius for the connecting cylindrical section.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.ConnectiveGeometry,System.Double,System.Double)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the specified radius and aperture for the conical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="geometryToAdd">The geometry instance to be joined to this one.</param>
            <param name="largestRadius">The specified largest radius for the connecting conical section.</param>
            <param name="halfAperture">The angle between the cone generatrix and any of its generator lines.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the specified connection points for the cylindrical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">The two connection points on this instance geometry.</param>
            <param name="geometryToAdd">The geometry instance to be joined to this one.</param>
            <param name="segment2">The two connection points on polygon geometry.</param>
            <param name="bendShape">Shape of the bend that connects the leg</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the specified connection points and radius for the cylindrical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">The two connection points on this instance geometry.</param>
            <param name="geometryToAdd">The geometry instance to be joined to this one.</param>
            <param name="segment2">The two connection points on polygon geometry.</param>
            <param name="radius">The specified radius for the connecting cylindrical section.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double,System.Double)">
            <summary>
            Joins another ConnectiveGeometry to this instance, using the specified connection points and radius
            and aperture for the conical connection.
            </summary>
            <param name="originalGeometry">ConnectiveGeometry used to create a connection with.</param>
            <param name="segment1">The two connection points on this instance geometry.</param>
            <param name="geometryToAdd">The geometry instance to be joined to this one.</param>
            <param name="segment2">The two connection points on polygon geometry.</param>
            <param name="largestRadius">The specified largest radius for the connecting conical section.</param>
            <param name="halfAperture">The angle between the cone generatrix and any of its generator lines.</param>
            <returns>Modified ConnectiveGeometry if command succeeded or <paramref name="originalGeometry"/> otherwise.</returns>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.TransformPointToGlobal(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Return point in global coordinate system.
            </summary>
            <param name="point">Point to transform.</param>
            <returns>Return point in global coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.IsStandAloneGeometry(Tekla.Structures.Model.ConnectiveGeometry)">
            <summary>
            Checks if the given geometry is stand-alone bent plate or not.
            </summary>
            <param name="geometry">Geometry to check.</param>
            <returns>True if the given geometry is stand-alone geometry, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlateGeometrySolver.ThrowConnectiveGeometryException(Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus)">
            <summary>
            Throws an exception based on <paramref name="status"/>
            </summary>
            <param name="status">Result error status of the creation/modification of connective geometry instance.</param>
        </member>
        <member name="T:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus">
            <summary>
            Define possible statuses for geometry creation/modification commands.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.Success">
            <summary>
            Status on success creation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.Failure">
            <summary>
            General failure mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.FacePerpendicularToIntersectionLine">
            <summary>
            Face perpendicular to intersection line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.PlateIntersectsWithIntersectionLine">
            <summary>
            Plate polygon extends beyond intersection line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.ExtensionIntersectsWithPlate">
            <summary>
            Extension plate clashes with plates.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.FacesTooNearEachOther">
            <summary>
            Faces to be connected overlap.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.FacesAtAnObtuseAngle">
            <summary>
            Faces to be connected are too steep of an angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.UndefinedCurveDirection">
            <summary>
            Can't make inward/outward curve check.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.UnsupportedChamfer">
            <summary>
            Plates containing unsupported chamfer information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.InvalidRadius">
            <summary>
            Cannot connect parts with a cylindrical section having the provided radius.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus.InvalidFacePoints">
            <summary>
            Cannot create geometry from requested face points.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ConicalSurface">
            <summary>
            The ConicalSurface class defines a conical surface contour.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ConicalSurface.Radiuses">
            <summary>
            Gets radiuses of the conical surface. The first radius corresponds to the section located in the first
            point of the side boundary 1, and the second radius corresponds to the section located in the second point
            of the side boundary 1.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ConicalSurface.Apex">
            <summary>
            Gets the apex of the cone. If it does not exist, it returns null
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ConicalSurface"/> class with given parameters.
            The boundaries are defined by the side boundaries (i.e. generator lines of the cone).
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1">The first end face normal.</param>
            <param name="endFaceNormal2">The second end face normal.</param>
            <param name="sideBoundary1">The first side boundary.</param>
            <param name="sideBoundary2">The second side boundary.</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if one of the arguments has null value.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ConicalSurface"/> class with given parameters.
            The boundaries are defined by the lateral boundaries (i.e. the points on the sides of the curved part of the cone).
            The side boundaries are defined by the two first points and the two last points of the lateral boundaries.
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1"> The first end face normal.</param>
            <param name="endFaceNormal2"> The second end face normal.</param>
            <param name="lateralBoundary1"> The first lateral boundary</param>
            <param name="lateralBoundary2"> The second lateral boundary</param>
            <exception cref="T:System.ArgumentNullException"> Throws an exception if one of the arguments is null.</exception>
            <exception cref="T:System.ArgumentException"> Throws this exception if the boundaries are invalid.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurface.#ctor(Tekla.Structures.Geometry3d.Arc,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ConicalSurface"/> class from a base arc, a height and a radius at the top.
            This is the recommended constructor if no intermediate points are desired along the lateral boundaries of the bend surface.
            </summary>
            <param name="baseArc">Arc to form the base of the bend surface</param>
            <param name="height">Height of the surface measured along the normal of the arc, may be positive or
            negative, but always nonzero</param>
            <param name="radiusAtHeight">Radius of the arc located at the given height. Must be positive</param>
            <exception cref="T:System.ArgumentException">Thrown if the given lengths are invalid</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurface.#ctor(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ConicalSurface"/> class from the cone lateral boundaries and the center line.
            This is the recommended constructor if fine grained control is desired over the lateral boundaries of the surface.
            </summary>
            <param name="lateralBoundary1">The first lateral boundary.</param>
            <param name="lateralBoundary2">The second lateral boundary</param>
            <param name="centerLine">The center line of the cone/cylinder</param>
            <param name="rotationAxis">
            A vector normal to the circular cross sections of the cone. It defines the rotation axis from the
            start of a lateral boundary to the end of the same lateral boundary, according to the right hand rule.
            </param>
        </member>
        <member name="T:Tekla.Structures.Model.ConicalSurfaceNode">
            <summary>
            The ConicalSurfaceNode class represents conical surface geometry tree node.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurfaceNode.#ctor(Tekla.Structures.Model.ConicalSurface)">
            <summary>
            Initializes a new instance of the ConicalSurfaceNode class.
            </summary>
            <param name="surface">The contour of the node.</param>
        </member>
        <member name="P:Tekla.Structures.Model.ConicalSurfaceNode.Surface">
            <summary>
            Gets the conical surface geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurfaceNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern.
            </summary>
            <remarks> Does nothing </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ConicalSurfaceNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns> A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ConnectiveGeometry">
             <summary>
             A class for geometry formed of several geometry sections. Geometry is initialized with polygon geometry
             and then can be extended by calling one of AddLeg methods using BentPlateGeometrySolver class.
             In the case of success, two polygon geometries will be connected by cylindrical surface geometry possibly
             with help of additional polygon geometries.
             Resulted geometry, then, can be set to bent plate.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                 var contour1 = new Contour();
                 contour1.AddContourPoint(new ContourPoint(new Point(6000.0, 8500.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(6000.0, 6000.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(12000.0, 6000.0, 0.0), null));
                 contour1.AddContourPoint(new ContourPoint(new Point(12000.0, 8500.0, 0.0), null));
                 var geometry = new ConnectiveGeometry(contour1);
            
                 var contour2 = new Contour();
                 contour2.AddContourPoint(new ContourPoint(new Point(15000.0, 8500.0, 1000.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(15000.0, 6000.0, 1000.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(19600.0, 6000.0, 3500.0), null));
                 contour2.AddContourPoint(new ContourPoint(new Point(19600.0, 8500.0, 3500.0), null));
            
                 var radius = 2000.0;
                 var bentPlateGeometrySolver = new BentPlateGeometrySolver();
                 var newGeometry = bentPlateGeometrySolver.AddLeg(geometry, contour2, radius);
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.ConnectiveGeometry.InvalidGeometrySectionIndex">
            <summary>
            An invalid geometry section index.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.#ctor(Tekla.Structures.Model.Contour)">
            <summary>
            Initializes a new instance of the ConnectiveGeometry class.
            </summary>
            <param name="contour">The polygon geometry</param>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.#ctor(Tekla.Structures.Model.BendSurface)">
            <summary>
            Initializes a new instance of the ConnectiveGeometry class for a stand-alone bend creation.
            </summary>
            <param name="bendSurface">Conical or cylindrical surface geometry.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.#ctor(Tekla.Structures.ModelInternal.GeometryTree)">
            <summary>
            Initializes a new instance of the ConnectiveGeometry class.
            </summary>
            <param name="geometry">the initial geometry</param>
        </member>
        <member name="P:Tekla.Structures.Model.ConnectiveGeometry.InternalGeometry">
            <summary>
            Gets or sets the internal geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.IsEmpty">
            <summary>
            Checks whether the geometry is degenerate
            </summary>
            <returns>True, if the geometry does not contain any section.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.GetGeometryEnumerator">
            <summary>
            Gets a new geometry sections enumerator for enumerating through the geometry sections.
            </summary>
            <returns>The new geometry sections enumerator.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.GetNeighborSections(Tekla.Structures.Model.GeometrySection)">
            <summary>
            Gets neighbor sections of the geometrySection inside this ConnectiveGeometry.
            </summary>
            <param name="geometrySection">GeometrySection to get neighbors for.</param>
            <returns>List of neighbor GeometrySection of the given GeometrySection.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.GetGeometryLegSections">
            <summary>
            Gets geometry end GeometrySections which are possible to remove.
            </summary>
            <returns>Returns List of the removable GeometrySections.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometry.GetConnection(Tekla.Structures.Model.GeometrySection,Tekla.Structures.Model.GeometrySection)">
            <summary>
            Returns 2 connecting line segments between geometrySection1 and geometrySection2 sections, if sections are connected, otherwise returns empty list.
            </summary>
            <param name="geometrySection1">The first GeometrySection.</param>
            <param name="geometrySection2">The second GeometrySection.</param>
            <returns>2 connecting line segments if sections are connected, otherwise returns empty list.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ConnectiveGeometryException">
            <summary>
            The ConnectiveGeometryException class represents an error that occurred during the ConnectiveGeometry creation or modification.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ConnectiveGeometryException.OperationStatus">
            <summary>
            Possible error statuses for geometry creation/modification commands.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometryException.#ctor">
            <summary>
            Initializes a new instance of the ConnectiveGeometryException class with general connective geometry error message.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ConnectiveGeometryException.#ctor(Tekla.Structures.Model.BentPlateGeometrySolver.OperationStatus,System.String)">
            <summary>
            Initializes a new instance of the ConnectiveGeometryException class with connective geometry error message based on <paramref name="status"/>.
            </summary>
            <param name="status">Possible error statuses for geometry creation/modification commands.</param>
            <param name="errorMessage">The message that describes the error status.</param>
        </member>
        <member name="T:Tekla.Structures.Model.GeneralConnectiveGeometryException">
            <summary>
            The GeneralConnectiveGeometryException class represents a general error that occurred during the ConnectiveGeometry creation or modification.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GeneralConnectiveGeometryException.#ctor">
            <summary>
            Initializes a new instance of the GeneralConnectiveGeometryException class with "Failed to create or modify connective geometry" message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ExtensionIntersectsWithPlateException">
            <summary>
            The ExtensionIntersectsWithPlateException class represents an error when extension plate clashes with plates.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ExtensionIntersectsWithPlateException.#ctor">
            <summary>
            Initializes a new instance of the ExtensionIntersectsWithPlateException class with "extension plate clashes with plates" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.FacesTooNearEachOtherException">
            <summary>
            The FacesTooNearEachOtherException class represents an error when, faces to be connected overlap.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.FacesTooNearEachOtherException.#ctor">
            <summary>
            Initializes a new instance of the ExtensionIntersectsWithPlateException class with "faces to be connected overlap" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.FacePerpendicularToIntersectionLineException">
            <summary>
            The FacePerpendicularToIntersectionLineException class represents an error when, face perpendicular to intersection line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.FacePerpendicularToIntersectionLineException.#ctor">
            <summary>
            Initializes a new instance of the FacePerpendicularToIntersectionLineException class with "face perpendicular to intersection line" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.FacesAtAnObtuseAngleException">
            <summary>
            The FacesAtAnObtuseAngleException class represents an error when, faces to be connected are too steep of an angle.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.FacesAtAnObtuseAngleException.#ctor">
            <summary>
            Initializes a new instance of the FacesAtAnObtuseAngleException class with "Faces to be connected are too steep of an angle" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UndefinedCurveDirectionException">
            <summary>
            The UndefinedCurveDirectionException class represents an error when, cannot make inward/outward curve check.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UndefinedCurveDirectionException.#ctor">
            <summary>
            Initializes a new instance of the UndefinedCurveDirectionException class with "Cannot make inward/outward curve check" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PlateIntersectsWithIntersectionLineException">
            <summary>
            The PlateIntersectsWithIntersectionLineException class represents an error when, plate polygon extends beyond intersection line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PlateIntersectsWithIntersectionLineException.#ctor">
            <summary>
            Initializes a new instance of the PlateIntersectsWithIntersectionLineException class with "Plate polygon extends beyond intersection line" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UnsupportedChamferException">
            <summary>
            The UnsupportedChamferException class represents an error when, plates containing unsupported chamfer information.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UnsupportedChamferException.#ctor">
            <summary>
            Initializes a new instance of the UnsupportedChamferException class with "Plates containing unsupported chamfer information" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InvalidRadiusException">
            <summary>
            The InvalidRadiusException class represents an error when, cannot connect parts with a cylindrical section having the provided radius.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InvalidRadiusException.#ctor">
            <summary>
            Initializes a new instance of the InvalidRadiusException class with "Cannot connect parts with a cylindrical section having the provided radius" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InvalidFacePointsException">
            <summary>
            The InvalidFacePointsException class represents an error when, cannot create geometry from requested face points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InvalidFacePointsException.#ctor">
            <summary>
            Initializes a new instance of the InvalidFacePointsException class with "Cannot create geometry from requested face points" error message.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Contour">
            <summary>
            The Contour class defines a possibly chamfered contour. Contours must not have loops.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Contour.MAX_CONTOUR_POINTS">
            <summary>
            The maximum number of contour points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Contour.MIN_CONTOUR_POINTS">
            <summary>
            The minimum number of contour points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Contour.OLD_MAX_CONTOUR_POINTS">
            <summary>
            The old maximum contour points
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Contour.MAX_POLYBEAM_POINTS">
            <summary>
            The maximum polybeam points
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Contour._ContourPoints">
            <summary>
            The contour points
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Contour.ContourPoints">
            <summary>
            The contour points belonging to the contour.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.#ctor">
            <summary>
            Instantiates an empty contour.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a new contour point to the contour. Do not add the same contour point twice.
            </summary>
            <param name="Point">The contour point to add.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.CalculatePolygon(Tekla.Structures.Model.Polygon@)">
            <summary>
            Calculate a polygon approximating the contour with chamfers evaluated.
            </summary>
            <param name="polygon">The calculated <see cref="T:Tekla.Structures.Model.Polygon"/>.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.ToList(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            Exports contour points to the list to transfer to core.
            </summary>
            <param name="contour">The contour points.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Contour.FromList(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t})">
            <summary>
            Imports contour points from the list.
            </summary>
            <param name="contour">The contour points.</param>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPoint">
            <summary>
            The ContourPoint class defines a point with possible chamfering information,
            used, for example, to define a contour plate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPoint.Chamfer">
            <summary>
            The chamfer for the contour point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.#ctor">
            <summary>
            Creates a new contour point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.Chamfer)">
            <summary>
            Creates a new contour point using the given point and chamfer.
            </summary>
            <param name="P">The point (with X, Y and Z coordinates) to be used.</param>
            <param name="C">The chamfer to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPoint.SetPoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Sets the point's coordinates for the contour point.
            </summary>
            <param name="P">The point.</param>
        </member>
        <member name="T:Tekla.Structures.Model.CylindricalSurface">
            <summary>
            The CylindricalSurface class defines a cylindrical surface contour.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.CylindricalSurface.Radius">
            <summary>
            Gets radius of the cylindrical surface.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.CylindricalSurface"/> class with given parameters.
            The boundaries are defined by the side boundaries (i.e. generator lines of the cylinder).
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1">The first end face normal.</param>
            <param name="endFaceNormal2">The second end face normal.</param>
            <param name="sideBoundary1">The first side boundary.</param>
            <param name="sideBoundary2">The second side boundary.</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if one of the arguments has null value.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurface.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.CylindricalSurface"/> class with given parameters.
            The boundaries are defined by the lateral boundaries (i.e. the points on the sides of the curved part of the cylinder).
            The side boundaries are defined by the two first points and the two last points of the lateral boundaries.
            </summary>
            <remarks>This constructor may be numerically instable if the end faces are very close</remarks>
            <param name="endFaceNormal1"> The first end face normal.</param>
            <param name="endFaceNormal2"> The second end face normal.</param>
            <param name="lateralBoundary1"> The first lateral boundary</param>
            <param name="lateralBoundary2"> The second lateral boundary</param>
            <exception cref="T:System.ArgumentNullException"> Throws an exception if one of the arguments is null.</exception>
            <exception cref="T:System.ArgumentException"> Throws this exception if the boundaries are invalid.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurface.#ctor(Tekla.Structures.Geometry3d.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.CylindricalSurface"/> class from a base arc and a height.
            This is the recommended constructor if no intermediate points are desired along the lateral boundaries of the bend surface.
            </summary>
            <param name="baseArc">Arc to form the base of the bend surface</param>
            <param name="height">Height of the surface measured along the normal of the arc, may be positive or
            negative, but always nonzero</param>
            <exception cref="T:System.ArgumentException">Thrown if the given lengths are invalid</exception>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurface.#ctor(System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Geometry3d.Line,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.CylindricalSurface"/> class from the cone lateral boundaries and the center line.
            This is the recommended constructor if fine grained control is desired over the lateral boundaries of the surface.
            </summary>
            <param name="lateralBoundary1">The first lateral boundary.</param>
            <param name="lateralBoundary2">The second lateral boundary</param>
            <param name="centerLine">The center line of the cone/cylinder</param>
            <param name="rotationAxis">
            A vector normal to the circular cross sections of the cylinder. It defines the rotation axis from the
            start of a lateral boundary to the end of the same lateral boundary, according to the right hand rule.
            </param>
        </member>
        <member name="T:Tekla.Structures.Model.CylindricalSurfaceNode">
            <summary>
            The CylindricalSurfaceNode class represents cylindrical surface geometry tree node.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurfaceNode.#ctor(Tekla.Structures.Model.CylindricalSurface)">
            <summary>
            Initializes a new instance of the CylindricalSurfaceNode class.
            </summary>
            <param name="surface">The contour of the node.</param>
        </member>
        <member name="P:Tekla.Structures.Model.CylindricalSurfaceNode.Surface">
            <summary>
            Gets the cylindrical surface geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurfaceNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.Model.CylindricalSurfaceNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.GeometrySection">
            <summary>
            The GeometrySection class represents geometry node with its identifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GeometrySection.index">
            <summary>
            The index of the section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GeometrySection.node">
            <summary>
            The geometry section.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GeometrySection.#ctor(System.Int32,Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.GeometrySection" /> class.
            </summary>
            <param name="index">The index of the node.</param>
            <param name="node">The geometry node.</param>
        </member>
        <member name="P:Tekla.Structures.Model.GeometrySection.Index">
            <summary>
            Gets the index of the node
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GeometrySection.GeometryNode">
            <summary>
            Gets the geometry node
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.GeometrySectionEnumerator">
            <summary>
            The GeometrySectionEnumerator class is used to enumerate the geometry sections of a bent plate geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GeometrySectionEnumerator.nodeIndexList">
            <summary>
            The list of geometry sections.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GeometrySectionEnumerator.position">
            <summary>
            The enumerator position.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GeometrySectionEnumerator.#ctor(System.Collections.Generic.Dictionary{System.Int32,Tekla.Structures.Model.IGeometryNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.GeometrySectionEnumerator"/> class.
            This constructor should only be called from connective geometry.
            </summary>
            <param name="nodes">The collection containing nodes to enumerate.</param>
        </member>
        <member name="P:Tekla.Structures.Model.GeometrySectionEnumerator.Current">
            <summary>
            Gets the current geometry section.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GeometrySectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current geometry section.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GeometrySectionEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator.
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GeometrySectionEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.IGeometryNode">
            <summary>
            The IGeometryNode interface represents geometry tree node. This is implemented by concrete classes for the various types of geometry nodes
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.IGeometryNode.IsAutomatic">
            <summary>
            Gets a value indicating whether this geometry node was automatically generated (i.e. false if it was originally a user-defined part)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.IGeometryNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.Model.IGeometryNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.IGeometryNodeVisitor">
            <summary>
            The IGeometryNodeVisitor interface is implemented by classes visiting geometry nodes
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.IGeometryNodeVisitor.Visit(Tekla.Structures.Model.PolygonNode)">
            <summary>
            Visits a node that is an instance of PolygonNode node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Tekla.Structures.Model.IGeometryNodeVisitor.Visit(Tekla.Structures.Model.CylindricalSurfaceNode)">
            <summary>
            Visits a node that is an instance of CylindricalSurfaceNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Tekla.Structures.Model.IGeometryNodeVisitor.Visit(Tekla.Structures.ModelInternal.SpiralNode)">
            <summary>
            Visits a node that is an instance of HelixNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Tekla.Structures.Model.Plane">
            <summary>
            The Plane class defines a plane in space using an origin, an X-axis and a Y-axis. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Plane Plane = new Plane();
                       Plane.Origin = new Point(500, 0, 0);
                       Plane.AxisX = new Vector(500, 1000, 0);
                       Plane.AxisY = new Vector(500, 0, -1000);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.Origin">
            <summary>
            The origin of the plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.AxisX">
            <summary>
            The X-axis of the plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Plane.AxisY">
             <summary>
            The Y-axis of the plane.
             </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.#ctor">
            <summary>
            Initializes a new plane instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.ToStruct(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Plane.FromStruct(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Polygon">
            <summary> The Polygon class represents a polygon object that has its corners at the given points. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polygon.MAX_POLYGON_POINTS">
            <summary>
            The maximum number of polygon points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polygon.MIN_POLYGON_POINTS">
            <summary>
            The minimum number of polygon points that is typically valid in Tekla Structures.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Polygon.Points">
            <summary> The corners of the polygon. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.#ctor">
            <summary> Initializes a new polygon instance with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.ToStruct(Tekla.Structures.ModelInternal.dotPolygon_t@)">
            <summary> 
            </summary>
            <param name="DotPolygon"></param>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.FromStruct(Tekla.Structures.ModelInternal.dotPolygon_t@)">
            <summary> 
            </summary>
            <param name="DotPolygon"></param>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.ToList(System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@)">
            <summary>
            Exports polygon points to the list to transfer to the core.
            </summary>
            <param name="polygon">The polygon points.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Polygon.FromList(System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t})">
            <summary>
            Imports polygon points from the list transferred from the core.
            </summary>
            <param name="polygon">The polygon points.</param>
        </member>
        <member name="T:Tekla.Structures.Model.PolygonNode">
            <summary>
            The PolygonNode class represents flat geometry tree node.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonNode.#ctor(Tekla.Structures.Model.Contour,System.Boolean)">
            <summary>
            Initializes a new instance of the PolygonNode class.
            </summary>
            <param name="contour">The contour points of the node.</param>
            <param name="isAutomaticNode">true if the node represents an automatically generated extension.</param>
        </member>
        <member name="P:Tekla.Structures.Model.PolygonNode.IsAutomatic">
            <summary>
            Gets a value indicating whether this geometry node was automatically generated (returns false if it was originally a user-defined part)
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PolygonNode.Contour">
            <summary>
            Gets or sets the contour points of flat geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Polymesh">
            <summary> The Polygon class represents a polygon object that has its corners at the given points. </summary>
            <summary> The Polygon class represents a polygon object that has its corners at the given points. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Polymesh.Brep">
            <summary>
            Gets or sets the polymesh that forms the object geometry.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.ConvertToStruct(Tekla.Structures.Geometry3d.FacetedBrep,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            Converts a <code>FacetedBrep</code> to struct dot polymesh.
            </summary>
            <param name="brep">The input brep polymesh</param>
            <param name="output">The output dot polymesh</param>
            <returns>The converted polymesh instances</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.Fingerprint(Tekla.Structures.Geometry3d.FacetedBrep)">
            <summary>
            Gets fingerprint information for input brep
            </summary>
            <param name="brep">The input parameter</param>
            <returns>Fingerprint of the brep in string format</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.CompareFingerprints(System.String,System.String)">
            <summary>
            Compares two fingerprints
            </summary>
            <param name="fingerprint1">The input parameter</param>
            <param name="fingerprint2">The input parameter2</param>
            <returns>True if fingerprints match, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.Convert(Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            Converts a struct of polymeshes to a list of <code>FacetedBrep</code>.
            </summary>
            <param name="input">The input parameter</param>
            <returns>The converted polymesh instances</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.ToStruct(Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            Converts a <code>FacetedBrep</code> to dotnet polymesh struct.
            </summary>
            <param name="output">
            The output parameter.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.FromStruct(Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            Converts a struct of polymesh to a <code>FacetedBrep</code>.
            </summary>
            <param name="input">The input parameter</param>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.Validate(Tekla.Structures.Geometry3d.FacetedBrep,Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum}}@)">
            <summary>
            Converts a <code>FacetedBrep</code> to a polymesh and validates.
            </summary>
            <param name="brep">The FacetedBrep to be converted and validated</param>
            <param name="checkCriteria">The flags to indicate what to check</param>
            <param name="invalidInfo">The problematic faces' indices and their failed reasons,
            (-1, PolymeshUndefined) is for unknown reason for uncertain face.
            No inner loops checked further if outer loop found error.</param>
            <returns>True if valid, false if error found</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.GetSolidBrep(Tekla.Structures.Geometry3d.FacetedBrep,Tekla.Structures.Geometry3d.FacetedBrep@)">
            <summary>
            Gets the cleaned Brep
            </summary>
            <param name="inBrep">FacetedBrep to be cleaned</param>
            <param name="outBrep">Cleaned facetedBrep</param>
            <returns>True if Brep can create a valid solid, false if outBrep is nonsolid</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum">
            <summary>
            Polymesh check error result codes. See the PolymeshCheckerFlags to see how to set the various checks.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.PolymeshLevelError">
            <summary>
            The vertex array contains vertices that are geometrically equivalent or
            the polymesh contains unused vertices
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.PolymeshUndefined">
            <summary>
            Polymesh is null, the creation failed or unknown reasons.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.PolymeshOk">
            <summary>
            Valid polymesh
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NumOfVerticesOuterloop">
            <summary>
            Number of vertices in outer loop too small
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NumOfVerticesInnerloop">
            <summary>
            Number of vertices in innerloop too small
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexArrayOuterloop">
            <summary>
            Check of indices of vertices in outer loop failed
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexArrayInnerloop">
            <summary>
            Check of indices of vertices in the innerloop failed
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.InnerloopNotInsideOuterloop">
            <summary>
            Inner loop is not inside the outer loop
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexArrayForListOfEdges">
            <summary>
            Check of indices of vertices for edge list failed
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NonPlanarOuterloop">
            <summary>
            Outer loop points are not in the same plane with each other
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NonPlanarInnerloop">
            <summary>
            Inner loop points are not in the same plane with each other or with outer loop
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.SelfIntersectingOuterloop">
            <summary>
            Outer loop is self-intersecting
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.SelfIntersectingInnerloop">
            <summary>
            Inner loop is self-intersecting
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.LoopNormalsInvalid">
            <summary>
            Inner loop normal direction should be opposite to outer loop
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.FaceEdgesInvalidOrientation">
            <summary>
            Two neighbor faces with common edge have wrong orientation
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.FaceEdgesPartlyInvalidOrientation">
            <summary>
            Two neighbor faces with partly common edge have wrong orientation
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.MultishellPolymesh">
            <summary>
            Polymesh consists topologically of multiple shells
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.MultishellPolymeshByGeometry">
            <summary>
            Polymesh consists geometrically of multiple shells
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NumberOfFaces">
            <summary>
            Number of faces too small
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexArrayUniqueness">
            <summary>
            The vertex array contains vertices that are geometrically equivalent
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexDuplicatesOnPolygon">
            <summary>
            The same vertex index appears at least twice for a face
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.VertexCollinearOnPolygon">
            <summary>
            The face has at least one vertex that is collinear with others on an edge
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.NonManifoldEdges">
            <summary>
            The polymesh contains non-manifold edges
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshHealthCheckEnum.UnusedVertices">
            <summary>
            The polymesh contains unused vertices
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags">
            <summary>
            Polymesh check flags, please refer to PolymeshHealthCheckEnum for the corresponding result values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.None">
            <summary>Perform no check</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.LoopVertexUnique">
            <summary>To check that no two consecutive vertex index may be the same.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.VerticesOnSameEdge">
            <summary>To check outerloop vertices on same edge, distance tolerance 0.01.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.OuterloopPlanarity">
            <summary>To check outerloop's planarity, IN_PLANE_EPSILON 1.0e-3.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.OuterloopSelfIntersection">
            <summary>To check if outerloop intersects itself, EPSILON 1.E-4</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.InnerloopPlanarity">
            <summary>To check innterloop's planarity, IN_PLANE_EPSILON 1.0e-3.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.InnerloopSelfIntersection">
            <summary>To check if innerloop intersects itself, EPSILON 1.E-4.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.InnerloopInsideOuterloop">
            <summary>To check if innerloop inside outerloop, EPSILON 1.E-4.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.LoopNormalValidity">
            <summary>The inner loop is oriented clockwise, the opposite of the outer loop (counterclockwise).</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.FaceEdgeOrientation">
            <summary>To check face's edge orientation.</summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.Multishellness">
            <summary>To check are there more than one topologically connected components in the polymesh.
            This checks only through vertex indexes.
            </summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.MultishellnessGeometrical">
            <summary>To check are there more than one geometrically connected components in the polymesh.
            Check with all vertex edge face position containment (includes partial edge touching cases).
            This check can be slow, the behavior is O(n^2).
            </summary> 
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.VerticesOnSamePosition">
            <summary>To check if there are any vertices that are in the same location, EPSILON 0.01.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.UnusedVertices">
            <summary>To check if there are any unused vertices in the vertex array.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.NonManifoldEdges">
            <summary>Are there non-manifold edges (indirect edge vertices are found for more than 2 faces).</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.NullFaces">
            <summary>To check if all vertices of the face are linearly dependent,
            or having less than 3 vertices, or smaller than allowed edges.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Polymesh.PolymeshCheckerFlags.All">
            <summary>To check all criteria.</summary> 
        </member>
        <member name="M:Tekla.Structures.Model.Polymesh.ConvertInvalidInfoFromStruct(Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t@)">
            <summary>
            Convert a struct of invalid info to a list of pairs of outer loop index and error code.
            Read indexes and error codes from the integer list. 
            </summary>
            <param name="input">Invalid info passed from TS core</param>
            <returns>A list of pairs of outer loop index, error code</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Geometry.Rotation3D">
            <summary>Represents 3d rotation of object.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Geometry.Rotation3D.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> class.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Geometry.Rotation3D.#ctor(Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> class.</summary>
            <param name="axisX">The X direction, must be unit.</param>
            <param name="axisY">The Y direction, must be unit and perpendicular to axisX.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Geometry.Rotation3D.AxisX">
            <summary>Gets the X direction.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.Geometry.Rotation3D.AxisY">
            <summary>Gets the Y direction.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.Geometry.Rotation3D.AxisZ">
            <summary>Gets the Z direction.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Geometry.Rotation3D.FromZRotation(Tekla.Structures.Datatype.Angle)">
            <summary>Creates <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> which represents rotation around the Z axis.</summary>
            <param name="angle">The rotation andle.</param>
            <returns><see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> instance whcih represents the Z rotation.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Geometry.Rotation3D.Equals(Tekla.Structures.Model.Geometry.Rotation3D,System.Double)">
            <summary>Compares with another rotation.</summary>
            <param name="other">The other rotation.</param>
            <param name="tolerance">Comparison tolerance.</param>
            <returns>True if found equal, false otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SpiralBeamDataException">
            <summary>
            The SpiralBeamDataException class represents an error that occurred during the spiral beam creation or modification.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SpiralBeamDataException.ErrorStatus">
            <summary>
            Contains error status during spiral beam creation/modification.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeamDataException.#ctor(Tekla.Structures.Model.SpiralBeam.ErrorStatus,System.String)">
            <summary>
            Initializes a new instance of the SpiralBeamDataException class with spiral beam error message based on <paramref name="status"/>.
            </summary>
            <param name="status"></param>
            <param name="message"></param>
        </member>
        <member name="T:Tekla.Structures.Model.TransformationPlane">
            <summary>
            The TransformationPlane class describes a transformation from global model coordinates
            to local and back to global.
            </summary>
            <example>
            The following example shows how to use transformation planes for transforming points:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model myModel = new Model();
                       WorkPlaneHandler myWorkPlaneHandler = myModel.GetWorkPlaneHandler();
                       Beam myBeam = new Beam();
                       Point Point1 = new Point();
                       Point Point2 = new Point();
            
                       TransformationPlane currentPlane = myWorkPlaneHandler.GetCurrentTransformationPlane();
                       TransformationPlane beamPlane = new TransformationPlane(myBeam.GetCoordinateSystem());
                       Point lPoint1 = beamPlane.TransformationMatrixToLocal.Transform(currentPlane.TransformationMatrixToGlobal.Transform(Point1));
                       Point lPoint2 = beamPlane.TransformationMatrixToLocal.Transform(currentPlane.TransformationMatrixToGlobal.Transform(Point2));
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor">
            <summary>
            Creates a new identity transformation using the global coordinate system.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor(Tekla.Structures.Geometry3d.CoordinateSystem)">
            <summary>
            Creates a new transformation plane defined by the given coordinate system.
            </summary>
            <param name="CoordinateSystem">The coordinate system to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Creates a new transformation plane defined by the given origin and two vectors.
            </summary>
            <param name="Origo">The origin to be used.</param>
            <param name="Xvector">The X vector to be used.</param>
            <param name="Yvector">The Y vector to be used.</param>
        </member>
        <member name="P:Tekla.Structures.Model.TransformationPlane.TransformationMatrixToGlobal">
            <summary>
            Gives a transformation matrix for converting local points in the transformation plane to global coordinates.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TransformationPlane.TransformationMatrixToLocal">
            <summary>
            Gives a transformation matrix for converting points in the global plane to local coordinates in the transformation plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TransformationPlane.ToString">
            <summary>
            Returns a string representation of the matrices that transform to local and global coordinates.
            </summary>
            <returns>A string representation of the matrices that transform to local and global coordinates.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlArc">
            <summary>
            The ControlArc class defines a user defined arc helping in modeling work.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlArc.geometry">
            <summary>
            Contains the internal arc geometry
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlArc.Color">
            <summary>
            Gets or sets color of the control arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlArc.LineType">
            <summary>
            The line type of the control arc.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlArc.Geometry">
            <summary>
            Gets or sets the arc geometry. The arc must not represent a complete circle (i.e. the arc angle must be
            less than 360 degrees).
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the input arc is a complete circle</exception>"
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.#ctor">
            <summary>
            Creates a new control arc instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>CenterPoint = Point(0.0, 0.0, 0.0);</item>
            <item>StartPoint = Point(0.0, 1000.0, 0.0);</item>
            <item>EndPoint = Point(1000.0, 0.0, 0.0);</item>
            <item>Color = ControlObjectColorEnum.YELLOW;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Creates a new control arc instance taking the 3 points.
            </summary>
            <param name="startPoint">Start point of the arc.</param>
            <param name="endPoint">End point of the arc.</param>
            <param name="pointOnArc">Point that defines the arc.</param>
            <exception cref="T:System.ArgumentException">Throws when input points are not defined correctly</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.Delete">
            <summary>
            Deletes the control arc with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.Insert">
            <summary>
            Inserts the control arc into the model.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.Modify">
            <summary>
            Modifies the control arc with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.Select">
            <summary>
            Selects the control arc with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.CreateInstance">
            <summary>
            Method for creation of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.SelectInstance">
            <summary>
            Method for selection of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.ModifyInstance">
            <summary>
            Method for modifying the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.ToStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from dotNet to core.
            </summary>
            <param name="PlaneStruct">Struct containing the arc data</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlArc.FromStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from core to dotNet.
            </summary>
            <param name="PlaneStruct">Struct containing the arc data</param>
        </member>
        <member name="T:Tekla.Structures.Model.ControlCircle">
            <summary>
            The ControlCircle class defines a user defined (not magnetic) circle helping in modeling work.
            If there are duplicated input points or 3 input points are in a line, ControlCircle.Insert() will return false.
            ControlCircle.Select() will return the center point of the circle to Point1.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point p1 = new Point(4500, 4500, 0);
                       Point p2 = new Point(4500, 9000, 0);
                       Point p3 = new Point(0, 0, 0);
                       ControlCircle controlCircle = new ControlCirle(p1, p2, p3);
            
                       bool Result = false;
                       Result = ControlCircle.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlCircle"/> class. 
            <para>
            The default values are as follows:
            <list type="bullet">
            <item> Color = ControlCircleColorEnum.YELLOW;</item>
            <item> Extension = 0.0;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlCircle"/> class. 
            The control circle is not magnetic.
            </summary>
            <param name="point1"> The first point to be used.</param>
            <param name="point2"> The second point to be used.</param>
            <param name="point3"> The third point to be used.</param>
        </member>
        <member name="T:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum">
            <summary>
            The different circle colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.YELLOW_RED">
            <summary>
            The yellow/red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.BLACK">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.WHITE">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.RED">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.GREEN">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.BLUE">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.CYAN">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.YELLOW">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlCircle.ControlCircleColorEnum.MAGENTA">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.Extension">
            <summary>
            Gets or sets the extension of the control circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.Color">
            <summary>
            Gets or sets the color of the control circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.LineType">
            <summary>
            The line type of the control circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.Point1">
            <summary>
            Gets or sets the first point.
            Point1 becomes the center point of the circle after selecting the control circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.Point2">
            <summary>
            Gets or sets the second point.
            Point2 contains the original input Point1 after selecting the control circle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlCircle.Point3">
            <summary>
            Gets or sets the third point.
            Point3 contains the calculated result from the orthogonal point and the center point after selecting the control circle. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.Insert">
            <summary>
            Inserts the control circle into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.Select">
            <summary>
            Selects the control circle with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.Modify">
            <summary>
            Modifies the control circle with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.Delete">
            <summary>
            Deletes the control circle with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.ToStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Converts the dot object into the struct data structure.
            </summary>
            <param name="dotControlObjectT"> The dot object as conversion input.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.FromStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Converts the object from the struct data structure to the dot format.
            </summary>
            <param name="dotControlObjectT"> The dot object as conversion output.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.CreateInstance">
            <summary>
            Creates the instance.
            </summary>
            <returns> The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.SelectInstance">
            <summary>
            Selects the instance.
            </summary>
            <returns> The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlCircle.ModifyInstance">
            <summary>
            Modifies the instance.
            </summary>
            <returns> The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlObjectColorEnum">
            <summary>
            The different colors used for control objects (ControlLine and ControlCircle have their own).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.YELLOW_RED">
            <summary>
            The yellow/red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.BLACK">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.WHITE">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.RED">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.GREEN">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.BLUE">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.CYAN">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.YELLOW">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlObjectColorEnum.MAGENTA">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ControlLine">
            <summary>
            The ControlLine class defines a user defined (possibly magnetic) line helping in modeling work.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ControlLine controlLine = new ControlLine();
            
                       LineSegment line = new LineSegment();
                       line.Point1 = new Point(6000,6000,0);
                       line.Point2 = new Point(6000,12000,0);
            
                       controlLine.Line = line;
                       controlLine.IsMagnetic = true;
            
                       bool Result = false;
                       Result = controlLine.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.ControlLine.ControlLineColorEnum">
            <summary>
            The different line colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.YELLOW_RED">
            <summary>
            The yellow/red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.BLACK">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.WHITE">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.RED">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.GREEN">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.BLUE">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.CYAN">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.YELLOW">
            <summary>
            The yellow color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlLine.ControlLineColorEnum.MAGENTA">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Line">
            <summary>
            The line segment defining the position of the control line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.IsMagnetic">
            <summary>
            Determines whether the line is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Extension">
            <summary>
            The extension of the control line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.Color">
            <summary>
            The color of the control line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlLine.LineType">
            <summary>
            The line type of the control line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.#ctor">
            <summary>
            Creates a new control line instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Line = new LineSegment();</item>
            <item>IsMagnetic = false;</item>
            <item>Color = ControlLineColorEnum.YELLOW;</item>
            <item>Extension = 0.0;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.#ctor(Tekla.Structures.Geometry3d.LineSegment,System.Boolean)">
            <summary>
            Creates a new control line instance taking the line segment and magnetism as input.
            </summary>
            <param name="Line">The line segment to be used.</param>
            <param name="IsMagnetic">Determines whether the line is magnetic or not.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Insert">
            <summary>
            Inserts the control line into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Select">
            <summary>
            Selects the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Modify">
            <summary>
            Modifies the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlLine.Delete">
            <summary>
            Deletes the control line with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlPlane">
            <summary>
            The ControlPlane class defines a user defined (possibly magnetic) plane helping in modeling work.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ControlPlane controlPlane = new ControlPlane();
            
                       Plane plane = new Plane();
                       plane.Origin = new Point(6000,6000,0);
                       plane.AxisX = new Vector(-3000,0,0);
                       plane.AxisY = new Vector(0,6000,0);
            
                       controlPlane.Plane = plane;
                       controlPlane.IsMagnetic = true;
            
                       bool Result = false;
                       Result = controlPlane.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.Plane">
            <summary>
            The plane defining the position of the control plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.IsMagnetic">
            <summary>
            Determines whether the plane is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPlane.Name">
            <summary>
            The name of the control plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.#ctor">
            <summary>
            Creates a new control plane instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Plane = new Plane();</item>
            <item>IsMagnetic = false;</item>
            <item>Name = "Plane";</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.#ctor(Tekla.Structures.Model.Plane,System.Boolean)">
            <summary>
            Creates a new control plane instance taking the plane and magnetism as input.
            </summary>
            <param name="P">The plane to be used.</param>
            <param name="IsMagnetic">Determines whether the plane is magnetic or not.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Insert">
            <summary>
            Inserts the control plane into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Select">
            <summary>
            Selects the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Modify">
            <summary>
            Modifies the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPlane.Delete">
            <summary>
            Deletes the control plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlPoint">
             <summary>
             The ControlPoint class defines a user defined point helping in modeling work.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             
             public class Example
             {
                    public void Example1()
                    {
                        Point point = new Point(6000,6000,0);
                        ControlPoint controlpoint = new ControlPoint(point);
            
                        bool Result = false;
                        Result = controlpoint.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.ControlPoint.point">
            <summary>
            Defines the position of the modeling aid point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlPoint"/> class with zero members.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.#ctor(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlPoint"/> class with an existing point.
            </summary>
            <param name="existPoint">An existing point</param>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPoint.Point">
            <summary>
            Gets or sets the position of the control point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.Insert">
            <summary>
            Inserts the control point into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.Select">
            <summary>
            Selects the control point with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.Modify">
            <summary>
            Modifies the control point with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPoint.Delete">
            <summary>
            Deletes the control point with the given Identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ControlPolycurve">
            <summary>
            The ControlPolycurve class defines a user defined polycurve object which contains a chain of line and arc geometries.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlPolycurve.MinimumCurveNumber">
            <summary>
            Minimum number of curves in the polycurve to be inserted/modified
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlPolycurve.geometry">
            <summary>
            The internal polycurve geometry
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ControlPolycurve.insufficientNumberOfGeometries">
            <summary>
            Message to be sent along the exception thrown when the number of geometries is too low
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPolycurve.Color">
            <summary>
            Gets or sets color of the Polycurve.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPolycurve.LineType">
            <summary>
            Gets or sets the line type of the polycurve.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ControlPolycurve.Geometry">
            <summary>
            Gets or sets geometry list that defines geometry of the polycurve.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlPolycurve"/> class.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Color = ControlObjectColorEnum.BLUE;</item>
            <item>LineType = LineType.DashDot;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.#ctor(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ControlPolycurve"/> class.
            </summary>
            <param name="geometry">Geometry of the control polycurve.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.Delete">
            <summary>
            Deletes a polycurve with given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.Insert">
            <summary>
            Inserts a polycurve into the model.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.Modify">
            <summary>
            Modifies a polycurve with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.Select">
            <summary>
            Selects a polycurve with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.ToStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from dotNet to core.
            </summary>
            <param name="PlaneStruct">Struct containing the polycurve properties</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.FromStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from core to dotNet.
            </summary>
            <param name="PlaneStruct">Struct containing the polycurve properties</param>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.CreateInstance">
            <summary>
            Method for creation of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.SelectInstance">
            <summary>
            Method for selection of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ControlPolycurve.ModifyInstance">
            <summary>
            Method for modifying the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Grid">
             <summary>
             The Grid class defines a user defined (possibly magnetic) set of planes helping in modeling work. A grid has grid plane
             instances as children.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
            
             public class Example
             {
                    public void Example1()
                    {
                        Grid Grid = new Grid();
            
                        Grid.IsMagnetic = true;
            
                        bool Result = false;
                        Result = Grid.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateX">
            <summary>
            The coordinates for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateY">
            <summary>
            The coordinates for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.CoordinateZ">
            <summary>
            The coordinates for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelX">
            <summary>
            The labels for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelY">
            <summary>
            The labels for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.LabelZ">
            <summary>
            The labels for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftX">
            <summary>
            The extension to the left X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftY">
            <summary>
            The extension to the left Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionLeftZ">
            <summary>
            The extension to the left Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightX">
            <summary>
            The extension to the right X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightY">
            <summary>
            The extension to the right Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionRightZ">
            <summary>
            The extension to the right Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.ExtensionForMagneticArea">
            <summary>
            The extension for the magnetic area.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Grid.Color">
            <summary>
            Gets or sets the color of the grid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.#ctor">
            <summary>
            Creates a new grid instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Name = "Grid";</item>
            <item>CoordinateX = "0.00 4*3000.00";</item>
            <item>CoordinateY = "0.00 5*6000.00";</item>
            <item>CoordinateZ = "0.00 6000.00 8000.00 9000.00";</item>
            <item>LabelX = "A B C D E";</item>
            <item>LabelY = "1 2 3 4 5 6";</item>
            <item>LabelZ = "+0 +6000 +8000 +9000";</item>
            <item>ExtensionLeftX = 2000.0;</item>
            <item>ExtensionLeftY = 2000.0;</item>
            <item>ExtensionLeftZ = 2000.0;</item>
            <item>ExtensionRightX = 2000.0;</item>
            <item>ExtensionRightY = 2000.0;</item>
            <item>ExtensionRightZ = 2000.0;</item>
            <item>IsMagnetic = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Grid.ToStruct(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            Converts the data of the grid to the struct data that is passed to Core
            </summary>
            <param name="dotGrid">Struct to be filled</param>
        </member>
        <member name="T:Tekla.Structures.Model.GridBase">
             <summary>
             The GridBase class defines the base class for grids.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
            
             public class Example
             {
                    public void Example1()
                    {
                        GridBase grid = MakeAGrid();
                        grid.IsMagnetic = true;
                        bool Result = grid.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.GridBase.AlphaChannelMask">
            <summary>
            This constant is used to force the color to have a uniform alpha channel, since Core does not understand it
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GridBase.color">
            <summary>
            The grid lines color
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.GridBase.fontColor">
            <summary>
            The font color for the grid labels
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.#ctor">
            <summary>
            Creates a new grid instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Name = "Grid";</item>
            <item>CoordinateX = "0.00 4*3000.00";</item>
            <item>CoordinateY = "0.00 5*6000.00";</item>
            <item>CoordinateZ = "0.00 6000.00 8000.00 9000.00";</item>
            <item>LabelX = "A B C D E";</item>
            <item>LabelY = "1 2 3 4 5 6";</item>
            <item>LabelZ = "+0 +6000 +8000 +9000";</item>
            <item>ExtensionLeftX = 2000.0;</item>
            <item>ExtensionLeftY = 2000.0;</item>
            <item>ExtensionLeftZ = 2000.0;</item>
            <item>ExtensionRightX = 2000.0;</item>
            <item>ExtensionRightY = 2000.0;</item>
            <item>ExtensionRightZ = 2000.0;</item>
            <item>IsMagnetic = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.IsMagnetic">
            <summary>
            Gets or sets whether the grid is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.Name">
            <summary>
            Gets or sets the name of the grid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.FontSize">
            <summary>
            Gets or sets font size for the grid labels
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.FontColor">
            <summary>
            Gets or sets font color for the grid labels
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.Origin">
            <summary>
            Gets or sets the origin of the grid
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.CoordinateX">
            <summary>
            Gets or sets the coordinates for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.CoordinateY">
            <summary>
            Gets or sets the coordinates for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.CoordinateZ">
            <summary>
            Gets or sets the coordinates for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.LabelX">
            <summary>
            Gets or sets the labels for the X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.LabelY">
            <summary>
            Gets or sets the labels for the Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.LabelZ">
            <summary>
            Gets or sets the labels for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionLeftX">
            <summary>
            Gets or sets the extension to the left X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionLeftY">
            <summary>
            Gets or sets the extension to the left Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionLeftZ">
            <summary>
            Gets or sets the extension to the left Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionRightX">
            <summary>
            Gets or sets the extension to the right X-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionRightY">
            <summary>
            Gets or sets the extension to the right Y-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.ExtensionRightZ">
            <summary>
            Gets or sets the extension to the right Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridBase.Color">
            <summary>
            Gets or sets the color of the grid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.Insert">
            <summary>
            Inserts the grid into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.Select">
            <summary>
            Selects the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.Modify">
            <summary>
            Modifies the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.Delete">
            <summary>
            Deletes the grid with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.CreateInstance">
            <summary>
            Creates an instance of a grid
            </summary>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.SelectInstance">
            <summary>
            Selects an instance of a grid
            </summary>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.ModifyInstance">
            <summary>
            Modifies an instance of a grid
            </summary>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.ToStruct(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            Converts the data of the grid to the struct data that is passed to Core
            </summary>
            <param name="dotGrid">Struct to be filled</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridBase.FromStruct(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            Converts the data from the struct from Core to this instance of the grid.
            </summary>
            <param name="dotGrid">Struct to get the data from</param>
        </member>
        <member name="T:Tekla.Structures.Model.GridCylindricalSurface">
             <summary>
             The GridCylindricalSurface class defines a user defined (possibly magnetic) cylindrical surface helping in
             modeling work. A grid cylindrical surface must always belong to a parent grid instance.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public bool Example1()
                    {
                        var cylindricalSurface = new GridCylindricalSurface();
            
                        Arc cylinderBase = new Arc(new Point(0,0,0), new Point(6000,0,0), new Vector(0,0,1), Math.PI);
                        double cylinderHeight = 6000.0;
            
                        cylindricalSurface.CylinderBase = cylinderBase;
                        cylindricalSurface.CylinderHeight = cylinderHeight;
            
                        return cylindricalSurface.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.GridCylindricalSurface.CylinderBase">
            <summary>
            The arc that represents the base of the cylindrical surface. The cylinder is then extruded along the normal
            direction of the arc, with the height given by <see cref="P:Tekla.Structures.Model.GridCylindricalSurface.CylinderHeight"/>"
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridCylindricalSurface.CylinderHeight">
            <summary>
            Height of the cylinder along the normal direction of the <see cref="P:Tekla.Structures.Model.GridCylindricalSurface.CylinderBase"/> arc.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridCylindricalSurface.#ctor">
            <summary>
            Creates a new grid plane instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>CylinderBase = new Arc(new Point(0, 0, 0), new Point(6000, 0, 0), new Vector(0, 0, 1), Math.PI);</item>
            <item>CylinderHeight = 6000.0;</item>
            <item>Label = "Default";</item>
            <item>IsMagnetic = false;</item>
            <item>ExtensionLeft  = 2000.0;</item>
            <item>ExtensionRight = 2000.0;</item>
            <item>ExtensionBelow = 2000.0;</item>
            <item>ExtensionAbove = 2000.0;</item>
            <item>DrawingVisibility = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridCylindricalSurface.#ctor(Tekla.Structures.Geometry3d.Arc,System.Double,System.String)">
            <summary>
            Creates a new grid plane instance taking the plane and label as input.
            </summary>
            <param name="cylinderBase">The base of the cylinder.</param>
            <param name="cylinderHeight">The height of the cylinder.</param>
            <param name="label">The label for the grid plane.</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridCylindricalSurface.Modify">
            <summary>
            Modifies the grid plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridCylindricalSurface.ToStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Fills the struct to transport information to Core.
            </summary>
            <param name="dotPlane">Struct to be filled</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridCylindricalSurface.FromStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Sets the current instance from a struct transported from Core.
            </summary>
            <param name="dotPlane">Struct get the data from</param>
        </member>
        <member name="T:Tekla.Structures.Model.GridPlane">
             <summary>
             The GridPlane class defines a user defined (possibly magnetic) plane helping in modeling work. A grid plane must
             always belong to a father grid instance.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public void Example1()
                    {
                        GridPlane GridPlane = new GridPlane();
            
                        Plane plane = new Plane();
                        plane.Origin = new Point(6000,6000,0);
                        plane.AxisX = new Vector(-3000,0,0);
                        plane.AxisY = new Vector(0,6000,0);
            
                        GridPlane.Plane = plane;
                        GridPlane.IsMagnetic = true;
            
                        bool Result = false;
                        Result = GridPlane.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Plane">
            <summary>
            The plane defining the position of the grid plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Father">
            <summary>
            The father grid of the grid plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Label">
            <summary>
            The label for the grid surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.IsMagnetic">
            <summary>
            Whether the grid surface is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionLeft">
            <summary>
            The line extension on the left.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionRight">
            <summary>
            The line extension on the right.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionBelow">
            <summary>
            The line extension below.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionAbove">
            <summary>
            The line extension above.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.DrawingVisibility">
            <summary>
            The visibility of the grid surface in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.Color">
            <summary>
            The color of the grid plane. This works only in wireframe views.
            The color of grid planes in rendered views can be changed using the advanced option XS_GRID_COLOR.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridPlane.ExtensionForMagneticArea">
            <summary>
            The extension for the magnetic area.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.#ctor">
            <summary>
            Creates a new grid plane instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Plane = new Plane();</item>
            <item>Plane.Origin = new Point(500.0, 500.0, 0.0);</item>
            <item>Plane.AxisX  = new Vector(2000.0, 0.0, 0.0);</item>
            <item>Plane.AxisY  = new Vector(0.0, 0.0, 2000.0);</item>
            <item>Label = "Default";</item>
            <item>IsMagnetic = false;</item>
            <item>ExtensionLeft  = 2000.0;</item>
            <item>ExtensionRight = 2000.0;</item>
            <item>ExtensionBelow = 2000.0;</item>
            <item>ExtensionAbove = 2000.0;</item>
            <item>DrawingVisibility = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.#ctor(Tekla.Structures.Model.Plane,System.String)">
            <summary>
            Creates a new grid plane instance taking the plane and label as input.
            </summary>
            <param name="Plane">The plane that defines the grid plane.</param>
            <param name="Label">The label for the grid plane.</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Insert">
            <summary>
            Inserts the grid surface into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Select">
            <summary>
            Selects the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Delete">
            <summary>
            Deletes the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.Modify">
            <summary>
            Modifies the grid plane with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.ToStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Fills the struct to transport information to Core.
            </summary>
            <param name="P">Struct to be filled</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridPlane.FromStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Sets the current instance from a struct transported from Core.
            </summary>
            <param name="P">Struct get the data from</param>
        </member>
        <member name="T:Tekla.Structures.Model.GridSurface">
            <summary>
            The GridSurface class defines a user defined (possibly magnetic) surface helping in modeling work. A grid surface must
            always belong to a parent GridBase instance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.Parent">
            <summary>
            The parent grid of the grid surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.Label">
            <summary>
            The label for the grid surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.IsMagnetic">
            <summary>
            Whether the grid surface is magnetic or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.ExtensionLeft">
            <summary>
            The line extension on the left.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.ExtensionRight">
            <summary>
            The line extension on the right.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.ExtensionBelow">
            <summary>
            The line extension below.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.ExtensionAbove">
            <summary>
            The line extension above.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.DrawingVisibility">
            <summary>
            The visibility of the grid surface in drawings.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.GridSurface.IsManual">
            <summary>
            Gets or sets if the line was manually created.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.#ctor">
            <summary>
            Creates a new grid surface instance.
            <para>The default values are as follows:
            <list type="bullet">
            <item>Label = "Default";</item>
            <item>IsMagnetic = false;</item>
            <item>ExtensionLeft  = 2000.0;</item>
            <item>ExtensionRight = 2000.0;</item>
            <item>ExtensionBelow = 2000.0;</item>
            <item>ExtensionAbove = 2000.0;</item>
            <item>DrawingVisibility = false;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.#ctor(System.String)">
            <summary>
            Creates a new grid surface instance taking the label as input.
            </summary>
            <param name="label">The label for the grid surface.</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.Insert">
            <summary>
            Inserts the grid surface into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.Select">
            <summary>
            Selects the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.Modify">
            <summary>
            Modifies the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.Delete">
            <summary>
            Deletes the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.CreateInstance">
            <summary>
            Inserts the grid surface into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.SelectInstance">
            <summary>
            Selects the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.ModifyInstance">
            <summary>
            Modifies the grid surface with the given ID.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.ToStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Fills the struct to transport information to Core.
            </summary>
            <remarks>
            Must be overridden to fill the missing information
            </remarks>
            <param name="dotPlane">Struct to be filled</param>
        </member>
        <member name="M:Tekla.Structures.Model.GridSurface.FromStruct(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            Sets the current instance from a struct transported from Core.
            </summary>
            <remarks>
            Must be overridden to fill the missing information
            </remarks>
            <param name="dotPlane">Struct get the data from</param>
        </member>
        <member name="T:Tekla.Structures.Model.RadialGrid">
             <summary>
             The RadialGrid class defines a user defined (possibly magnetic) set;
             radial grid has grid planes and cylindrical grid planes as children
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
            
             public class Example
             {
                    public void Example1()
                    {
                        RadialGrid grid = new RadialGrid();
                        grid.IsMagnetic = true;
                        bool Result = Grid.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.IsMagnetic">
            <summary>
            Gets or sets whether the grid is magnetic or not
            </summary>
            <exception cref="T:System.NotImplementedException">Throws on set property to true. Radial grids do not support magnetic property</exception>
            <remarks>Returns always false. Property cannot be set to true since it does not support the magnetic property</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.RadialCoordinates">
            <summary>
            The distances between the radii of the arcs
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.AngularCoordinates">
            <summary>
            The angular coordinates of the grid lines
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.CoordinateZ">
            <summary>
            The coordinates for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.RadialLabels">
            <summary>
            The labels for the grid arcs.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.AngularLabels">
            <summary>
            The labels for the angular grid lines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.LabelZ">
            <summary>
            The labels for the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.ArcStartExtension">
            <summary>
            The extension of the grid arcs at their start point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.AngularLinesStartExtension">
            <summary>
            The extension of the angular grid lines at their start point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.ExtensionBelowZ">
            <summary>
            The extension below the Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.ArcEndExtension">
            <summary>
            The extension of the grid arcs at their end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.AngularLinesEndExtension">
            <summary>
            The extension of the angular grid lines at their end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.ExtensionAboveZ">
            <summary>
            The extension above Z-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RadialGrid.Color">
            <summary>
            Gets or sets the color of the grid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RadialGrid.#ctor">
            <summary>
            Creates a new radial grid instance. Overrides the default creation parameters by forcing the angular
            coordinates to be "0.0 6*15.0"
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RadialGrid.ToStruct(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            Converts the data of the grid to the struct data that is passed to Core
            </summary>
            <param name="dotGrid">Struct to be filled</param>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicDefinitionTypeEnum">
            <summary>
            Defines the different types of classification hierarchies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_CUSTOM_TYPE">
            <summary>
            The custom type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_LOGICAL_BUILDING_AREA">
            <summary>
            The logical building area classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_OBJECT_TYPE">
            <summary>
            The object type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_WORK_TYPE">
            <summary>
            The task work type classification hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO">
            <summary>
            The task scenario classification hierarchy.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicDefinition">
            <summary>
            The HierarchicDefinition class defines a hierarchy structure. This hierarchy structure can 
            be instantiated and extended by hierarchical objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicObject"/>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       HierarchicDefinition scenarioDefinition = new HierarchicDefinition();
                       scenarioDefinition.Name = "Scenario type";
                       scenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       scenarioDefinition.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicDefinition.MAX_HIERARCHIC_LIST_OBJECTS">
            <summary>
            Maximum number of hierarchical definition resources.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Name">
            <summary>
            The name of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.CustomType">
            <summary>
            The custom type of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchyType">
            <summary>
            The type of the hierarchical definition.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicDefinitionTypeEnum"/>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Father">
            <summary>
            The father of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchyIdentifier">
            <summary>
            The GUID of the hierarchical definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.Drawable">
            <summary>
            Defines whether the hierarchical definition is a drawable area in the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicDefinition.HierarchicChildren">
            <summary>
            An array list that contains the hierarchical definition's children.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.#ctor">
            <summary>
            Creates a new hierarchical definition instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a hierarchical definition with a known identifier. The instantiation has to be done
            before the hierarchical definition instance can be selected.
            </summary>
            <param name="ID">The identifier of an existing hierarchical definition.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier id = new Identifier(357);
            
                       HierarchicDefinition hierarchicalDefinition = new HierarchicDefinition(id);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.AddObjects(System.Collections.ArrayList)">
            <summary>
            Associates hierarchical objects with the hierarchical definition. 
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The hierarchical objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.RemoveObjects(System.Collections.ArrayList)">
            <summary>
            Removes associations to the given list of hierarchical objects.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The hierarchical objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Insert">
            <summary>
            Inserts the hierarchical definition instance in the model.
            </summary>
            <returns>True if the insertion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Select">
            <summary>
            Selects the hierarchical definition instance from the model. The ID must be set.
            </summary>
            <returns>True if the selection was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Modify">
            <summary>
            Modifies the hierarchical definition instance in the model. The ID must be set.
            </summary>
            <returns>True if the modification was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicDefinition.Delete">
            <summary>
            Deletes the hierarchical definition instance from the model. The ID must be set.
            </summary>
            <returns>True if the deletion was successful.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.HierarchicObject">
            <summary>
            The HierarchicObject class defines an object in a tree-structured hierarchy. The hierarchy structure is defined
            by hierarchical definitions which the hierarchical objects instantiate. Hierarchical objects may contain
            other hierarchical objects, thus forming a sub-hierarchy, or model objects.
            </summary>
            <seealso cref="T:Tekla.Structures.Model.HierarchicDefinition"/>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       HierarchicDefinition scenarioDefinition = new HierarchicDefinition();
                       scenarioDefinition.Name = "Scenario type";
                       scenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       scenarioDefinition.Insert();
            
                       HierarchicObject scenario = new HierarchicObject();
                       scenario.Name = "First scenario";
                       scenario.Definition = scenarioDefinition;
                       scenario.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.HierarchicObject.MAX_HIERARCHIC_CHILDREN">
            <summary>
            Maximum number of hierarchical object resources.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Name">
            <summary>
            The name of the hierarchical object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Definition">
            <summary>
            The hierarchical definition which the hierarchical object is associated with.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.Father">
            <summary>
            The father of the hierarchical object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.HierarchicObject.HierarchicChildren">
            <summary>
            An array list that contains the hierarchical object's hierarchical children (of the type hierarchical object).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.#ctor">
            <summary>
            Creates a new hierarchical object instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Instantiates a hierarchical object with a known identifier. The instantiation has to be done
            before the hierarchical definition instance can be selected.
            </summary>
            <param name="ID">The identifier of an existing hierarchical object.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier id = new Identifier(357);
            
                       HierarchicObject hierarchicalObject = new HierarchicObject(id);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Insert">
            <summary>
            Inserts the hierarchical object instance in the model.
            </summary>
            <returns>True if the insertion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Select">
            <summary>
            Selects the hierarchical object instance from the model. The ID must be set.
            </summary>
            <returns>True if the selection was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Modify">
            <summary>
            Modifies the hierarchical object instance in the model. The ID must be set.
            </summary>
            <returns>True if the modification was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.Delete">
            <summary>
            Deletes the hierarchical object instance from the model. The ID must be set.
            </summary>
            <returns>True if the deletion was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.AddObjects(System.Collections.ArrayList)">
            <summary>
            Associates model objects with the hierarchical object.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The model objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.HierarchicObject.RemoveObjects(System.Collections.ArrayList)">
            <summary>
            Removes associations to the given list of model objects.
            Fails if the hierarchical definition doesn't exist in the model.
            </summary>
            <param name="Objects">The model objects.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModelHistory">
             <summary>
             The ModelHistory class provides history information about the objects of the model
             that is currently open in Tekla Structures.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.History;
             using System;
             using System.Diagnostics;
             using Tekla.Structures.Geometry3d;
             
             public class Example1
             {
                 /// to be called before modifications
                 private void Init()
                 {
                     ModelHistory.TakeModifications("Example1_ModStamp");
                 }
                 
                 /// to be called when need to handle modifications
                 private void Run_TakeModifications()
                 {
                     var Modifications = ModelHistory.TakeModifications("Example1_ModStamp");
                     while (Modifications.Modified.MoveNext())
                     {
                         ModelObject mo = Modifications.Modified.Current;
                         Console.WriteLine("Run_TakeModifications: Modified id: {0}", mo.Identifier.GUID);
                     }
                 }
            
                 /// to be called when need to preview modifications without advancing modstamp
                 private void Run_GetModifications()
                 {
                     var Modifications = ModelHistory.GetModifications("Example1_ModStamp");
                     while (Modifications.Modified.MoveNext())
                     {
                         ModelObject mo = Modifications.Modified.Current;
                         Console.WriteLine("Run_GetModifications: Modified id: {0}", mo.Identifier.GUID);
                     }
                 }
            
                 /// this takes each modification only once
                 public void ModificationProcessed()
                 {
                     this.Init();
                     new Beam(new Point(), new Point(0, 0, 1000))
                     {
                         Name = "BEAM1",
                         Profile = new Profile() { ProfileString = "HEA400" },
                         Material = new Material() { MaterialString = "Steel_Undefined" }
                     }.Insert();
                     new Model().CommitChanges();
                     this.Run_TakeModifications(); // prints BEAM1
                     new Beam(new Point(), new Point(0, 0, 1000)) 
                     {
                         Name = "BEAM2",
                         Profile = new Profile() { ProfileString = "HEA400" },
                         Material = new Material() { MaterialString = "Steel_Undefined" }
                     }.Insert();
                     new Model().CommitChanges();
                     this.Run_TakeModifications(); // prints BEAM2, but not BEAM1
                 }
            
                 /// this always returns all modifications since last TakeModifications()
                 public void ModificationPreviewed()
                 {
                     this.Init();
                     new Beam(new Point(), new Point(0, 0, 1000)) 
                     {
                         Name = "BEAM1",
                         Profile = new Profile() { ProfileString = "HEA400" },
                         Material = new Material() { MaterialString = "Steel_Undefined" }
                     }.Insert();
                     new Model().CommitChanges();
                     this.Run_GetModifications(); // prints BEAM1
                     new Beam(new Point(), new Point(0, 0, 1000)) 
                     {
                         Name = "BEAM2",
                         Profile = new Profile() { ProfileString = "HEA400" },
                         Material = new Material() { MaterialString = "Steel_Undefined" }
                     }.Insert();
                     new Model().CommitChanges();
                     this.Run_GetModifications(); // prints both BEAM1 and BEAM2
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjects(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            Gets a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjectsWithType(Tekla.Structures.Model.History.ModificationStamp,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Gets based on type a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetDeletedObjects(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            Gets a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <returns>A list of the objects that have been deleted after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetDeletedObjectsWithType(Tekla.Structures.Model.History.ModificationStamp,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Gets based on type a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp.</param>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A list of the objects that have been deleted after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetCurrentModificationStamp">
            <summary>
            Gets the current modification stamp from the model.
            </summary>
            <returns>The current modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetCurrentModificationStampGuid">
            <summary>Gets the current modification stamp from the model, in form of Guid</summary>
            It properly handles also models which use Runtime Id's.
            <returns>The current modification stamp</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjects(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Gets a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetAttributeModifiedObjects(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Gets a list of the objects that attributes (UDA) have been modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetNumberingModifiedObjects(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Gets a list of the objects that nubmering has been modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetPhaseModifiedObjects(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Gets a list of the objects that phase has been modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetObjectsWithAnyModifications(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Gets a list of the objects that have any modifications mande after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedObjectsWithType(System.String,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Gets based on type a list of the objects that have been added or modified after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, in string format. This may be Guid or encoded in case of static model ids.</param>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A list of the objects that have been modified after the given modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetDeletedObjects(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.Boolean)">
            <summary>
            Gets a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, as returned by GetCurrentModificationStampGuid().</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="returnAlsoIfObjectIsCreatedAndDeletedAfterEvent">if set to <c>true</c> returns also the objects that are both created and deleted after event.</param>
            <returns>
            A list of the objects that have been deleted after the given modification stamp.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifiedAndNumberedObjectsByFilterName(System.String,System.String,Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            Gets the objects which are new, modified or numbered after the modification stamp.  
            </summary>
            <param name="Name">The name.</param>
            <param name="FilterName">Name of the filter.</param>
            <param name="PrevStamp">The previous stamp.</param>
            <returns>
            The new, modified or numbered objects passing the filter.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModificationsByFilter(System.String,System.String)">
            <summary>
            Gets the objects which are new, modified or numbered after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp (guid).</param>
            <param name="FilterName">Name of the filter.</param>
            <returns>
            The new, modified or numbered objects passing the filter.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetNotSharedObjects">
            <summary>Get object which are was created or modified since last ModelSharing WriteOut.</summary>
            <remarks>If the model is not shared, returns all objects.</remarks>
            <returns>A list of objects</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetLocalChanges">
            <summary>Get changes which are not written out.</summary>
            <returns>Modifications which are not written out.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.TakeModifications(System.String,Tekla.Structures.Model.History.ModificationStamp)">
            <summary>Take modifications since previous call.</summary>
            <remarks>Takes modification which has happened to the model since the previous call to TakeModifications with the same Name argument.
            If there was no previous call with this Name, shows modifications since beginning, or since PrevStap, if it is specified.
            Updates internal reference for use when TakeModifications() is called next time.</remarks>
            <param name="Name">Name of reference which is used for collecting modifications and which is updated.
            Intended use is to assign an unique name for each client application which needs to be informed of the model updates.
            Maximum length is 79 characters.</param>
            <param name="PrevStamp">When specified, default value of reference if is it not found</param>
            <returns>All modifications which happened since the last call. See ModificationInfo reference</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.TakeModifications(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},Tekla.Structures.Model.History.ModificationStamp)">
            <summary>Take modifications since previous call, with object type filtering.</summary>
            <remarks>Same as <see cref="M:Tekla.Structures.Model.History.ModelHistory.TakeModifications(System.String,Tekla.Structures.Model.History.ModificationStamp)"/>, but returns only the types listed in <paramref name="ObjectTypes"/>.
            Note that since this function also sets base for the next invocation of <code>TakeModifications()</code> for ALL objects,
            so using it discards change information for filtered objects.</remarks>
            <param name="Name">Name of reference which is used for collecting modifications and which is updated.
            Intended use is to assign an unique name for each client application which needs to be informed of the model updates.
            Maximum length is 79 characters.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="PrevStamp">When specified, default value of reference if is it not found</param>
            <returns>All modifications which happened since the last call. See ModificationInfo reference</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.UpdateModificationStampToLatest(System.String)">
            <summary>
            Updates the modification stamp to latest.
            </summary>
            <param name="modificationStampKey">The modification stamp key.</param>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifications(System.String,Tekla.Structures.Model.History.ModificationStamp)">
            <summary>Lookup modifications since previous call of TakeModifications() without resetting the modstamp</summary>
            <remarks>Takes modification which has happened to the model since the previous call to TakeModifications with the same Name argument.
            If there was no previous call of TakeModifications() with this Name, shows modifications since beginning, or since PrevStap, if it is specified.</remarks>
            <param name="Name">Name of reference which is used for collecting modifications and which is updated.
            Intended use is to assign an unique name for each client application which needs to be informed of the model updates.
            Maximum length is 79 characters.</param>
            <param name="PrevStamp">When specified, default value of reference if is it not found</param>
            <returns>All modifications which happened since the last call</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModifications(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},Tekla.Structures.Model.History.ModificationStamp)">
            <summary>Lookup modifications since previous call of TakeModifications() without resetting the modstamp, with object type filtering</summary>
            <remarks>Same as <see cref="M:Tekla.Structures.Model.History.ModelHistory.GetModifications(System.String,Tekla.Structures.Model.History.ModificationStamp)"/>, but returns only the types listed in <paramref name="ObjectTypes"/>.</remarks>
            <param name="Name">Name of reference which is used for collecting modifications and which is updated.
            Intended use is to assign an unique name for each client application which needs to be informed of the model updates.
            Maximum length is 79 characters.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="PrevStamp">When specified, default value of reference if is it not found</param>
            <returns>All modifications which happened since the last call</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.GetModificationInfo(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.Boolean)">
            <summary>
            Get modifications.
            </summary>
            <param name="modStamp">The mod stamp (guid).</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="returnAlsoIfObjectIsCreatedAndDeletedAfterEvent">if set to <c>true</c> returns object deleted also if object is created and deleted after event.</param>
            <returns>
            The modifications.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckModelOptionsModified(System.String)">
            <summary>Check if model options have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if model options have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckDrawingOptionsModified(System.String)">
            <summary>Check if drawing options have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if drawing options have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckMaterialDefinitionsModified(System.String)">
            <summary>Check if material definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if material definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckProfileDefinitionsModified(System.String)">
            <summary>Check if profile definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if profile definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckCustomPropertiesModifiedAfterStamp(System.String)">
            <summary>
            Checks if any of the custom properties plugins are changed after stamp.
            </summary>
            <param name="ModStamp">The mod stamp.</param>
            <returns><c>true</c> if custom property plugins are modified, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckBoltDefinitionsModified(System.String)">
            <summary>Check if bolt definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if bolt definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckBoltAssemblyDefinitionsModified(System.String)">
            <summary>Check if bolt assembly definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if bolt assembly definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckDrawingsModified(System.String)">
            <summary>
            Checks if any of the drawings are created, modified or deleted after stamp.
            </summary>
            <param name="ModStamp">The mod stamp.</param>
            <returns><c>true</c> if any drawings have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModelHistory.CheckObjectModifiedAfterStamp(System.Guid,System.String)">
            <summary>Check if object has been modified after modification stamp.</summary>
            <param name="ObjectGuid">The object unique identifier.</param>
            <param name="ModStamp">The mod stamp.</param>
            <returns>True if object has been modified after modification stamp.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModificationInfo">
            <summary>Modification info returned by History.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationInfo.Modified">
            <summary>List of objects which have been modified or created. Objects which have only attribute (UDA) changed, and/or which has been numbered since last take are excluded.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationInfo.Deleted">
            <summary>List of objects which have been deleted</summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationInfo.ModifiedWithInfo">
            <summary>
            The modified objects with information of modification type. Objects which have only attribute (UDA) changed, and/or which has been numbered since last take are included.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModificationStamp">
            <summary>
            The ModificationStamp class provides the modification stamp for the objects of the model
            that is currently open in Tekla Structures.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationStamp._CurrentModStamp">
            <summary>
            Current Stamp for modified or new objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModificationStamp._CurrentSaveStamp">
            <summary>
            Current SaveStamp for multi-user model
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.History.ModificationStamp.LocalStamp">
            <summary>
            The modification stamp for the local changes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.History.ModificationStamp.ServerStamp">
            <summary>
            The modification stamp from the multi-user server for the external changes caused by
            the saving of the multi-user model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.History.ModificationStamp.Guid">
            <summary>Guid representation</summary>
            Method Tekla.Structures.Model.History.GetCurrentModificationStamp() now obsoleted,
            instead GetCurrentModificationStampGuid() should be used which returns Guid-formatted strings.
            This property can be used to convert a value stored from previous GetCurrentModificationStamp() calls
        </member>
        <member name="M:Tekla.Structures.Model.History.ModificationStamp.#ctor">
            <summary>
            Creates a new modification stamp instance where the current modification stamp is 0.
            Can be used for fetching all the created or deleted model objects from the model history.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.History.ModificationStamp.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new modification stamp instance with the given local and server stamps.
            Can be used for fetching from the model history all the model objects that have been created
            or deleted after the specified stamp.
            </summary>
            <param name="LocalStamp">The local stamp to be used for fetching the model changes after the stamp.</param>
            <param name="ServerStamp">The server stamp for fetching the external multi-user or synchronized
            model changes after the stamp.</param>
        </member>
        <member name="T:Tekla.Structures.Model.History.ModifiedObjectInfo">
            <summary>Modification info returned by History.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModifiedObjectInfo.ModelObject">
            <summary>
            Gets the object modified.
            </summary>
            <value>
            The object modified.
            </value>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModifiedObjectInfo.IsAttributeChanged">
            <summary>
            Whether the object attribute (UDA) has changed.
            </summary>
            <value>
            <c>true</c> if the object attribute has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModifiedObjectInfo.IsModified">
            <summary>
            Whether the object's has changed in a way that affects its numbering. This can include some UDA change.
            </summary>
            <value>
            <c>true</c> if the object is new or its property has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModifiedObjectInfo.IsCreated">
            <summary>Whether the object was created</summary>
        </member>
        <member name="F:Tekla.Structures.Model.History.ModifiedObjectInfo.IsNumberingChanged">
            <summary>
            Whether the numbering of object has changed.
            </summary>
            <value>
            <c>true</c> if the numbering of object has changed; otherwise, <c>false</c>.
            </value>
            <remarks>
            True only if the object has been re-numbered. Modifications to object which require re-numbering are only indicated with <see cref="F:Tekla.Structures.Model.History.ModifiedObjectInfo.IsModified"/>.
            </remarks>
        </member>
        <member name="T:Tekla.Structures.Model.IAssemblable">
            <summary>
            The IAssemblable interface dictates which model objects are capabable of belonging to an assembly at the leaf level.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.IAssemblable.GetAssembly">
            <summary>
            Returns the assembly that the assemblable belongs to.
            </summary>
            <returns>The assembly that the assemblable belongs to.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Internal.ContourOperation">
            <summary>
            ContourOperation provides methods to get contour geometry from TeklaStructures.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.ContourOperation.GetPartContour(Tekla.Structures.Identifier)">
            <summary>
            Get contour geometry using the PartId
            </summary>
            <param name="PartId">part identifier</param>
            <returns>Polycurve instance or null if geometry could not be fetched.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Internal.FarmiHelper">
            <summary>
            Helping farming.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.FarmiHelper.CopyAndConvertModel(System.String,System.String)">
            <summary>
            Copies the model, opens and saves the copy to convert it.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.FarmiHelper.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Copy directory recursively.</summary>
            <param name="path">Directory path.</param>
            <param name="targetPath">Target directory path.</param>
            <param name="throwExceptions">If true exceptions are thrown and operation discontinued at exception.
            If false exceptions are not thrown and operation continues after exception.</param>
            <param name="clearReadOnlyFlag">if set to <c>true</c> [remove read only flag of files].</param>
            <param name="excludeRegex">The exclude regex.</param>
        </member>
        <member name="T:Tekla.Structures.Model.Internal.WorkPlaneChanger">
            <summary>
            The <see cref="T:Tekla.Structures.Model.Internal.WorkPlaneChanger"/> class provides a thread-safe implementation for operations that require temporary custom work plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Internal.WorkPlaneChanger.SyncObject">
            <summary>
            The synchronize object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Internal.WorkPlaneChanger.oldWorkPlane">
            <summary>
            The old work plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.WorkPlaneChanger.#ctor(Tekla.Structures.Model.TransformationPlane)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Internal.WorkPlaneChanger" /> class.
            </summary>
            <param name="plane">The plane.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.WorkPlaneChanger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Internal.WorkPlaneChanger" /> class using global work plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Internal.WorkPlaneChanger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load">
            <summary>
            The Load class is an abstract base class for all loads.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadSpanningEnum">
            <summary>
            The load spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE">
            <summary>
            Single spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadSpanningEnum.LOAD_SPANNING_DOUBLE">
            <summary>
            Double spanning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadAttachmentEnum">
            <summary>
            The load attachment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadAttachmentEnum.LOAD_ATTACHMENT_ATTACH_TO_MEMBER">
            <summary>
            Attach to member.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadAttachmentEnum.LOAD_ATTACHMENT_DONT_ATTACH">
            <summary>
            Don't attach.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Load.LoadPartNamesEnum">
            <summary>
            The load part names.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadPartNamesEnum.LOAD_PART_NAMES_EXCLUDE">
            <summary>
            Exclude parts by name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE">
            <summary>
            Include parts by name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Load._Group">
            <summary>
            Load _Group object for this load. Id contains the db id in ts side
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.FatherId">
            <summary>
            The identifier of the father object that the load is attached to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Spanning">
            <summary>
            The load spanning.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PrimaryAxisDirection">
            <summary>
            The vector for the primary axis direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.AutomaticPrimaryAxisWeight">
            <summary>
            The automatic primary axis weight.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Weight">
            <summary>
            The weight.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.LoadDispersionAngle">
            <summary>
            The load dispersion angle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.CreateFixedSupportConditionsAutomatically">
            <summary>
            Indicates whether fixed support conditions are created automatically.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.LoadAttachment">
            <summary>
            The load attachment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PartNames">
            <summary>
            The part names.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.PartFilter">
            <summary>
            The part filter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDx">
            <summary>
            The dimension of the bounding box in the X direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDy">
            <summary>
            The dimension of the bounding box in the Y direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.BoundingBoxDz">
            <summary>
            The dimension of the bounding box in the Z direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Load.Group">
            <summary>
            The load group object for the load.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Load.#ctor">
            <summary>
            Creates a new load instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadArea">
            <summary>
            The LoadArea class defines a linearly-distributed force bound by a triangle or a quadrangle.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadArea L = new LoadArea();
                       L.P1 = new Vector(1000,2000,3000);
                       L.P2 = new Vector(4000,5000,6000);
                       L.P3 = new Vector(7000,8000,9000);
                       L.DistanceA = 5;
                       L.Position1 = new Point(6000,6000,0);
                       L.Position2 = new Point(8000,6000,0);
                       L.Position3 = new Point(8000,9000,0);
                       L.LoadForm = LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_PARALLELOGRAM;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 5;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadArea Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum">
            <summary>
            The area load form.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_PARALLELOGRAM">
            <summary>
            The area load form is a parallelogram.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadArea.AreaLoadFormEnum.LOAD_FORM_AREA_TRIANGLE">
            <summary>
            The area load form is a triangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position1">
            <summary>
            The first position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position2">
            <summary>
            The second position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.Position3">
            <summary>
            The third position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P1">
            <summary>
            The load magnitude vector P1.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P2">
            <summary>
            The load magnitude vector P2.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P3">
            <summary>
            The load magnitude vector P3.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.P4">
            <summary>
            The load magnitude vector P4. This one cannot be set.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.LoadForm">
            <summary>
            The load form.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadArea.DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.#ctor">
            <summary>
            Creates a new load area instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Insert">
            <summary>
            Inserts the load area into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Select">
            <summary>
            Selects a load area from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Modify">
            <summary>
            Modifies the existing load area in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadArea.Delete">
            <summary>
            Deletes the load area instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup">
            <summary>
            The LoadGroup class implements grouping functionality related to all loads.
            Each load should be assigned to a load group. Each load group contains loads 
            caused by the same action and to which you want to refer collectively.
            <para>
            Tekla Structures assumes that all loads in a group
            <list type="bullet">
            <item>Have the same partial safety and other combination factors</item>
            <item>Have the same action direction</item>
            <item>Occur at the same time and all together</item>
            </list>
            </para>
            <para>
            You may create new load groups, modify existing ones and delete 
            load groups via the .NET interface. You may also change the assigned load group 
            of a load and list all the load groups found in the model via the 
            ModelObjectSelector interface. The model always has at least one load group.
            </para>
            </summary>
            <example>
            Creating a new load group:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadGroup WindLoads = new LoadGroup();
            
                       WindLoads.GroupName = "ExtremeNorthWind";
                       WindLoads.GroupType = LoadGroup.LoadGroupType.EUROCODE_WIND_LOAD;
                       WindLoads.Direction = LoadGroup.LoadGroupDirection.DIR_Y;
                       WindLoads.Compatible = 2;
                       WindLoads.Incompatible = 15;
                       WindLoads.Color = LoadGroup.Colors.RED;  
            
                       WindLoads.Insert();
                   }
            }
            </code>
            Selecting and browsing through all load groups:
            <code>
            using Tekla.Structures.Model;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator LoadGroups = 
                           Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.LOAD_GROUP);
                       foreach (LoadGroup group in LoadGroups)
                       {
                           Console.WriteLine("Group: " + group.GroupName + "(ID " + group.Identifier.ID + ")");
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.LoadGroupType">
            <summary>
            The possible types for load groups.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_DEFAULT_GROUP">
            <summary>
            The Eurocode default group type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_SELF_WEIGHT">
            <summary>
            The Eurocode self weight type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_PERMANENT_LOAD">
            <summary>
            The Eurocode permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_PRE_STRESS_LOAD">
            <summary>
            The Eurocode pre-stress load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_HOUSING">
            <summary>
            The Eurocode live load housing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_PUBLIC_BUILDINGS">
            <summary>
            The Eurocode live load public buildings type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_THEATRES_RESTAURANTS">
            <summary>
            The Eurocode live load theatres, restaurants type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_WAREHOUSES">
            <summary>
            The Eurocode live load warehouses type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_LIVE_LOAD_STORAGE_BUILDINGS">
            <summary>
            The Eurocode live load storage buildings type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_LIGHT_VEHICLES">
            <summary>
            The Eurocode traffic load light vehicles type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_HEAVY_VEHICLES">
            <summary>
            The Eurocode traffic load heavy vehicles type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_TRAFFIC_LOAD_ROOFS">
            <summary>
            The Eurocode traffic load roofs type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_SNOW_LOAD">
            <summary>
            The Eurocode snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_WIND_LOAD">
            <summary>
            The Eurocode wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_FORCES_DUE_TO_TEMPERATURE_EFFECTS">
            <summary>
            The Eurocode forces due to temperature effects type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_DEAD_LOADS">
            <summary>
            The Eurocode imperfection load due to dead loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_LIVE_LOADS">
            <summary>
            The Eurocode imperfection load due to live loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_IMPERFECTION_LOAD_DUE_TO_SNOW_LOADS">
            <summary>
            The Eurocode imperfection load due to snow loads type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_ACCIDENTAL_LOAD">
            <summary>
            The Eurocode accidental load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.EUROCODE_EARTHQUAKE_LOAD">
            <summary>
            The Eurocode earthquake load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_DEAD_LOAD_ALONE">
            <summary>
            The British code dead load alone type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_DEADLOAD">
            <summary>
            The British code dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_IMPOSED_LOAD">
            <summary>
            The British code imposed load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_WIND_LOAD">
            <summary>
            The British code wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_TEMPERATURE_LOAD">
            <summary>
            The British code temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_VERTICAL_CRANE_LOAD">
            <summary>
            The British code vertical crane load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BRITISH_CODE_HORIZONTAL_CRANE_LOAD">
            <summary>
            The British code horizontal crane load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_DEAD_LOAD_ALONE">
            <summary>
            The AISC dead load alone type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_DEAD_LOAD">
            <summary>
            The AISC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_LIVE_LOAD">
            <summary>
            The AISC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_ROOF_LIVE_LOAD">
            <summary>
            The AISC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_WIND_LOAD">
            <summary>
            The AISC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_SNOW_LOAD">
            <summary>
            The AISC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_RAINWATER_LOAD">
            <summary>
            The AISC rainwater load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.AISC_EARTHQUAKE_LOAD">
            <summary>
            The AISC earthquake load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_PERMANENT_LOAD_FR">
            <summary>
            The CM66 permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_EXPLOITATION_LOAD_FR">
            <summary>
            The CM66 exploitation load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_TEMPERATURE_LOAD_FR">
            <summary>
            The CM66 temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_WIND_LOAD_FR">
            <summary>
            The CM66 wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SNOW_LOAD_FR">
            <summary>
            The CM66 snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SEISMIC_LOAD_HORIZONTAL_FR">
            <summary>
            The CM66 seismic load horizontal type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.CM66_SEISMIC_LOAD_VERTICAL_FR">
            <summary>
            The CM66 seismic load vertical type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_PERMANENT_LOAD_FR">
            <summary>
            The BAEL91 permanent load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_EXPLOITATION_LOAD_FR">
            <summary>
            The BAEL91 exploitation load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_TEMPERATURE_LOAD_FR">
            <summary>
            The BAEL91 temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_WIND_LOAD_FR">
            <summary>
            The BAEL91 wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_SNOW_LOAD_FR">
            <summary>
            The BAEL91 snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_SEISMIC_LOAD_FR">
            <summary>
            The BAEL91 seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.BAEL91_ACCIDENTAL_LOAD_FR">
            <summary>
            The BAEL91 accidental load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_DEAD_LOAD">
            <summary>
            The UBC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_LIVE_LOAD">
            <summary>
            The UBC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_ROOF_LIVE_LOAD">
            <summary>
            The UBC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_WIND_LOAD">
            <summary>
            The UBC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SNOW_LOAD">
            <summary>
            The UBC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_TEMPERATURE_LOAD">
            <summary>
            The UBC temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_FLUIDS_LOAD">
            <summary>
            The UBC fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SOIL_LOAD">
            <summary>
            The UBC soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_PONDING_LOAD">
            <summary>
            The UBC ponding load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.UBC_SEISMIC_LOAD">
            <summary>
            The UBC seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_DEAD_LOAD">
            <summary>
            The IBC dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_LIVE_LOAD">
            <summary>
            The IBC live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_ROOF_LIVE_LOAD">
            <summary>
            The IBC roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_WIND_LOAD">
            <summary>
            The IBC wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SNOW_LOAD">
            <summary>
            The IBC snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_TEMPERATURE_LOAD">
            <summary>
            The IBC temperature load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_FLUIDS_LOAD">
            <summary>
            The IBC fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SOIL_LOAD">
            <summary>
            The IBC soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_RAIN_LOAD">
            <summary>
            The IBC rain load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_PONDING_LOAD">
            <summary>
            The IBC ponding load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.IBC_SEISMIC_LOAD">
            <summary>
            The IBC seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_DEAD_LOAD">
            <summary>
            The ACI dead load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_LIVE_LOAD">
            <summary>
            The ACI live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_ROOF_LIVE_LOAD">
            <summary>
            The ACI roof live load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_WIND_LOAD">
            <summary>
            The ACI wind load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SEISMIC_LOAD">
            <summary>
            The ACI seismic load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SNOW_LOAD">
            <summary>
            The ACI snow load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_FLUIDS_LOAD">
            <summary>
            The ACI fluids load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_SOIL_LOAD">
            <summary>
            The ACI soil load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_RAIN_LOAD">
            <summary>
            The ACI rain load type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupType.ACI_TEMPERATURE_LOAD">
            <summary>
            The ACI temperature load type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.Colors">
            <summary>
            The possible display colors for loads in a load group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.BLACK">
            <summary>
            The black display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.WHITE">
            <summary>
            The white display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.RED">
            <summary>
            The red display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.GREEN">
            <summary>
            The green display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.BLUE">
            <summary>
            The blue display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.CYAN">
            <summary>
            The cyan display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.YELLOW">
            <summary>
            The yellow display color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.Colors.MAGENTA">
            <summary>
            The magenta display color.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.LoadGroup.LoadGroupDirection">
            <summary>
            The possible directions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_X">
            <summary>
            The X direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_Y">
            <summary>
            The Y direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_Z">
            <summary>
            The Z direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_X">
            <summary>
            The negative X direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_Y">
            <summary>
            The negative Y direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadGroup.LoadGroupDirection.DIR_NEG_Z">
            <summary>
            The negative Z direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.GroupName">
            <summary>
            The load group name. The maximum size is 126 characters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.GroupType">
            <summary>
            The load group type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Direction">
            <summary>
            The load group direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Compatible">
            <summary>
            This variable is used to store information on which groups are compatible 
            with each other in structural analysis load combination.
            
            Load combination is a process in which some simultaneously acting load groups 
            are multiplied by their partial safety factors and combined with each other 
            according to specific rules. 
            To accurately combine loads which have the same load group type, 
            you need to identify which load groups can occur at the same time,
            i.e. are <i>compatible</i>.
            This variable stores one integer, and all groups who have this same integer 
            are known to be compatible with each other. Depending on the analysis needs,
            they may be calculated together, in smaller combinations, or separately.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Incompatible">
            <summary>
            This variable is used to store information on which groups exclude each other
            in structural analysis load combination.
            
            Load combination is a process in which some simultaneously acting load groups 
            are multiplied by their partial safety factors and combined with each other 
            according to specific rules. 
            To accurately combine loads which have the same load group type, 
            you need to identify which load groups exclude each other,
            i.e. are <i>incompatible</i>.
            This variable stores one integer, and all groups who have this same integer 
            are known to be incompatible with each other.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadGroup.Color">
            <summary>
            The load group color. This variable indicates the color with which all 
            loads that belong to this same group are drawn in Tekla Structures views.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.#ctor">
            <summary>
            Creates a new load group instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.CheckVariables">
            <summary>
            Checks that all variables have a value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Insert">
            <summary>
            Inserts the load group into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Select">
            <summary>
            Selects a load group from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Modify">
            <summary>
            Modifies the existing load group in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadGroup.Delete">
            <summary>
            Deletes the load group instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.LoadLine">
            <summary>
            The LoadLine class defines a linearly-distributed force or torsion.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadLine L = new LoadLine();
                       L.P1 = new Vector(0000,0000,-1000);
                       L.P2 = new Vector(0000,0000,-1000);
                       L.DistanceA = 5;
                       L.DistanceB = 6;
                       L.Torsion1 = 1000;
                       L.Torsion2 = 2000;
                       L.Position1 = new Point(3000,12000,0);
                       L.Position2 = new Point(4000,12000,0);
                       L.LoadForm = LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_1;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 5;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadLine Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.LoadLine.LineLoadFormEnum">
            <summary>
            The line load form.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_1">
            <summary>
            The load magnitude is uniform across the loaded length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_2">
            <summary>
            The load has different magnitudes at the ends of the loaded length.
            The magnitude changes linearly between the ends.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_3">
            <summary>
            The load magnitude changes linearly, from zero at the ends of the loaded length,
            to a fixed value in the middle of the loaded length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadLine.LineLoadFormEnum.LOAD_FORM_LINE_4">
            <summary>
            The load magnitude changes linearly, from zero at one end of the loaded length,
            through two (different) values, back to zero at the other end.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Position1">
            <summary>
            The first input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Position2">
            <summary>
            The second input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.P1">
            <summary>
            The load magnitude vector at the start position.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.P2">
            <summary>
            The load magnitude vector at the end position.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Torsion1">
            <summary>
            The first torsion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.Torsion2">
            <summary>
            The second torsion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.LoadForm">
            <summary>
            The load form.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.DistanceA">
            <summary>
            The distance a (for shortening or dividing the length of a line load).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadLine.DistanceB">
            <summary>
            The distance b (for shortening or dividing the length of a line load).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.#ctor">
            <summary>
            Creates a new load line instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Insert">
            <summary>
            Inserts the load line into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Select">
            <summary>
            Selects a load line from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Modify">
            <summary>
            Modifies the existing load line in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadLine.Delete">
            <summary>
            Deletes the load line instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.LoadPoint">
            <summary>
            The LoadPoint class defines a concentrated force or a bending moment.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam FatherBeam = new Beam(new Point(3000,6000,0), new Point(4000,6000,0));
                       if (!FatherBeam.Insert())
                           Console.WriteLine("Father Beam Insert failed!");
            
                       LoadPoint L = new LoadPoint();
                       L.P = new Vector(3000,4000,5000);
                       L.Moment = new Vector(6000,7000,8000);
                       L.Position = new Point(3000,6000,0);
            
                       L.FatherId = FatherBeam.Identifier;
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 1;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadPoint Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.P">
            <summary>
            The load vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadPoint.Moment">
            <summary>
            The moment vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.#ctor">
            <summary>
            Creates a new load point instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Insert">
            <summary>
            Inserts the load point into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Select">
            <summary>
            Selects a load point from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Modify">
            <summary>
            Modifies the existing load point in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadPoint.Delete">
            <summary>
            Deletes the load point instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.LoadTemperature">
             <summary>
             The <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class defines a temperature change in a part, or a temperature difference between two part surfaces.
             </summary>
             <example>
             <code>
             using System;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                    public void Example1()
                    {
                        LoadTemperature temperatureLoad = new LoadTemperature();
                        temperatureLoad.Position1 = new Point(0, 0, 0);
                        temperatureLoad.Position2 = new Point(1000, 0, 0);
                        temperatureLoad.BoundingBoxDx = 500;
                        temperatureLoad.BoundingBoxDy = 500;
                        temperatureLoad.BoundingBoxDz = 500;
                        temperatureLoad.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                        temperatureLoad.PartFilter = "example";
                        temperatureLoad.TemperatureChangeForAxialElongation = 1.0;
                        temperatureLoad.TemperatureDifferentialSideToSide = 2.0;
                        temperatureLoad.TemperatureDifferentialTopToBottom = 3.0;
                        temperatureLoad.InitialAxialElongation = 4.0;
             
                        if (!temperatureLoad.Insert())
                        {
                            Console.WriteLine("Temperature load insert failed!");
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Spanning">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.PrimaryAxisDirection">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.AutomaticPrimaryAxisWeight">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Weight">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.LoadDispersionAngle">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.CreateFixedSupportConditionsAutomatically">
            <summary>
            Property not supported in <see cref="T:Tekla.Structures.Model.LoadTemperature"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Position1">
            <summary>
            Gets or sets the first input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.Position2">
            <summary>
            Gets or sets the second input position point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureChangeForAxialElongation">
            <summary>
            Gets or sets the temperature change for axial elongation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureDifferentialTopToBottom">
            <summary>
            Gets or sets the temperature differential from top to bottom.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.TemperatureDifferentialSideToSide">
            <summary>
            Gets or sets the temperature differential from side to side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadTemperature.InitialAxialElongation">
            <summary>
            Gets or sets the initial axial elongation.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Insert">
            <summary>
            Inserts the load temperature into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Select">
            <summary>
            Selects a load temperature from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Modify">
            <summary>
            Modifies the existing load temperature in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.Delete">
            <summary>
            Deletes the load temperature instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.CreateInstance">
            <summary>
            Inserts the load temperature into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.SelectInstance">
            <summary>
            Selects the load temperature from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.ModifyInstance">
            <summary>
            Modifies the existing load temperature in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.ToStruct(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            Method for populating struct values from corresponding object.
            </summary>
            <param name="commonAttributes">Reference to a struct which will be populated with common load attributes.</param>
            <param name="classAttributes">Reference to a struct which will be populated with class load attributes.</param>
        </member>
        <member name="M:Tekla.Structures.Model.LoadTemperature.FromStruct(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            Method for getting object values from corresponding struct.
            </summary>
            <param name="commonAttributes">Reference to struct which contains common load attributes.</param>
            <param name="classAttributes">Reference to struct which contains class load attributes.</param>
        </member>
        <member name="T:Tekla.Structures.Model.LoadUniform">
            <summary>
            The LoadUniform class defines a uniformly-distributed force bounded by a polygon.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       LoadUniform L = new LoadUniform();
                       L.P1 = new Vector(1000,2000,3000);
                       L.DistanceA = 5;
                       L.Polygon.Points.Add(new Point(9000, 12000, 0));
                       L.Polygon.Points.Add(new Point(11000, 12000, 0));
                       L.Polygon.Points.Add(new Point(11000, 15000, 0));
                       L.Polygon.Points.Add(new Point(7000, 15000, 0));
            
                       L.AutomaticPrimaryAxisWeight = true;
                       L.BoundingBoxDx = 500;
                       L.BoundingBoxDy = 500;
                       L.BoundingBoxDz = 500;
                       L.LoadDispersionAngle = 3;
                       L.PartFilter = "testing";
                       L.PartNames = Load.LoadPartNamesEnum.LOAD_PART_NAMES_INCLUDE;
                       L.PrimaryAxisDirection = new Vector(1000, 500, 0);
                       L.Spanning = Load.LoadSpanningEnum.LOAD_SPANNING_SINGLE;
                       L.Weight = 2;
                       L.CreateFixedSupportConditionsAutomatically = true;
            
                       if (!L.Insert())
                           Console.WriteLine("LoadUniform Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._Polygon">
            <summary>
            The position points for the uniform load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._P1">
            <summary>
            The P1 vector from the dialog.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoadUniform._DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.Polygon">
            <summary>
            The position points for the uniform load.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.P1">
            <summary>
            The load magnitude vector.
            The values are given in the local coordinate system of the load (not in the current coordinate system).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoadUniform.DistanceA">
            <summary>
            The distance a (for enlarging or reducing the loaded area).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.#ctor">
            <summary>
            Creates a new load uniform instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Insert">
            <summary>
            Inserts the load uniform into the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Select">
            <summary>
            Selects a load uniform from the model database. The ID must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Modify">
            <summary>
            Modifies the existing load uniform in the model database to match the current one.
            At the moment it is not possible to change the load attachment or the father.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoadUniform.Delete">
            <summary>
            Deletes the load uniform instance with the given ID from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Chamfer">
            <summary>
            The Chamfer class defines how the corners of a polybeam or a contour plate are rounded.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point1 = new ContourPoint(new Point(0, 4000, 0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000, 4000, 0), new Chamfer(0, 0, Chamfer.ChamferTypeEnum.CHAMFER_ARC_POINT));
                       ContourPoint point3 = new ContourPoint(new Point(0, 6000, 0), null);
            
                       point2.Chamfer.DZ1 = 2500;
                       point2.Chamfer.DZ2 = 0;
            
                       ContourPlate cp = new ContourPlate();
            
                       cp.AddContourPoint(point1);
                       cp.AddContourPoint(point2);
                       cp.AddContourPoint(point3);
                       cp.Finish = "FOO";
                       cp.Material.MaterialString = "Steel_Undefined";
                       cp.Profile.ProfileString = "PL200";
            
                       cp.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Chamfer.ChamferTypeEnum">
            <summary>
            The basic shape type of the chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_NONE">
            <summary>
            No chamfer type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_LINE">
            <summary>
            The line type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ROUNDING">
            <summary>
            The rounding type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ARC">
            <summary>
            The arc type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_ARC_POINT">
            <summary>
            The arc point type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_SQUARE">
            <summary>
            The square type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_SQUARE_PARALLEL">
            <summary>
            The square parallel type chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Chamfer.ChamferTypeEnum.CHAMFER_LINE_AND_ARC">
            <summary>
            The line and arc type chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.Type">
            <summary>
            The basic shape type of the chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.X">
            <summary>
            The dimension of the chamfer.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.Y">
            <summary>
            The second dimension of straight chamfers.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.DZ1">
            <summary>
            The thickness above the offset.
            <para>Note that this does nothing when used with the PolyBeam.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Chamfer.DZ2">
            <summary>
            The thickness below the offset.
            <para>Note that this does nothing when used with the PolyBeam.</para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Chamfer.#ctor">
            <summary>
            Creates a chamfer instance with the basic shape type CHAMFER_NONE.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Chamfer.#ctor(System.Double,System.Double,Tekla.Structures.Model.Chamfer.ChamferTypeEnum)">
            <summary>
            Instantiates a chamfer with the given values. 
            </summary>
            <param name="X">The X value of the chamfer.</param>
            <param name="Y">The Y value of the chamfer.</param>
            <param name="Type">The basic shape type of the chamfer.</param>
        </member>
        <member name="T:Tekla.Structures.Model.DeformingData">
            <summary>
            The DeformingData class holds information about the deforming of parts.
            Deformed parts are parts that have been warped, cambered or shortened.
            </summary>
            <example>
            The following example inserts a deformed beam:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam MyBeam = new Beam();
                       MyBeam.DeformingData.Angle = 0.0;
                       MyBeam.DeformingData.Angle2 = 45.00;
                       MyBeam.DeformingData.Cambering = 10.0;
                       MyBeam.DeformingData.Shortening = 20.0;
                       MyBeam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Angle">
            <summary>
            The angle of the part at its start point, relative to the part reference line.
            <para>For example, if the beam is warped 45 degrees at the end point, in the Angle field the value is 0,
            and the value is 45 in the Angle2 field.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Angle2">
            <summary>
            The angle of the part at its end point, relative to the part reference line.
            <para>For example, if the beam is warped 45 degrees at the end point, in the Angle field the value is 0,
            and the value is 45 in the Angle2 field.</para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Cambering">
            <summary>
            The degree of cambering.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.DeformingData.Shortening">
            <summary>
            The degree of shortening.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.DeformingData.#ctor">
            <summary>
            Instantiates a deforming data instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ChangeData">
            <summary>
            The ChangeData class presents information about the detected change of the modelobject in the model. It is instantiated inside the connected method.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ChangeData.ChangeTypeEnum">
            <summary>
            The types of changed event.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ChangeData.ChangeTypeEnum.OBJECT_INSERT">
            <summary>
            Object created
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ChangeData.ChangeTypeEnum.OBJECT_MODIFY">
            <summary>
            Object modified
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ChangeData.ChangeTypeEnum.OBJECT_DELETE">
            <summary>
            Object deleted
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ChangeData.ChangeTypeEnum.USERPROPERTY_CHANGED">
            <summary>
            User property of object changed
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ChangeData.modelObject">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ChangeData.Object">
            <summary>
            Gets the changed object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ChangeData.Type">
            <summary>
            Gets the changed object.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events">
            <summary>
            The Events class allows the user to register event listeners for model events.
            </summary>
            <remarks>
            Asynchronous event handling
            <para>Registered event handlers are called asynchronously so that many handlers may be running
            simultaneously. Event handlers are not guaranteed to be run in the same thread where they were registered.
            The asynchronous nature of the events requires the use of synchronization constructs on objects
            and data structures that are not defined to be thread safe.</para>
            <para>
            <list type="bullet">
            <item>Microsoft's documentation about the lock statement: http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx</item>
            <item>Microsoft's documentation about delegates: http://msdn.microsoft.com/en-us/library/900fyy8e.aspx</item>
            <item>Microsoft's documentation about managed threading: http://msdn.microsoft.com/en-us/library/1c9txz50.aspx</item>
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to make sure that only one selection event handler is running at a time.
            <code>
               using Tekla.Structures.Model;
               
               public class Example
               {
                   private Tekla.Structures.Model.Events _events = new Tekla.Structures.Model.Events();
                   private object _selectionEventHandlerLock = new object();
                   private object _changedObjectHandlerLock = new object();
                   
                   public void RegisterEventHandler()
                   {
                       _events.SelectionChange += Events_SelectionChangeEvent;
                       _events.ModelObjectChanged += Events_ModelObjectChangedEvent;
                       _events.Register();
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       _events.UnRegister();
                   }
                   
                   void Events_SelectionChangeEvent()
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock(_selectionEventHandlerLock)
                       {
                           System.Console.WriteLine("Selection changed event received.");
                       }
                   }
                   
                   void Events_ModelObjectChangedEvent(List&lt;ChangeData> changes)
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock (_changedObjectHandlerLock)
                       {
                           foreach(ChangeData data in changes)
                               System.Console.WriteLine("Changed event received " + ":" + data.Object.ToString() + ":" + " Type" + ":" + data.Type.ToString() + " guid: " + data.Object.Identifier.GUID.ToString());
                           System.Console.WriteLine("Changed event received for " + changes.Count.ToString() + " objects");
                       }
                   }
              }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Events.SelectionChangeDelegate">
            <summary>
            The delegate to use for selection change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.CommandStatusChangeDelegate">
            <summary>
            The delegate to use for command status change.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.TrackEventDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelSaveDelegate">
            <summary>
            The delegate to use for model save.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelSaveInfoDelegate">
            <summary>
            The delegate to use for model save with context information.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelSaveAsDelegate">
            <summary>
            The delegate to use for model save as.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelLoadDelegate">
            <summary>
            The delegate to use for model load.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelLoadInfoDelegate">
            <summary>
            The delegate to use for extended model load.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.NumberingDelegate">
            <summary>
            The delegate to use for numbering.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelChangedDelegate">
            <summary>
            The delegate to use for database commit.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelObjectNumberedDelegate">
            <summary>
            The delegate to use for model objects which are numbered.
            ModelObjects contain only identifier information. If properties need to be checked, Select() for object is required.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ModelObjectChangedDelegate">
            <summary>
            The delegate to use for changed model objects. 
            ModelObject inside ChangeData contains only identifier information. If properties need to be checked, Select() for object is required.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.TeklaStructuresExitDelegate">
            <summary>
            The delegate to use for Tekla Structures exit.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ClashCheckDoneDelegate">
            <summary>
            The delegate to use for clash check completion.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ClashDetectedDelegate">
            <summary>
            The delegate to use for clash detection.
            Encapsulates any method that takes a clash check data object as a parameter.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.PointInputChangedDelegate">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.Events.InterruptedDelegate">
            <summary>
            The delegate to use for interrupted event
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Events.ProjectInfoChangedDelegate">
            <summary>
            The delegate to use for change in project info.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.SelectionChange">
            <summary>
            The SelectionChange event is raised when the user changes the current selection inside Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.AnnotationSelectionChange">
            <summary>
            The SelectionChange event is raised when the user changes the current selection of an annotation inside Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.CommandStatusChange">
            <summary>
            The CommandStatusChange event is raised when a command is started/ended.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.TrackEvent">
            <exclude/>
        </member>
        <member name="E:Tekla.Structures.Model.Events.PointInputChanged">
            <exclude/>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelSave">
            <summary>
            The ModelSave event is raised just after a model has been saved.
            </summary>
            [Obsolete("Deprecated. Please use OnModelSaveInfo instead.", false)]
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelSaveInfo">
            <summary>
            The ModelSave event is raised just after a model has been saved with the model save information as a string parameter.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelSaveAs">
            <summary>
            The ModelSaveAs event is raised just after a model has been saved using save as.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelLoad">
            <summary>
            The ModelLoad event is raised just after a model has been loaded.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelLoadInfo">
            <summary>
            The ModelLoadInfo event is raised just after a model has been loaded with the model load information as a string parameter.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelUnloading">
            <summary>
            The ModelUnloading event is raised just before the model is unloaded.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.Numbering">
            <summary>
            The Numbering event is raised just after a model has been numbered.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelChanged">
            <summary>
            The ModelChanged event is raised just after some changes have been made to the model.
            <para>Note, this event is however not triggered when UNDO or REDO are performed.</para>
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelObjectNumbered">
            <summary>
            The ModelObjectNumbered event is raised when model object is numbered.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ModelObjectChanged">
            <summary>
            The ModelObjectChanged event is raised just after some changes have been made to the model objects.
            <para>Note, this event is triggered when UNDO or REDO are performed!!</para>
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.TeklaStructuresExit">
            <summary>
            The TeklaStructuresExit event is raised just before Tekla Structures exits. After this event has been called 
            the user will no longer be able to perform any calls to Tekla Structures.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ClashCheckDone">
            <summary>
            The ClashCheckDone event is raised just after clash check is completed.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ClashDetected">
            <summary>
            The ClashDetected event is raised just after the detection of each clash.
            The clash information is saved before the event is triggered. 
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.Interrupted">
            <summary>
            Occurs when user interrupts.
            </summary>
        </member>
        <member name="E:Tekla.Structures.Model.Events.ProjectInfoChanged">
            <summary>
            The ProjectInfoChanged event is raised just after some changes have been made to the project info.
            <para>Note, this event is however not triggered when UNDO or REDO are performed.</para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnSelectionChange(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnAnnotationSelectionChange(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnCommandStatusChange(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnTrackEvent(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnPointInputChangedEvent(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelSave(System.String,System.Object[])">
            <exclude/>
            [Obsolete("Deprecated. Please use OnModelSaveInfo instead.", false)]
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelSaveInfo(System.String,System.Object[])">
            <summary>
            Called when model is saved.
            </summary>
            <param name="eventName">Name of the save event.</param>
            <param name="parameters">Event parameters. Contains the code which specifies the reason of the save action.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelSaveAs(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelLoad(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelLoadInfo(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelUnloading(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnNumbering(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelObjectNumbered(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnModelObjectChanged(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnDbCommit(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnTeklaStructuresExit(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnClashCheckDone(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnClashDetected(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnInterrupted">
            <summary>
            Called when uesr interrupts.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.OnProjectInfoChanged(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.Model.Events.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Events.#ctor">
            <summary>
            Creates an empty events instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.Register">
            <summary>
            Registers the instance to listen to the specified events.
            More event delegates should not be added without calling UnRegister
            first.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Events.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InputCollection">
            <summary>
            The InputCollection class handles collection of the input items containing input objects and positions. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputCollection._InputItems">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.#ctor">
            <summary>
            Creates a new input item collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.InputCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.InputCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.InputItem">
            <summary>
            The InputItem class is used to store input objects and positions. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.InputItem.InputTypeEnum">
            <summary>
            Defines the type of the input.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_1_POINT">
            <summary>
            The input is one point. The data is returned as a point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_2_POINTS">
            <summary>
            The input is two points. The data is returned as an array list of points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_POLYGON">
            <summary>
            The input is any number of points (a polygon). The data is returned as an array list of points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_1_OBJECT">
            <summary>
            The input is one model object. The data is returned as a model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.InputItem.InputTypeEnum.INPUT_N_OBJECTS">
            <summary>
            The input is any number of model objects. The data is returned as an array list of model objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InputItem.GetInputType">
            <summary>
            Returns the type of the input item.
            </summary>
            <returns>The type of the input item.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.InputItem.GetData">
            <summary>
            Returns the data of the input item.
            See also: <see cref="T:Tekla.Structures.Model.InputItem.InputTypeEnum"/>.
            </summary>
            <returns>The input data.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Material">
            <summary>
            The Material class represents a single material that parts can be made of.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam beam = new Beam(new Point(5000, 7000, 0), new Point(6000, 7000, 0));
                       beam.Material.MaterialString = "K40-1";
                       beam.Profile.ProfileString = "250*250";
                       beam.Finish = "PAINT";
            
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Material.MaterialString">
            <summary>
            Identifies the material in a string format.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Material.#ctor">
            <summary>
            Instantiates an empty material instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Messages">
            <summary>
            A static class where common messages is to be added
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.PartGeometryImportFailed">
            <summary>
            Error message from class Tekla.Structures.ModelInternal.GeometryExporter
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.PartGeometryExportFailed">
            <summary>
            Error message from class Tekla.Structures.ModelInternal.GeometryExporter
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.InvalidNumberOfPoints">
            <summary>
            Error message from class Tekla.Structures.Model.ConnectiveGeometry
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.ExtensionIntersectsWithPlate">
            <summary>
            Extension plate clashes with plates.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.FacesTooNearEachOther">
            <summary>
            Faces to be connected overlap.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.FacePerpendicularToIntersectionLine">
            <summary>
            Face perpendicular to intersection line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.FacesAtAnObtuseAngle">
            <summary>
            Faces to be connected are too steep of an angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.UndefinedCurveDirection">
            <summary>
            Can't make inward/outward curve check.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.PlateIntersectsWithIntersectionLine">
            <summary>
            Plate polygon extends beyond intersection line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.UnsupportedChamfer">
            <summary>
            Plates containing unsupported chamfer information.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.InvalidRadius">
            <summary>
            Cannot connect parts with a cylindrical section having the provided radius.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.InvalidFacePoints">
            <summary>
            Cannot create geometry from requested face points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.GeneralConnectiveGeometryFailure">
            <summary>
            General failure mode.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.SpiralBeamDefinitionPointsTooClose">
            <summary>
            Spiral beam definition points are too close.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.SpiralBeamDefinitionPointsCannotBeAligned">
            <summary>
            Spiral beam definition points are on line with sweep direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Messages.SpiralBeamZeroTotalRiseWithMore360Degrees">
            <summary>
            Spiral beam total rise is zero and rotation angle more than 360 degrees.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.NumberingSeries">
            <summary>
            The NumberingSeries class describes how an object is to be numbered.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeries.Prefix">
            <summary>
            The prefix in numbering.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeries.StartNumber">
            <summary>
            The start number in numbering.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeries.#ctor">
            <summary>
            Instantiates a default numbering.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeries.#ctor(System.String,System.Int32)">
            <summary>
            Instantiates a numbering series with the given arguments.
            </summary>
            <param name="Prefix">The prefix to be used.</param>
            <param name="Number">The start number to be used.</param>
        </member>
        <member name="T:Tekla.Structures.Model.Offset">
            <summary>
            The Offset class defines the offset value of start points and end points. The offset is the
            distance from the current work plane in the three global directions.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 0, 0);
                       Point point2 = new Point(1000, 0, 0);
            
                       Beam beam = new Beam(point, point2);
            
                       beam.StartPointOffset.Dx = 105.0;
                       beam.StartPointOffset.Dy = 205.0;
                       beam.StartPointOffset.Dz = 305.0;
            
                       beam.EndPointOffset.Dx = 405.0;
                       beam.EndPointOffset.Dy = 505.0;
                       beam.EndPointOffset.Dz = 605.0;
            
                       beam.Profile.ProfileString = "HEA400";
                       beam.Finish = "PAINT";
            
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dx">
            <summary> The current object's Dx offset. This value is defined using the object's coordinate system. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dy">
            <summary> The current object's Dy offset. This value is defined using the current work plane. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Offset.Dz">
            <summary> The current object's Dz offset. This value is defined using the current work plane. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Offset.#ctor">
            <summary> Instantiates an offset with zero distance. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Phase">
            <summary>
            The Phase class defines a model object phase.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point1 = new Point(4000, 4000, 0);
                       Point Point2 = new Point(7000, 4000, 0);
                       Point Point3 = new Point(4000, 6000, 0);
                       Point Point4 = new Point(7000, 6000, 0);
                       Beam Beam1 = new Beam(Point1, Point2);
                       Beam Beam2 = new Beam(Point3, Point4);
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam2.Profile.ProfileString = "HEA400";
                       Beam2.Finish = "PAINT";
                       Beam1.Insert();
                       Beam2.Insert();
                       Phase Beam1Phase = new Phase();
                       Beam1.GetPhase(out Beam1Phase);
                       int PhaseNumber = Beam1Phase.PhaseNumber;
                       string PhaseName = Beam1Phase.PhaseName;
                       string PhaseComment = Beam1Phase.PhaseComment;
                       Phase Beam2Phase = new Phase();
                       Beam2.GetPhase(out Beam2Phase);
                       if(Beam1Phase.PhaseNumber != Beam2Phase.PhaseNumber)
                       {
                           if(Convert.ToBoolean(Beam1Phase.IsCurrentPhase))
                               Beam2.SetPhase(Beam1Phase);
                           else
                               Beam1.SetPhase(Beam2Phase);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Phase.PhaseManipulationTypeEnum">
            <summary> The object manipulation types.  </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Phase.PhaseAttributeOperationTypeEnum">
            <summary> Type of phase property operation: get/set.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Phase._IsCurrentPhase">
            <summary>
            Is current phase or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseNumber">
            <summary>
            The phase number.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseName">
            <summary>
            The phase name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.PhaseComment">
            <summary>
            The phase comment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Phase.IsCurrentPhase">
            <summary>
            The value is 1 if the phase is the current phase, 0 otherwise.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor">
            <summary>
            Instantiates a new phase with the phase number 0.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor(System.Int32)">
            <summary>
            Instantiates a new phase with the given phase number.
            </summary>
            <param name="PhaseNumber">The number of the phase.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Instantiates a new phase with the given parameters.
            </summary>
            <param name="PhaseNumber">The number of the phase.</param>
            <param name="PhaseName">The name of the phase.</param>
            <param name="PhaseComment">The comment of the phase.</param>
            <param name="IsCurrentPhase">The value is 1 if the phase is the current phase, 0 otherwise.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Insert">
            <summary> Creates a new phase. </summary>
            <returns>True on success, false if failed (the reason for the failure is probably that
            the phase number already exists).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Select">
            <summary> Selects a phase. </summary>
            <returns>True on success, false if failed (PhaseNumber should be higher than 0).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Modify">
            <summary> Modifies a phase. </summary>
            <returns>True on success, false if failed (PhaseNumber should be higher than 0).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.Delete">
            <summary> Deletes a phase. The current phase cannot be deleted. </summary>
            <returns>True on success, false if failed (the attached objects probably caused the failure).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.String)">
            <summary> Sets a string property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.Double)">
            <summary> Sets a double property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.SetUserProperty(System.String,System.Int32)">
            <summary> Sets an integer property for the phase. </summary>
            <param name="Name">The name of the property to be set, in capital letters.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.String@)">
            <summary> Retrieves a string property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.Double@)">
            <summary> Retrieves a double property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Phase.GetUserProperty(System.String,System.Int32@)">
            <summary> Retrieves an integer property for the phase.</summary>
            <param name="Name">The name of the property to be retrieved, in capital letters.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.PhaseCollection">
            <summary>
            The PhaseCollection class handles the collection of the model phases.
            </summary>
            <example>
            The following example gets the phases of the model and shows the values of the PhaseName and
            PhaseNumber properties in a message dialog:
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model CurrentModel = new Model();
                       PhaseCollection PhaseCollection = CurrentModel.GetPhases();
            
                       if (CurrentModel.GetConnectionStatus())
                       {
                           foreach(Phase p in PhaseCollection)
                           {
                                MessageBox.Show("Name = " + p.PhaseName + ", number = " + p.PhaseNumber);
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.PhaseCollection._Phases">
            <summary>
            Contains all the Phases of the model
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.#ctor">
            <summary>
            Creates a new phase collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.GetPhases">
            <summary>
            Get current Phases.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="Array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="Index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown when the type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.PhaseCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.PhaseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.Position">
            <summary>
            The Position class defines how a part is positioned relative to the input.
            </summary>
            <example>
            Defining the position of a bolt array instance:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       BoltArray MyBoltArray = new BoltArray();
            
                       MyBoltArray.Position.Depth = Position.DepthEnum.MIDDLE;
                       MyBoltArray.Position.DepthOffset = 3;
                       MyBoltArray.Position.Plane = Position.PlaneEnum.MIDDLE;
                       MyBoltArray.Position.PlaneOffset = 1;
                       MyBoltArray.Position.Rotation = Position.RotationEnum.FRONT;
                       MyBoltArray.Position.RotationOffset = 2;
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Position.PlaneEnum">
            <summary>
            The position in the plane sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.MIDDLE">
            <summary>
            The middle option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.LEFT">
            <summary>
            The left option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.PlaneEnum.RIGHT">
            <summary>
            The right option.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position.DepthEnum">
            <summary>
            The position in the depth sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.MIDDLE">
            <summary>
            The middle option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.FRONT">
            <summary>
            The front option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.DepthEnum.BEHIND">
            <summary>
            The behind option.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Position.RotationEnum">
            <summary>
            The position in the rotational sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.FRONT">
            <summary>
            The front option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.TOP">
            <summary>
            The top option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.BACK">
            <summary>
            The back option.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Position.RotationEnum.BELOW">
            <summary>
            The below option.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.PlaneOffset">
            <summary>
            The offset away from the Plane value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.DepthOffset">
            <summary>
            The offset away from the Depth value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.RotationOffset">
            <summary>
            The offset away from the Rotation value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Plane">
            <summary>
            Indicates the positioning in the plane sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Depth">
            <summary>
            Indicates the positioning in the depth sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Position.Rotation">
            <summary>
            Indicates the positioning in the rotational sense.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Position.#ctor">
            <summary>
            Creates a new position instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Profile">
            <summary>
            The Profile class defines the form of a cross section.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Profile.ProfileString">
            <summary>
            The profile in human-readable form.
            </summary>
            <example>
            The profile of a beam is set to standard L profile "L400*200*60":
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(5000, 0, 0);
                       Point point2 = new Point(7000, 0, 0);
                       Beam Beam = new Beam(point, point2);
            
                       string ParametricProfileSeparator = "*";
                       string ShapeTypeL = "L";
                       string LshapeProfileDepth = "400";
                       string LshapeProfileWidth = "200";
                       string LshapeProfileThickness = "60";
            
                       Beam.Profile.ProfileString = ShapeTypeL;
                       Beam.Profile.ProfileString += LshapeProfileDepth;
                       Beam.Profile.ProfileString += ParametricProfileSeparator;
                       Beam.Profile.ProfileString += LshapeProfileWidth;
                       Beam.Profile.ProfileString += ParametricProfileSeparator;
                       Beam.Profile.ProfileString += LshapeProfileThickness;
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.#ctor">
            <summary>
            Instantiates an empty profile.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.ParseProfileString(System.String)">
            <summary>
            Parses profile string
            </summary>
            <param name="profileString">profile string</param>
            <returns>Parsed profile string, if not successful returns original string</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.FormatProfileString(System.String)">
            <summary>
            Formats profile string
            </summary>
            <param name="profileString">profile string</param>
            <returns>Formatted profile string, if not successful returns original string</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.ToStruct(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            To struct
            </summary>
            <param name="profile">the profile</param>
        </member>
        <member name="M:Tekla.Structures.Model.Profile.FromStruct(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            From struct
            </summary>
            <param name="profile">the profile</param>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckHandler">
            <summary>
            The ClashCheckHandler class contains clash check methods. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Exmaple1()
                   {
                       Model MyModel = new Model();
            
                       ClashCheckHandler ClashCheck = MyModel.GetClashCheckHandler();
                       ClashCheck.RunClashCheck();
                       ClashCheck.StopClashCheck();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.#ctor">
            <summary>
            Internal constructor for ClashCheckHandler.
            Should be instantiated only from Model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.RunClashCheck">
            <summary>
            Starts the clash checking. Uses advanced options sa option values.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.RunClashCheckWithOptions(System.Boolean,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Starts the clash checking with options.
            </summary>
            <param name="betweenReferenceModels">True, if clash check should be performed between reference models.</param>
            <param name="objectsInsideReferenceModels">True, if clash check should be performed to objects inside reference models.</param>
            <param name="minDistance">The minimum distance value.</param>
            <param name="betweenParts">True, if clash check should be performed between native parts.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.StopClashCheck">
            <summary>
            Stops the clash checking.
            </summary>
            <returns>True on success.</returns>
            <remarks>Stops the clash check only when the Advanced Options' XS_USE_NEW_CLASH_CHECK is set.</remarks>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckHandler.GetIntersectionBoundingBoxes(Tekla.Structures.Identifier,Tekla.Structures.Identifier)">
            <summary>
            Get a list of bounding boxes (AABB) of the clashing volumes of two objects.
            </summary>
            <param name="ID1">The identifier of the first object.</param>
            <param name="ID2">The identifier of the second object.</param>
            <returns>A list of bounding boxes of the clashing volumes.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckData">
            <summary>
            The ClashCheckData class presents information about the detected clash. It is instantiated inside the onClashDetected method.
            The objects store the identifiers and type of the clash to be passed on to event subscribers.   
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum">
            <summary>
            An enumeration for the different clash types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_INVALID">
            <summary>
            The invalid clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_ISINSIDE">
            <summary>
            One object is inside the other object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_EXACTMATCH">
            <summary>
            The exact match clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_CLASH">
            <summary>
            The unidentified clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_MINDISTANCE">
            <summary>
            The minimum distance clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_FAILEDSOLID">
            <summary>
            The failed solid clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_CUTTHROUGH">
            <summary>
            The cut through clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_COMPLEXCLASH">
            <summary>
            The complex clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData.ClashTypeEnum.CLASH_TYPE_FAILEDTEST">
            <summary>
            The failed test clash type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ClashCheckData._Identifier1">
            <summary>
            Private variables
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Object1">
            <summary>
            Gets the first clashing object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Object2">
            <summary>
            Gets the second clashing object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Type">
            <summary>
            Gets the type of the clash.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ClashCheckData.Overlap">
            <summary>
            Gets the overlap of the clash. Only applies to clashes of type CLASH_TYPE_CLASH.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckData.ToStruct(Tekla.Structures.ModelInternal.dotClash_t)">
            <summary>
            From ClashCheckData to dotClash_t.
            </summary>
            <param name="Clash"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ClashCheckData.FromStruct(Tekla.Structures.ModelInternal.dotClash_t)">
            <summary>
            From dotClash_t to ClashCheckData.
            </summary>
            <param name="Clash"></param>
        </member>
        <member name="T:Tekla.Structures.Model.Model">
            <summary>
            The Model class represents a single model open in Tekla Structures.
            Before interaction with the model, the user will have to create one
            instance of this class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Model.#ctor">
            <summary>
            Creates a "handle" to the currently open model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetConnectionStatus">
            <summary>
            Returns true if a proper connection to the Tekla Structures process has been established. 
            Currently, there's no way to re-establish the connection.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetInfo">
            <summary>
            Returns information about the currently open model.
            </summary>
            <returns>A ModelInfo instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetProjectInfo">
            <summary>
            Returns information about the current model's project.
            </summary>
            <returns>A ProjectInfo instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetPhases">
            <summary>
            Returns information about the current model's phases.
            </summary>
            <returns>A PhaseCollection instance on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetModelObjectSelector">
            <summary>
            Returns a ModelObjectSelector instance from which different kind of selections
            can be made.
            </summary>
            <returns>A new ModelObjectSelector instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.SelectModelObject(Tekla.Structures.Identifier,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Takes as Input an ID to a object and then instantiates and selects it before returning it.
            </summary>
            <param name="ID">The identifier of the ModelObject that we wish to select</param>
            <param name="Type">Type of the object</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.SelectModelObject(Tekla.Structures.Identifier)">
            <summary>
            Takes as input an identifier to an object and then checks its type and 
            instantiates and selects it before returning it.
            </summary>
            <param name="ID">The identifier of the model object that is to be selected.</param>
            <returns>The selected model object with the given identifier,
            or null if object does not exists or object data loading failed for some reason.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.FetchModelObjects(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Fetches a list of modelobjects based on given guid list of objects, 
            checks if guid is native or external (for reference model object)
            and optionally selects objects before returning them.
            </summary>
            <param name="Guids">The GUID list to look for in the model.</param>
            <param name="SelectInstances">Optional parameter whether object is selected, default = true.</param>
            <returns>The model objects with the given guids,
            or empty list if any of the objects do not exists or object data loading failed for some reason.</returns>
            <example>
            Guids of selected model objects are stored to list and fetched using guid list:
            <code>
            using System;
            using System.Collections.Generic;
            using System.Windows.Forms;
            using Tekla.Structures.Model;
            using TSMU = Tekla.Structures.Model.UI;
            
            public class Example
            {
                public void Example1()
                {
                    Model model = new Model();
            
                    var selector = new TSMU.ModelObjectSelector();
                    var selection = selector.GetSelectedObjects();
                    var guidList = new List&lt;string&gt;();
                    
                    foreach (ModelObject obj in selection)
                    {
                        var ro = obj as ReferenceModelObject;
                        string guid = string.Empty;
                        if (ro != null)
                        {
                            if(ro.GetReportProperty("EXTERNAL.GUID", ref guid))
                                guidList.Add(guid);
                        }
                        else
                        {
                            guidList.Add(obj.Identifier.GUID.ToString());
                        }
                    }
                    
                    var objList = model.FetchModelObjects(guidList, false);
                    
                    MessageBox.Show(objList.Count.ToString() + " objects found.");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetIdentifierByGUID(System.String)">
            <summary>
            Returns an identifier instance that has the given GUID in the model.
            </summary>
            <param name="guid">The GUID to look for in the model.</param>
            <returns>The identifier of the GUID, or null if not found.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetGUIDByIdentifier(Tekla.Structures.Identifier)">
            <summary>
            Returns the GUID of the given identifier instance.
            </summary>
            <param name="identifier">The identifier to look for in the model.</param>
            <returns>The GUID of the identifier.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.CommitChanges">
            <summary>
            Commits the changes made to the model database so far. One commit is something that a
            user can later on undo with the undo command. A commit also launches the drawing of the
            changed product model to the visible views. A dependent plug-in should never call CommitChanges, 
            since this would make undo very difficult for the user to do. However, non-dependent plug-ins 
            require a separate commit if new objects are created.
            </summary>
            <returns>True on success.</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.Model.CommitChanges(System.String)">
            <summary>
            Commits the changes made to the model database so far. One commit is something that a
            user can later on undo with the undo command. A commit also launches the drawing of the
            changed product model to the visible views. A plug-in should never call CommitChanges, 
            since this would make undo very difficult for the user to do.
            </summary>
            <param name="Message">The message to be saved with the commit.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetWorkPlaneHandler">
            <summary>
            Returns a new work plane handler for the model. The work plane handler
            can be used to manipulate the current work plane in the model.
            </summary>
            <returns>The new work plane handler instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Model.GetClashCheckHandler">
            <summary>
            Returns a new clash check handler.
            </summary>
            <returns>The new clash check handler instance.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelHandler">
            <summary>
            The ModelHandler class provides information about the currently open Tekla Structures
            model.
            </summary>
            <example>
            The following example opens the model that is in the C:\teklastructuresmodels\NewModel17 folder
            and shows a message if the opening was successful.
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       ModelHandler handler = new ModelHandler();
                       if (handler.IsModelSaved())
                       {
                           if (handler.Open("C:\\teklastructuresmodels\\NewModel17"))
                               MessageBox.Show("The model opened successfully.");
                       }
                       else    
                           MessageBox.Show("The current model is not saved.");
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.#ctor">
            <summary> Creates a new ModelHandler instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.CreateNewSingleUserModel(System.String,System.String,System.String)">
            <summary> Creates a new single user model. </summary>
            <summary> Current model is not saved in the operation. </summary>
            <param name="ModelName">The name for the new model.</param>
            <param name="ModelFolder">The folder path for the new model.</param>
            <param name="Template">The optional template name for the new model.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.CreateNewMultiUserModel(System.String,System.String,System.String)">
            <summary> Creates a new multi-user model. </summary>
            <summary> Current model is not saved in the operation. </summary>
            <param name="ModelName">The name for the new model.</param>
            <param name="ModelFolder">The folder path for the new model.</param>
            <param name="ServerName">The multi user server name.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.Save(System.String,System.String)">
            <summary> Saves current model with comment and user information. </summary>
            <param name="Comment">The comment for save operation, used only with multi-user models.</param>
            <param name="User">The user identification, used only with multi-user models.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.Save(System.String,System.String,System.String)">
            <summary> Saves current model with comment and user information. </summary>
            <param name="Comment">The comment for save operation, used only with multi-user models.</param>
            <param name="User">The user identification, used only with multi-user models.</param>
            <param name="Reason">The reason why this model save is being called. Used for identifying model save events.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.Open(System.String,System.Boolean)">
            <summary>Opens a new model to Tekla Structures without saving changes to current model.</summary>
            <param name="ModelFolder">The model folder path to be used.</param>
            <param name="OpenAutoSaved">Tells whether to open auto saved information or not. Optional parameter, default = false</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.Close">
            <summary>Closes current model.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.IsModelSaved">
            <summary>Tells whether current model has been saved.</summary>
            <returns>True if there are no unsaved changes in the model.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelHandler.IsModelAutoSaved(System.String)">
            <summary>Tells whether a model has auto saved information.</summary>
            <param name="ModelFolder">The model folder path to be used.</param>
            <returns>True if there is auto saved information.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelInfo">
            <summary>
            The ModelInfo class provides information about the currently open Tekla Structures
            model.
            </summary>
            <example>
            When Tekla Structures is running the length of the model name tells you whether the model
            is open.
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Model CurrentModel = new Model();
                    ModelInfo Info = CurrentModel.GetInfo();
            
                    if (CurrentModel.GetConnectionStatus())
                    {
                        if (Info.ModelName.Length == 0)
                        {
                            MessageBox.Show("A Tekla Structures model is not open.");
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.NorthDirection">
            <summary> The north direction of the current Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.ModelPath">
            <summary> The path to the Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.ModelName">
            <summary> The name of the Tekla Structures model. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.CurrentPhase">
            <summary> The number of the Tekla Structures model's current phase. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.SharedModel">
            <summary> The read-only property of the Tekla Structures model's sharing status. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelInfo.SingleUserModel">
            <summary> The read-only property if the Tekla Structures model is a single user model. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelInfo.#ctor">
            <summary> Creates a new ModelInfo instance without Tekla Structurea model name, path, or version information. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelInfo.GetInfo">
            <summary> Get current model info. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject">
             <summary>
             The ModelObject class is an abstract base class for all model objects, such as parts, bolts,
             welds and reinforcements.
             </summary>
             <remarks>
             One way to find out the correct names of the report properties is to open the Template Editor.
             With the Template Editor you can see the listing of all the properties that can be added to
             report templates.
             </remarks>
             <example>
             In the following example a connection to the Tekla Structures model has already been established and
             next the values of some user-defined attributes (UDAs) are going to be found out.
             The UDAs asked are the string value of CHECKED_BY, the double value of CHECKED_DATE,
             and the integer value of OBJECT_LOCKED.
             <code>
             using Tekla.Structures.Model;
             using System;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Model Model = new Model();
            
                        ModelObjectEnumerator ObjectEnum = Model.GetModelObjectSelector().GetAllObjects();
                        ObjectEnum.SelectInstances = false; // Set the "SelectInstances" to false to speed up the enquiry; possible because only report properties are asked.
            
                        string Result = "CHECKED BY, CHECKED DATE, OBJECT LOCKED \n";
                        while(ObjectEnum.MoveNext())
                        {
                            if(ObjectEnum.Current != null)
                            {
                                Beam BeamObject = ObjectEnum.Current as Beam;
                                if(BeamObject != null)
                                {
                                    string CheckedBy = "";
                                    double DateCheckedValue = 0.0;
                                    int LockedStatus = -1;
            
                                    DateTime DateChecked = new System.DateTime(1970, 1, 1);
            
                                    BeamObject.GetUserProperty("CHECKED_BY", ref CheckedBy);
                                    BeamObject.GetUserProperty("CHECKED_DATE", ref DateCheckedValue);
                                    BeamObject.GetUserProperty("OBJECT_LOCKED", ref LockedStatus);
                                    if(CheckedBy.Length > 0 || DateCheckedValue > 0.0 ||
                                        LockedStatus != -1)
            
                                    DateChecked = DateChecked.AddSeconds(DateCheckedValue);
                                    Result += CheckedBy;
                                    Result += ", ";
                                    Result += DateChecked.ToString("dd.MM.yyyy");
                                    if(LockedStatus == 1)
                                    {
                                        Result += ", Locked\n";
                                    }
                                    else
                                    {
                                        Result += ", Not locked\n";
                                    }
                                }
                            }
                        }
                        MessageBox.Show(Result);
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.modificationTimeInfo">
            <summary>Caching field for <see cref="P:Tekla.Structures.Model.ModelObject.ModificationTimeInfo"/>.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject.ModelObjectEnum">
            <summary>
            All possible concrete model object subclasses are defined here. This enumeration can be used to
            fetch certain types of objects from the Tekla Structures model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.UNKNOWN">
            <summary>
            The unknown model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BEAM">
            <summary>
            The beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POLYBEAM">
            <summary>
            The polybeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTOURPLATE">
            <summary>
            The contour plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOOLEANPART">
            <summary>
            The boolean part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.FITTING">
            <summary>
            The fitting.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CUTPLANE">
            <summary>
            The cutplane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SURFACE_TREATMENT">
            <summary>
            The surface treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.WELD">
            <summary>
            The weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ASSEMBLY">
            <summary>
            The assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SINGLEREBAR">
            <summary>
            The single rebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARGROUP">
            <summary>
            The rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARMESH">
            <summary>
            The rebar mesh.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBARSTRAND">
            <summary>
            The rebar strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_PLANE">
            <summary>
            The control plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_ARRAY">
            <summary>
            The bolt array.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_CIRCLE">
            <summary>
            The bolt circle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BOLT_XYLIST">
            <summary>
            The bolt XY list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_POINT">
            <summary>
            The point load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_LINE">
            <summary>
            The line load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_AREA">
            <summary>
            The area load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_UNIFORM">
            <summary>
            The uniform load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.GRID">
            <summary>
            The grid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.GRIDPLANE">
            <summary>
            The grid plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONNECTION">
            <summary>
            The connection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.COMPONENT">
            <summary>
            The component.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SEAM">
            <summary>
            The seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.DETAIL">
            <summary>
            The detail.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REFERENCE_MODEL">
            <summary>
            The reference model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_SPLICE">
            <summary>
            The rebar splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_GROUP">
            <summary>
            The load group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK_DEPENDENCY">
            <summary>
            The task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.TASK_WORKTYPE">
            <summary>
            The task worktype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POLYGON_WELD">
            <summary>
            The polygon weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOGICAL_WELD">
            <summary>
            The logical weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CIRCLEREBAR">
            <summary>
            The circle rebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.HIERARCHIC_DEFINITION">
            <summary>
            The hierarchic definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.HIERARCHIC_OBJECT">
            <summary>
            The hierarchic object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ANALYSIS_GEOMETRY">
            <summary>
            The analysis geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.ANALYSIS_PART">
            <summary>
            The analysis part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REFERENCE_MODEL_OBJECT">
            <summary>
            The reference model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CUSTOM_PART">
            <summary>
            The custom part object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CIRCLE_REBARGROUP">
            <summary>
            The circle rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CURVED_REBARGROUP">
            <summary>
            The curved rebar group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.EDGE_CHAMFER">
            <summary>
            The edge chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POUR_OBJECT">
            <summary>
            The pour object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POUR_BREAK">
            <summary>
            The pour break.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_LINE">
            <summary>
            The control line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOAD_TEMPERATURE">
            <summary>
            The temperature load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BREP">
            <summary>
            The Brep part instance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_CIRCLE">
            <summary>
            The control circle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_POINT">
            <summary>
            The control point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_SET">
            <summary>
            The rebar set.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_SET_ADDITION">
            <summary>
            The rebar set addition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_PROPERTY_MODIFIER">
            <summary>
            The rebar property modifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_END_DETAIL_MODIFIER">
            <summary>
            The rebar end-detail modifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.REBAR_SPLITTER">
            <summary>
            The rebar splitter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SURFACE_OBJECT">
            <exclude/>
            <summary>
            The surface object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.BENT_PLATE">
            <exclude/>
            <summary>
            The bent plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.SPIRAL_BEAM">
            <exclude/>
            <summary>
            The part with helix geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.POUR_UNIT">
            <exclude/>
            <summary>
            The pour unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_ARC">
            <summary>
            Construction arc.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_SPLINE">
            <summary>
            Construction spline
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.CONTROL_POLYCURVE">
            <summary>
            Construction polycurve
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.RADIAL_GRID">
            <summary>
            Radial grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.GRID_CYLINDRICAL_SURFACE">
            <summary>
            Cylindrical surfaces of radial grids
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LOFTED_PLATE">
            <summary>
            The lofted plate
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.LEG_SURFACE_OBJECT">
            <summary>
            The leg surface object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModelObjectEnum.STOREY">
            <summary>The storey object.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject.PropertySourceEnum">
            <summary>
            Where to get the property.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObject.ObjectLabel">
            <summary>
            Object label.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObject.ModificationTime">
            <summary>Gets latest time of the object was modified or created.</summary>
            <remarks>The returned time is time of history revision which the object belongs to. For Sharing it is WriteOut time,
            for multiuser is save time. If history it not written then this method returns null.</remarks>
            <returns>The date, if it was possible to retrieve it, null otherwise.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObject.IsUpToDate">
            <summary>Gets if the object does not have a modification which is not shared.</summary>
            <returns>True if object was written out (for sharing) or saved (for multiuser) after last editing.</returns>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObject.ModificationTimeInfo">
            <summary>Gets modification time and local modification for the object.
            The info is retrieved from Core once during ModelObject instance lifetime, then cached.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Insert">
            <summary>
            Inserts the model object instance into the model database.
            </summary>
            The inserted instance must be of real type.
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Select">
            <summary>
            Selects the model object instance from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Modify">
            <summary>
            Modifies the model instance in the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Delete">
            <summary>
            Deletes the instance from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetChildren">
            <summary>
            Returns an enumerator of all the children model objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetFatherComponent">
            <summary>
            Returns the father component of the model object.
            </summary>
            <returns>A base component on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetHierarchicObjects">
            <summary>
            Returns an enumerator of all the connected hierarchic objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetAllUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all properties for the model object in one hashtable.
            Type for the returned value must be checked using type casting.
            </summary>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetIntegerUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all integer properties for the model object.
            </summary>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetDoubleUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all double properties for the model object.
            </summary>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetStringUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all string properties for the model object.
            </summary>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetAllReportProperties(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.Hashtable@)">
             <summary>
             Retrieves all properties for the model object in one hashtable.
             Type for the returned value must be checked using type casting.
             </summary>
             <example>
             In the following example a connection to the Tekla Structures model has already been established and
             next the values of some report properties attributes are going to be found out for bolt groups in model.
             <code>
             using Tekla.Structures.Model;
             using System;
             using System.Windows.Forms;
            
             public class Example
             {
                     public void Example1()
                     {
                         ArrayList sNames = new ArrayList();
                         sNames.Add("NAME");
                         sNames.Add("SCREW_NAME");
                         sNames.Add("SCREW_TYPE");
                         sNames.Add("TYPE");
                         sNames.Add("TYPE1");
                         sNames.Add("TYPE2");
                         sNames.Add("TYPE3");
                         sNames.Add("TYPE4");
                         sNames.Add("STANDARD");
                         sNames.Add("SHORT_NAME");
                         sNames.Add("MATERIAL");
                         sNames.Add("FINISH");
                         sNames.Add("GRADE");
                         ArrayList iNames = new ArrayList();
                         iNames.Add("DATE");
                         iNames.Add("FATHER_ID");
                         iNames.Add("GROUP_ID");
                         iNames.Add("HIERARCHY_LEVEL");
                         iNames.Add("MODEL_TOTAL");
                         ArrayList dNames = new ArrayList();
                         dNames.Add("EXTRA_LENGTH");
                         dNames.Add("FLANGE_THICKNESS");
                         dNames.Add("FLANGE_WIDTH");
                         dNames.Add("HEIGHT");
                         dNames.Add("LENGTH");
                         dNames.Add("PRIMARYWEIGHT");
                         dNames.Add("PROFILE_WEIGHT");
                         dNames.Add("ROUNDING_RADIUS");
                         dNames.Add("LENGTH");
                         dNames.Add("DIAMETER");
                         dNames.Add("WEIGHT");
                         dNames.Add("HEAD_DIAMETER");
                         dNames.Add("THICKNESS");
                         dNames.Add("WASHER.THICKNESS");
                         dNames.Add("WASHER.INNER_DIAMETER");
                         dNames.Add("WASHER.OUTER_DIAMETER");
                         dNames.Add("WASHER.THICKNESS1");
                         dNames.Add("WASHER.INNER_DIAMETER1");
                         dNames.Add("WASHER.OUTER_DIAMETER1");
                         dNames.Add("WASHER.THICKNESS2");
                         dNames.Add("WASHER.INNER_DIAMETER2");
                         dNames.Add("WASHER.OUTER_DIAMETER2");
                         dNames.Add("NUT.THICKNESS");
                         dNames.Add("NUT.INNER_DIAMETER");
                         dNames.Add("NUT.OUTER_DIAMETER");
                         dNames.Add("NUT.THICKNESS2");
                         dNames.Add("NUT.OUTER_DIAMETER2");
            
                         ModelObjectEnumerator.AutoFetch = true;
                         ModelObjectEnumerator myEnum = myModel.GetModelObjectSelector().GetAllObjectsWithType(new Type[] { typeof(BoltGroup) });
                         while (myEnum.MoveNext())
                         {
                             try
                             {
                                 myObject = myEnum.Current as ModelObject;
                                 if (myObject != null)
                                 {
                                     Hashtable sValues = new Hashtable(sNames.Count + dNames.Count + iNames.Count);
                                     if (myObject.GetAllReportProperties(sNames, dNames, iNames, ref sValues))
                                     {
                                         foreach (DictionaryEntry value in sValues)
                                             Console.WriteLine(value.Key.ToString() + " : " + value.Value.ToString());
                                     }
                                 }
                             }
                             catch { }
                          }
                      }
             }
             </code>
             </example>
             <param name="stringNames">An array list containing the names of the string properties.</param>
             <param name="doubleNames">An array list containing the names of the double properties.</param>
             <param name="integerNames">An array list containing the names of the integer properties.</param>
             <param name="values">The return value, a hash table list  that contains all the values that were retrieved successfully.</param>
             <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetIntegerReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple integer report properties for the model object. It is faster
            to fetch multiple properties at once.
            </summary>
            <param name="names">An array list containing the names of the properties.</param>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetDoubleReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple double report properties for the model object. It is faster
            to fetch multiple properties at once.
            </summary>
            <param name="names">An array list containing the names of the properties.</param>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetStringReportProperties(System.Collections.ArrayList,System.Collections.Hashtable@)">
            <summary>
            Retrieves multiple string report properties for the model object. It is faster
            to fetch multiple properties at once.
            </summary>
            <param name="names">An array list containing the names of the properties.</param>
            <param name="values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property of the report for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property of the report for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetUserProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetReportProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property of the report for the model object.
            </summary>
            <param name="name">The name of the property to be retrieved.</param>
            <param name="value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetDynamicStringProperty(System.String,System.String@)">
            <summary>
            Gets a dynamic string property from the model object.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetDynamicStringProperty(System.String,System.String)">
            <summary>
            Sets a dynamic string property for the model object.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.String)">
            <summary>
            Sets a string property for the model object.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.Double)">
            <summary>
            Sets a double property for the model object.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetUserProperty(System.String,System.Int32)">
            <summary>
            Sets an integer property for the model object.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetCoordinateSystem">
            <summary>
            Returns the coordinate system for the given model object.
            </summary>
            <returns>The coordinate system for the given model object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetPhase(Tekla.Structures.Model.Phase)">
            <summary>
            Sets the phase of the model object.
            </summary>
            <param name="phase">The new phase. A phase with this phase's number must exist in the database.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.GetPhase(Tekla.Structures.Model.Phase@)">
            <summary>
            Retrieves the phase of the model object (the phase number, the phase name,
            the phase comment and whether the phase is the current one or not).
            </summary>
            <param name="phase">The returned phase.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.SetLabel(System.String)">
            <summary>
            Sets a label for an object when a new instance is created.
            The label is used in plug-ins for identifying the changed object in modification.
            </summary>
            <param name="label">The label to set to the model object.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.CompareTo(System.Object)">
            <summary>
            Compares Identifiers of model objects.
            </summary>
            <param name="obj">The model object to be used in comparison.</param>
            <returns>0 if object Identifiers are the same, 1 if given object Identifier is bigger, -1 otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.Equals(Tekla.Structures.Model.ModelObject)">
            <summary>
            Check if Identifiers of model objects are same.
            </summary>
            <param name="other">The model object to be used in comparison.</param>
            <returns>true if object Identifiers are the same, false otherwise, </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObject.DeleteInstance">
            <summary>
            Deletes the instance from the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObject.ModificationTimeInfoType">
            <summary>Type for <see cref="P:Tekla.Structures.Model.ModelObject.ModificationTimeInfo"/> cache.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModificationTimeInfoType.ModificationTime">
            <summary>Caching field for <see cref="P:Tekla.Structures.Model.ModelObject.ModificationTime"/>.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObject.ModificationTimeInfoType.IsLocallyModified">
            <summary>Caching field for <see cref="P:Tekla.Structures.Model.ModelObject.IsUpToDate"/></summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator">
            <summary>
            The ModelObjectEnumerator class provides the means to iterate through model object instances in the 
            current model.
            </summary>
            <example>
            A model object enumerator can be used in a foreach loop:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator Objects = Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BEAM);
            
                       foreach (Beam obj in Objects) 
                       {
                           if(obj != null)
                           {
                               Solid Solid = obj.GetSolid();
                           }
                       }
                   }
            }
            </code>
            Another way is to browse items "manually":
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectEnumerator Enum = Model.GetModelObjectSelector().GetAllObjects();
            
                       while(Enum.MoveNext())
                       {
                           Beam B = Enum.Current as Beam;
                           if(B != null)
                           {
                               Solid Solid = B.GetSolid();
                           }
                       }
                   }
            }
            </code>
            A model object enumerator with AutoFetch set to true in a foreach loop:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
                       
                       ModelObjectEnumerator.AutoFetch = true;
            
                       ModelObjectEnumerator Objects = Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.BEAM);
            
                       foreach (Beam obj in Objects) 
                       {
                           if(obj != null)
                           {
                               Solid Solid = obj.GetSolid();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.SelectInstances">
            <summary>
            Indicates that the instance Select() is called when the 'Current' item is asked from the enumerator.
            The user can set this to 'false' if no members are ever asked from the instance. This is the case
            when, for example, asking only a report property from the identifier. Warning: normally the user should not
            change this value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.AutoFetch">
            <summary>
            Indicates that the objects are fetched from the model when the enumerator is created.
            Object information is therefore not anymore fetched when 'Current' item is asked from the enumerator.
            Warning: changing of TransformationPlane after creation of enumerator or during the enumeration 
            requires a separate selection of object for refreshing the values. 
            Property value is used for all enumerators in application  
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum">
            <summary>
            The types of enumerator available.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_SELECTED">
            <summary>
            Selects all user selected objects from the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_OBJECTS">
            <summary>
            Selects all objects from the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODELOBJECT_CHILDREN">
            <summary>
            Selects children of specified type of given ModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_FILTER_NAME">
            <summary>
            Selects all the ModelObjects for a given filter name
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CONNECTED_COMPONENTS">
            <summary>
            Selects all connected components of given ModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_BOUNDING_BOX">
            <summary>
            Selects all objects intersecting with given bounding box
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_OBJECTS_WITH_TYPE">
            <summary>
            All Objects with type given in type in the "subtype".
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.REFERENCE_MODEL_OBJECTS">
            <summary>
            Selects sub objects of given ReferenceModel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODELOBJECT_FATHERS">
            <summary>
            Selects fathers of specified type of given ModelObject (Tasks mainly)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CONNECTED_DEPENDENCIES">
            <summary>
            Selects all connected dependencies of given ModelObject (Tasks mainly)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.TASKS_OF_SELECTED_OBJECTS">
            <summary>
            Selects all tasks of selected objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODIFIED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all modified and created objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.FILTERED_OBJECTS_WITH_TYPE">
            <summary>
            Filtered objects with type given in type in the "subtype".
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.DELETED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all modified objects 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ALL_PRESELECTED">
            <summary>
            Selects all preselected objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.BY_BOUNDING_BOX_AND_VIEW">
            <summary>
            Selects all objects that intersect with the given bounding box and that are visible in the given view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CONVERTED_FROM_REFERENCE_MODEL">
            <summary>
            Selects objects that were converted from a given reference model (if they weren't unlinked)
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.ATTRIBUTE_MODIFIED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all objects of which attributes (UDA) have been modified after the stamp. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.NUMBERING_MODIFIED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all objects of which numbering has been modified after the stamp. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.CREATED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all created objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.MODIFIED_OBJECTS_BY_FILTER_NAME">
            <summary>
            Selects all objects which are new, modified, numbered or which phase has changed after the stamp and pass the filter of given name. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.PHASE_MODIFIED_OBJECTS_AFTER_STAMP">
            <summary>
            Selects all objects of which phase has been modified after the stamp. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum.OBJECTS_WITH_ANY_MODIFICATION_AFTER_STAMP">
            <summary>
            Selects all objects with any type of modification or are created after the stamp. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum">
            <summary>
            Enumerator type specifiers.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.ALL_CHILDREN">
            <summary>
            Selects all children
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_BOOLEANS">
            <summary>
            Selects connected boolean objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_BOLTS">
            <summary>
            Selects connected bolts
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_WELDS">
            <summary>
            Selects connected welds
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_REBARS">
            <summary>
            Selects connected rebars
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_SURFACINGS">
            <summary>
            Selects connected surfaces
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.SELECTED_CHILDREN">
            <summary>
            Selects selected children
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_HIERARCHIES">
            <summary>
            Selects connected hierarchies
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.PARTS_RELATED_TO_POUR">
            <summary>
            Selects parts related to pour
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.POURS_PART_BELONGS_TO">
            <summary>
            Selects the pours the part belongs to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.REBARSET_ADDITIONS">
            <summary>
            Selects rebar set additions.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.REBARSET_MODIFIERS">
            <summary>
            Selects rebar set modifiers.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.CONNECTED_SURFACEOBJECTS">
            <summary>
            Selects connected surface objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.OBJECTS_RELATED_TO_POUR">
            <summary>
            Selects all objects related to pour unit
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.POUR_OBJECT_ASSOCIATED_TO">
            <summary>
            Selects the pour that the object is associated to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.POUR_OBJECT_RELATED_TO_POUR_UNIT">
            <summary>
            Selects the pour object which belongs to the pour unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.POUR_UNIT_ASSOCIATED_TO">
            <summary>
            Selects the pour unit that the object or pour object is associated to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum.REBARSET_LEG_SURFACES">
            <summary>
            Selects rebar set leg surfaces.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.Current">
            <summary>
            The current model object instance active in the enumerator.
            The value is null if there are no more objects left.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ModelObjectEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The implementation for the Current property required by the IEnumerator. The returned object
            is always of the type ModelObject.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum,Tekla.Structures.Model.ModelObject)">
            <summary>
            Instantiates a new enumerator of given type.
            </summary>
            <param name="type">Type of enumerator</param>
            <param name="subType">Subtype of enumerator</param>
            <param name="Object">Additional ModelObject instance needed to create the enumerator</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorSubTypeEnum,System.String,Tekla.Structures.Model.ModelObject)">
            <summary>
            Instantiates a new enumerator of given type.
            </summary>
            <param name="type">Type of enumerator.</param>
            <param name="subType">Subtype of enumerator.</param>
            <param name="parameter">Additional information.</param>
            <param name="Object">Additional ModelObject instance needed to create the enumerator</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ModelObjectEnumerator"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="filterName">Name of the filter.</param>
            <param name="modificationStamp">The modification stamp.</param>
            <exception cref="T:System.ArgumentException">Enumerator type must be MODIFIED_OBJECTS_BY_FILTER_NAME</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum)">
            <summary>
            Instantiates a new enumerator of given type. 
            </summary>
            <param name="type">Type of the enumerator</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Instantiates a new enumerator of given object type.
            </summary>
            <param name="type"></param>
            <param name="objectType"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Type[])">
            <summary>
            Instantiates a new enumerator of given object type.
            </summary>
            <param name="type"></param>
            <param name="typeFilter"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.String)">
            <summary>Select by type and filter</summary>
            <param name="type">Only EnumeratorTypeEnum.FILTERED_OBJECTS_WITH_TYPE</param>
            <param name="objectType"></param>
            <param name="Parameter">Filter name or the modification stamp</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.String)">
            <summary>
            Select by modification stamp with type filtering
            </summary>
            <param name="type">Type of modification to search of object to select</param>
            <param name="objectTypes">The object types.</param>
            <param name="Parameter">The parameter.</param>
            <exception cref="T:System.ArgumentException">Invalid argument type</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Select by modification stamp with type filtering
            </summary>
            <param name="type">Type of modification to search of object to select</param>
            <param name="objectTypes">The object types.</param>
            <param name="Parameter">The parameter.</param>
            <param name="selectInstancesDefault">Default value for the SelectInstance - property or null</param>
            <param name="returnAlsoIfObjectIsCreatedAndDeletedAfterEvent">if set to <c>true</c> return object as deleted also if object is created and deleted after event.</param>
            <exception cref="T:System.ArgumentException">Invalid argument type</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Int32,System.Int32)">
            <summary>
            Instantiates a new enumerator for modified objects after ModStamp.
            </summary>
            <param name="type"></param>
            <param name="modStamp"></param>
            <param name="saveStamp"></param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(Tekla.Structures.Model.ModelObjectEnumerator.EnumeratorTypeEnum,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.Int32,System.Int32)">
            <summary>
            Instantiates a new enumerator for modified or deleted objects after Stamp.
            </summary>
            <param name="type">The type.</param>
            <param name="objectTypes">The object types.</param>
            <param name="modStamp">The mod stamp.</param>
            <param name="saveStamp">The save stamp.</param>
            <exception cref="T:System.ArgumentException">Invalid enumerator type</exception>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Enumerator with already defined IDs and types.
            </summary>
            <param name="identifiers">Identifiers to enumerate</param>
            <param name="types">Types to enumerate</param>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.MakeObjectEnumArray(System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>Creates Array to be placed to <see cref="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aObjectTypes"/>.</summary>
            <param name="types">Types to add.</param>
            <returns>New allocated array.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetAllFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t)">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="enumerator">Enumerator including possible select rules and filters.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetAllFromDB_FAST(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            Gets the objects from DB. Enumerator's rules must
            be correctly filled in before calling this method.
            </summary>
            <param name="enumerator">Enumerator including possible select rules and filters.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetSize">
            <summary>
            Returns the total amount of items.
            </summary>
            <returns>The total amount of items.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ModelObjectSelector">
            <summary>
            The ModelObjectSelector class can be used to make different model object selections
            from the current model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       ModelObjectSelector Selector = Model.GetModelObjectSelector();
            
                       foreach(ModelObject MO in Selector)
                       {
                           Beam B = MO as Beam;
                           if(B != null)
                           {
                               Solid solid = B.GetSolid();
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.#ctor">
            <summary>
            Should be called only from Model (to simulate "current model" connection...)
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjects">
            <summary>
            Returns an enumerator of all the model objects in the current model.
            </summary>
            <returns>A model object enumerator of all the model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjectsWithType(Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary>
            Returns an enumerator of all the model objects in the current model with the given type.
            </summary>
            <param name="Enum">The type of the objects to return.</param>
            <returns>A model object enumerator of all the model objects with the given type.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetAllObjectsWithType(System.Type[])">
             <summary>
             Returns an enumerator of all the model objects in the current model with the given base type.
             </summary>
             <example>
             In the following example a connection to the Tekla Structures model is established and
             all parts and boolean objects are fetched for enumeration from the model.
             <code>
             using Tekla.Structures.Model;
             
             public class Example
             {
                    public void Example1()
                    {
                        Model Model = new Model();
             
                        System.Type[] Types = new System.Type[2];
                        Types.SetValue(typeof(Part),0);
                        Types.SetValue(typeof(Boolean),1);
            
                        ModelObjectEnumerator myEnum = Model.GetModelObjectSelector().GetAllObjectsWithType(Types);
                    }
             }
             </code>
             </example>
             <param name="TypeFilter">The types of the objects to return.</param>
             <returns>A model object enumerator of all the model objects with the given types.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByBoundingBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns an enumerator of the model objects in the current model colliding with the given
            geometrical bounding box. Note that this method uses approximate bounding
            boxes and thus is NOT EXACT, and may return objects not necessarily colliding
            with the given box but only being somewhere near to it.
            </summary>
            <param name="MinPoint">The minimum point of the bounding box.</param>
            <param name="MaxPoint">The maximum point of the bounding box.</param>
            <returns>A model object enumerator of the model objects colliding with the given bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetEnumerator">
            <summary>
            Returns an enumerator of all the model objects in the current model.
            </summary>
            <returns>A model object enumerator of all the model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByFilterName(System.String)">
            <summary>
            Returns an enumerator of the model objects in the current model selected by the given selection
            filter.
            </summary>
            <param name="FilterName">The name of an existing selection filter to apply.</param>
            <returns>A model object enumerator of the objects selected by the filter.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetFilteredObjectsWithType(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.String)">
            <summary>
            Returns an enumerator of the model objects in the current model with the given type and selected by the filter.
            </summary>
            <param name="Enum">The type of the objects to return.</param>
            <param name="FilterName">The name of an existing selection filter to apply.</param>
            <returns>A model object enumerator of the model objects with the given type and selected by the filter.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ModelObjectSelector.GetObjectsByFilter(Tekla.Structures.Filtering.FilterExpression)">
            <summary> Returns an enumerator of the model objects in the current model selected by the given selection filter definition.</summary>
            <param name="FilterExpression">The definition of a selection filter to apply.</param>
            <returns>A model object enumerator of the objects selected by the filter.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.PointCloud">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PointCloud"/> class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PointCloud.AutoCreatedBasePointGuid">
            <summary>
            The definition for auto-created base points guid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.#ctor">
            <summary>
            Creates a new point cloud instance using the given parameters.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.Guid">
            <summary>
            Gets or sets the guid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.OriginalPath">
            <summary>
            Gets or sets the point clouds path (where it originally located).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.Url">
            <summary>
            Gets or sets the point clouds URL without a file name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.Name">
            <summary>
            Gets or sets the point clouds name. Abbreviated from the point cloud file name. Cannot be given by user.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.LocationBy">
            <summary>
            Gets or sets the location by value: Empty for model origin, base point guid for base point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.UseAutoCreatedBasePoint">
            <summary>
            Gets or sets a value indicating whether an auto-created base point should be used.
            If set to true, LocationBy value is ignored.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.BoundingBox">
            <summary>
            Gets or sets the bounding box.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.OffsetX">
            <summary>
            Gets or sets the offset X.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.OffsetY">
            <summary>
            Gets or sets the offset Y.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.OffsetZ">
            <summary>
            Gets or sets the offset Z.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PointCloud.RotationZ">
            <summary>
            Gets or sets the rotation Z.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.Attach">
            <summary>
            Attach this point cloud to model. Can select only Potree type point clouds immediately after attach.
            Others need to be selected manually after attach has been completed. Use AttachComplete() to find out, if
            attach process has completed.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.AttachComplete">
            <summary>
            Checks if the point cloud attach is complete. Needed when attaching non-Potree point cloud file, which
            needs conversion.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.Detach">
            <summary>
            Detach this point cloud from model.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.Select">
            <summary>
            Select point cloud by Guid, by Name, by OriginalPath or by Url.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.SetVisibility(System.Collections.Generic.List{Tekla.Structures.Model.UI.View},System.Boolean)">
            <summary>
            Set point cloud visibility in given views.
            </summary>
            <param name="views">The views, in which the point clouds visibility is changed.</param>
            <param name="visible">Visibility value: True for visible, false for hidden.</param>
            <returns>True if successful to all given views, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.GetVisibleInViews">
            <summary>
            Gets the views in which this point cloud is visible.
            </summary>
            <returns>The available point clouds.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.GetPointClouds">
            <summary>
            Utility function: Gets available point clouds.
            </summary>
            <returns>The available point clouds.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.ValidateOriginalPath">
            <summary>
            Validates the OriginalPath member of this class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.GetBoundingBox(Tekla.Structures.ModelInternal.dotPointCloud_t)">
            <summary>
            Gets the bounding box from values.
            </summary>
            <param name="pointCloud">The point clouds data</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.GetVisibleViews">
            <summary>
            Gets the visible views.
            </summary>
            <returns>The visible views mapped as view object id to view.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.ToStruct">
            <summary>
            Converts this classes content to struct for TS core interoperability.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.Populate(Tekla.Structures.Model.PointCloud)">
            <summary>
            Populates this class with given data.
            </summary>
            <param name="pointCloud">The data to be used for population.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PointCloud.Populate(Tekla.Structures.ModelInternal.dotPointCloud_t)">
            <summary>
            Populates this class with given data.
            </summary>
            <param name="dotPointCloud">The data to be used for population.</param>
        </member>
        <member name="T:Tekla.Structures.Model.ProjectInfo">
            <summary>
            The ProjectInfo class provides project information about the currently open Tekla Structures model.
            </summary>
            <example>
            The following example gets the project information and shows the value of the Name property
            in a message dialog:
            <code>
            using Tekla.Structures.Model;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Model CurrentModel = new Model();
                    ProjectInfo ProjectInfo = CurrentModel.GetProjectInfo();
            
                    if (CurrentModel.GetConnectionStatus())
                    {
                        if (ProjectInfo.Name.Length > 0)
                        {
                            MessageBox.Show(ProjectInfo.Name);
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Description">
            <summary>
            The description to the Tekla Structures model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._StartDate">
            <summary>
            Start date information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._EndDate">
            <summary>
            End date information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Designer">
            <summary>
            Designer information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Object">
            <summary>
            Object information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Location">
            <summary>
            Address location information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Address">
            <summary>
            Address information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._PostalBox">
            <summary>
            Address postal box information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Town">
            <summary>
            Address town information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Region">
            <summary>
            Address region information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._PostalCode">
            <summary>
            Address postal code information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Country">
            <summary>
            Address country information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Builder">
            <summary>
            Builder information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Name">
            <summary>
            Name information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ProjectNumber">
            <summary>
            Project number information of the project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ModelSharingLocalPath">
            <summary>
            Local sharing folder of the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._ModelSharingServerPath">
            <summary>
            Web sharing path of the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra1">
            <summary>
            info 1.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra2">
            <summary>
            info 2.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._Extra3">
            <summary>
            Internal Extra info 3.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ProjectInfo._GUID">
            <summary>
            Project GUID.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Description">
            <summary>
            The description of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.StartDate">
            <summary>
            The start date information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.EndDate">
            <summary>
            The end date information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Object">
            <summary>
            The object information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Designer">
            <summary>
            The designer information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Location">
            <summary>
            The address location information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Address">
            <summary>
            The address information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.PostalBox">
            <summary>
            The address postal box information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Town">
            <summary>
            The address town information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Region">
            <summary>
            The address region information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.PostalCode">
            <summary>
            The address postal code information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Country">
            <summary>
            The address country information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Builder">
            <summary>
            The builder information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Name">
            <summary>
            The name information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ProjectNumber">
            <summary>
            The project number information of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ModelSharingLocalPath">
            <summary>
            The local folder for model sharing.
            Is null if not defined for the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.ModelSharingServerPath">
            <summary>
            The server path for model sharing.
            Is null if not defined for the model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Info1">
            <summary>
            The Info 1 field of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.Info2">
            <summary>
            The Info 2 field of the ProjectInfo.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ProjectInfo.GUID">
            <summary>
            The GUID field of the ProjectInfo.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.#ctor">
            <summary>
            Creates a new Project instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetInfo">
            <summary>
            Get current ProjectInfo.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.Modify">
            <summary>
            Modifies the current project information.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.String@)">
            <summary>
            Retrieves a string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.Int32@)">
            <summary>
            Retrieves an integer property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetUserProperty(System.String,System.Double@)">
            <summary>
            Retrieves a double property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be retrieved.</param>
            <param name="Value">The return value.</param>
            <returns>True if the value was returned successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.String)">
            <summary>
            Sets a string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.Double)">
            <summary>
            Sets a double property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetUserProperty(System.String,System.Int32)">
            <summary>
            Sets an integer property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetIntegerUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all integer properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetDoubleUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all double properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetStringUserProperties(System.Collections.Hashtable@)">
            <summary>
            Retrieves all string properties for the ProjectInfo.  
            </summary>
            <param name="Values">The return value, a hash table that contains all the values that were retrieved successfully.</param>
            <returns>True if at least one single property was retrieved successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetDynamicStringProperty(System.String,System.String@)">
            <summary>
            Gets a dynamic string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetDynamicStringProperty(System.String,System.String)">
            <summary>
            Sets a dynamic string property for the ProjectInfo.
            </summary>
            <param name="Name">The name of the property to be set.</param>
            <param name="Value">The new value for the property.</param>
            <returns>True if the property was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetBasePoints">
            <summary>
            Gets all available base points as a list.
            </summary>
            <returns>The list of available base points.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetBasePointByName(System.String)">
            <summary>
            Gets a base point by given name.
            </summary>
            <param name="name">The name of the base point.</param>
            <returns>If found, the base point, otherwise empty base point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetBasePointByGuid(System.Guid)">
            <summary>
            Gets a base point by given guid.
            </summary>
            <param name="guid">The guid of the base point.</param>
            <returns>If found, the base point, otherwise empty base point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetCurrentCoordsysBasePoint">
            <summary>
            Gets the current base point, if set.
            </summary>
            <returns>The current base point, if set. Otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.SetCurrentCoordsysToBasePoint(Tekla.Structures.Model.BasePoint)">
            <summary>
            Sets the current base point.
            </summary>
            <param name="basePoint">The base point to be set as current base point.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ProjectInfo.GetProjectBasePoint">
            <summary>
            Gets the project base point, if any set.
            </summary>
            <returns>The project base point, if set. Otherwise null.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModel">
            <summary>
            The ReferenceModel class contains methods related to reference models.
            A reference model is a reference of an external model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       ReferenceModel ReferenceModel = new ReferenceModel();
                       ReferenceModel.Filename = "c:\\TeklaStructuresModels\\reference_model.dwg";
                       ReferenceModel.Scale = 1.0;
            
                       bool Result = false;
                       Result = ReferenceModel.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModel.Revision">
            <summary>
            Reference model revision.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Revision.#ctor(System.Int32,System.Int32,System.DateTime,System.String,System.String,System.Boolean)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.ReferenceModelId">
            <summary>
            Gets or sets the parent reference model id.
            </summary>
            <value>
            The reference model id.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.Id">
            <summary>
            Gets the revision id.
            </summary>
            <value>
            The revision id.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.Time">
            <summary>
            Gets the revision time.
            </summary>
            <value>
            The revision time.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.Hash">
            <summary>
            Gets the revision hash identifier.
            </summary>
            <value>
            The revision hash.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.FileName">
            <summary>
            Gets the revision file name.
            </summary>
            <value>
            The revision file name.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Revision.IsCurrentRevision">
            <summary>
            Gets the value indicating whether this revision is the current revision or not.
            </summary>
            <value>
            The currentness of the revision.
            </value>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModel.VisibilityEnum">
            <summary>
            The visibility type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.VisibilityEnum.HIDDEN">
            <summary>
            The reference model is invisible in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.VisibilityEnum.VISIBLE">
            <summary>
            The reference model is visible in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.filename">
            <summary>
            The filename.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.activeFilePath">
            <summary>
            The active file path.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.visibility">
            <summary>
            The visibility.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.basePointGuid">
            <summary>
            The base point guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.rotation3D">
            <summary>The 3d rotation.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.projectGuid">
            <summary>
            The project guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.modelGuid">
            <summary>
            The model guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModel.versionGuid">
            <summary>
            The version guid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Filename">
            <summary>
            The path to the original location of the reference file.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.ActiveFilePath">
            <summary>
            Gets the path to the local copy of the current revision of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Position">
            <summary>
            The position of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Scale">
            <summary>
            The scale of the reference model.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Visibility">
            <summary>
            The visibility of the reference model in the model view.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.BasePointGuid">
            <summary>
            The GUID of the used base point. Empty if base point is not used.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.UseWorkplane">
            <summary>Sets whether workplane is used.</summary>
            <remarks>Used only for insertsion!</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Rotation">
            <summary>Gets or sets value of rotation around Z axis (degrees).</summary>
            <remarks>Reading result is only specified exactly when there are no other rotations. Otherwise it is approximate.
            Writing resets the other rotations so that the overall rotation is only around Z axis.</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.Rotation3D">
            <summary>Gets or sets value of 3d rotation.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.ProjectGUID">
            <summary>
            The ProjectGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.ModelGUID">
            <summary>
            The ModelGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ReferenceModel.VersionGUID">
            <summary>
            The VersionGUID of the reference model in the Project Center.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ReferenceModel"/> class. 
            <para>
            The default values are as follows:
            <list type="bullet">
            <item>
            Filename = string.Empty;
            </item>
            <item>
            ActiveFilePath = string.Empty;
            </item>
            <item>
            ProjectGUID = Guid.Empty;
            </item>
            <item>
            ModelGUID = Guid.Empty;
            </item>
            <item>
            VersionGUID = Guid.Empty;
            </item>
            <item>
            Position = new Point();
            </item>
            <item>
            Scale = 1.0;
            </item>
            <item>
            Visibility = VisibilityEnum.VISIBLE;
            </item>
            <item>
            BasePointGuid = string.Empty;
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.#ctor(System.String,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ReferenceModel"/> class. 
            Creates a new reference model instance using the given filename, position and scale.
            </summary>
            <param name="filename">
            The filename to be used.
            </param>
            <param name="position">
            The position to be used.
            </param>
            <param name="scale">
            The scale to be used.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetConvertedObjects">
            <summary>
            Returns an enumerator of model object converted from the reference model.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.RefreshFile">
            <summary>
            Reload the reference file from the location specified by Filename.
            If the file has changed, a new revision will be created and taken into use.
            Note that if a new revision was successfully created, the ActiveFilePath is changed.
            </summary>
            <returns>
            true if a new revision was added, false if it was not.
            If false, the file can either be unchanged or there was an error.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetRevisions">
            <summary>
            Gets the reference models available revisions.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetReferenceModelObjectByExternalGuid(System.String)">
            <summary>
            Gets reference model object by external (IFC) guid from this reference model.
            </summary>
            <param name="externalGuid">External (IFC) Guid of the reference object.</param>
            <returns>Reference model object with specified external guid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetReferenceModelObjectGuidsByExternalGuids(System.Collections.Generic.List{System.String})">
            <summary>
            Gets reference model object guids by external guids.
            </summary>
            <param name="externalGuids">The external guids.</param>
            <returns>If successful, the reference model object guids.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.SetAsCurrentRevision(Tekla.Structures.Model.ReferenceModel.Revision)">
            <summary>
            Sets the given revision as current revision.
            </summary>
            <param name="revision">The revision to be set as current.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.SetAsCurrentRevision(System.Int32,System.Int32)">
            <summary>
            Sets the given revision as current revision.
            </summary>
            <param name="modelId">The model id, which revision is to be changed.</param>
            <param name="revisionId">The revision to be set as current.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetCurrentRevision">
            <summary>
            Gets the current revision.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.RemoveRevision(Tekla.Structures.Model.ReferenceModel.Revision)">
            <summary>
            Removes the given revision from the reference model.
            </summary>
            <param name="revision">The reference model revision to be removed.</param>
            <returns>
            True if removed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Insert">
            <summary>
            Inserts the reference model into the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Select">
            <summary>
            Selects the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Modify">
            <summary>
            Modifies the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.Delete">
            <summary>
            Deletes the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.GetChildren">
            <summary>
            Returns an enumerator of all the children reference model objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.FileExists">
            <summary>
            Checks if the reference model file exists.
            </summary>
            <returns>True if exists, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.FileExistsUnderModelFolder(System.String)">
            <summary>
            Checks if the given relative file path exists under model folder. Needed, because
            current path is not always model folder when running external applications.
            </summary>
            <param name="relativeFilePath">The relative file path.</param>
            <returns>True if exists, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.CreateInstance">
            <summary>
            Create this reference model in the currently active Tekla Structures model.
            </summary>
            <returns>
            true on success, false otherwise.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.SelectInstance">
            <summary>
            Select the reference model from Tekla Structures.
            </summary>
            <returns>
            true on success, false otherwise.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.ModifyInstance">
            <summary>
            Modify this reference model in Tekla Structures.
            </summary>
            <returns>
            true on success, false otherwise.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.ValidateFilePath">
            <summary>
            Special characters are not supported. Checks that the current file name does not contain special characters.
            </summary>
            <returns>True if valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.ToStruct(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            Serialize this object to struct.
            </summary>
            <param name="P">
            The target struct.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModel.FromStruct(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            Deserialize from given struct to this object.
            </summary>
            <param name="P">
            The source struct.
            </param>
        </member>
        <member name="T:Tekla.Structures.Model.ReferenceModelObject">
            <summary>
            The ReferenceModelObject class contains methods related to reference model objects.
            A reference model object is a subobject of a reference model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModelObject._ReferenceModelId">
            <summary>
            The identifier of the reference model that the object belongs to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ReferenceModelObject._ReferenceHierarchyFather">
            <summary>
            The identifier of the reference hierarchy father part.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.#ctor(System.Int32,Tekla.Structures.Identifier)">
            <summary>
            Creates a new reference model object instance using the given parameters.
            </summary>
            <param name="ReferenceModelId">The identifier of the reference model.</param>
            <param name="ID">The identifier for the new reference model object.</param>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.#ctor">
            <summary>
            Creates a new reference model object instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.GetReferenceModel">
            <summary>
            Gets the reference model that the reference object belongs to.
            </summary>
            <returns>The reference model on success, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Insert">
            <summary>
            At the moment reference objects cannot be inserted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Select">
            <summary>
            Selects the reference model with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Modify">
            <summary>
            At the moment reference objects cannot be modified.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.Delete">
            <summary>
            At the moment reference objects cannot be deleted.
            </summary>
            <returns>An exception.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.GetFather">
            <summary>
            Returns the reference hierarchy father.
            </summary>
            <returns>Reference to the graph father if such exists, or else an invalid object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ReferenceModelObject.SelectInstance">
            <summary>
            Selects the reference object instance from the model.
            </summary>
            <returns>True if the selection succeeds, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute">
            <summary>
            The ReferenceModelObjectAttribute class is a base class from where concrete attributes are derived from. The documentation about
            different attributes and their function can be found from the vendor specification, for example from the IFC format specification.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Origin">
            <summary>
            The origin of the extrusion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.xDir">
            <summary>
            The X-axis direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Extrusion">
            <summary>
            The extrusion vector.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.ProfileName">
            <summary>
            The name of the profile (often empty).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Name">
            <summary>
            The name of the product.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.Description">
            <summary>
            The description of the product.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.ObjectType">
            <summary>
            The object type of the product.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum">
            <summary>
            All the reference model object attribute types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_INVALID">
            <summary>
            The invalid attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CSHAPEPROFILE">
            <summary>
            The C-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CIRCLEHOLLOWPROFILE">
            <summary>
            The circular and hollow profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_CIRCLEPROFILE">
            <summary>
            The circular profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ELLIPSEPROFILE">
            <summary>
            The ellipse profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ISHAPEPROFILE">
            <summary>
            The I-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_LSHAPEPROFILE">
            <summary>
            The L-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_RECTANGLEHOLLOWPROFILE">
            <summary>
            The rectangular and hollow profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_RECTANGLEPROFILE">
            <summary>
            The rectangular profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_TSHAPEPROFILE">
            <summary>
            The T-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_USHAPEPROFILE">
            <summary>
            The U-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_IFC2X3_PARAMETRICOBJECT_ZSHAPEPROFILE">
            <summary>
            The Z-shape profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_PARAMETRICOBJECT_CUSTOMPROFILE">
            <summary>
            The custom profile attribute type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttribute.AttributeTypeEnum.ATTRIBUTETYPE_PARAMETRICOBJECT_OBB">
            <summary>
            The object bounding box (OBB) attribute type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_CShapeProfile class contains the C-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.Girth">
            <summary>
            The girth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CShapeProfile.InternalFilletRadius">
            <summary>
            The internal fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile">
            <summary>
            The IFC2X3_ParametricObject_CircleHollowProfile class contains the circular and hollow profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleHollowProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleProfile">
            <summary>
            The IFC2X3_ParametricObject_CircleProfile class contains the circular profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_CircleProfile.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile">
            <summary>
            The IFC2X3_ParametricObject_EllipseProfile class contains the ellipse profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile.SemiAxis1">
            <summary>
            The first semi-axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_EllipseProfile.SemiAxis2">
            <summary>
            The second semi-axis.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_IShapeProfile class contains the I-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.OverallWidth">
            <summary>
            The overall width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.OverallDepth">
            <summary>
            The overall depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_IShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_LShapeProfile class contains the L-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.Thickness">
            <summary>
            The thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_LShapeProfile.LegSlope">
            <summary>
            The leg slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile">
            <summary>
            The IFC2X3_ParametricObject_RectangleHollowProfile class contains the rectangular and hollow profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.XDim">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.YDim">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.WallThickness">
            <summary>
            The wall thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.InnerFilletRadius">
            <summary>
            The inner fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleHollowProfile.OuterFilletRadius">
            <summary>
            The outer fillet radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile">
            <summary>
            The IFC2X3_ParametricObject_RectangleProfile class contains the rectangular profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile.XDim">
            <summary>
            The X dimension.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_RectangleProfile.YDim">
            <summary>
            The Y dimension.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_TShapeProfile class contains the T-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeEdgeRadius">
            <summary>
            The flange edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebEdgeRadius">
            <summary>
            The web edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.WebSlope">
            <summary>
            The web slope.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_TShapeProfile.FlangeSlope">
            <summary>
            The flange slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_UShapeProfile class contains the U-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_UShapeProfile.FlangeSlope">
            <summary>
            The flange slope.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile">
            <summary>
            The IFC2X3_ParametricObject_ZShapeProfile class contains the Z-shape profile definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.Depth">
            <summary>
            The depth.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FlangeWidth">
            <summary>
            The flange width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.WebThickness">
            <summary>
            The web thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FlangeThickness">
            <summary>
            The flange thickness.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.FilletRadius">
            <summary>
            The fillet radius.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.IFC2X3_ParametricObject_ZShapeProfile.EdgeRadius">
            <summary>
            The edge radius.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ParametricObject_ObjectBoundingBox">
            <summary>
            The ParametricObject_ObjectBoundingBox class contains the object bounding box (OBB) definition.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ParametricObject_ObjectBoundingBox.yDir">
            <summary>
            The Y direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ParametricObject_CustomProfile">
            <summary>
            The ParametricObject_CustomProfile class contains the custom profile definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator">
            <summary>
            The ReferenceModelObjectAttributeEnumerator class can be used to enumerate through reference model object attributes.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.Collaboration;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       ReferenceModel RM = new ReferenceModel();
                       RM.Filename = "c:\\TeklaStructuresModels\\reference_model.dwg";
                       RM.Scale = 1.0;
            
                       if(RM.Insert())
                       {
                           foreach(ReferenceModelObject RMO in RM.GetChildren())
                           {
                               ReferenceModelObjectAttributeEnumerator RMOAttributeEnumerator = new ReferenceModelObjectAttributeEnumerator(RMO);
            
                               while(RMOAttributeEnumerator.MoveNext())
                               {
                                   ReferenceModelObjectAttribute RMOAttribute = (ReferenceModelObjectAttribute)RMOAttributeEnumerator.Current;
                                   Console.WriteLine("Attribute name: " + RMOAttribute.Name);
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.#ctor(Tekla.Structures.Model.ReferenceModelObject)">
            <summary>
            Creates a new reference model object attribute enumerator instance.
            </summary>
            <param name="RMO">The reference model object from which the enumerator is created.</param>
        </member>
        <member name="P:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.Current">
            <summary>
            The current attribute.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.MoveNext">
            <summary>
            Moves to the next reference model object attribute.
            </summary>
            <returns>True if successfully moved to the next reference model object attribute.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Collaboration.ReferenceModelObjectAttributeEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Object">
            <summary>
            The Object class is an abstract base class for all the objects Tekla Structures has.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Object.Identifier">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Object.#ctor">
            <summary>
            Initializes an object with a zero identifier.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation">
            <summary>
            The Operation class implements Tekla Structures level operations.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.ObjectManipulationTypeEnum">
            <summary> The object manipulation types.  </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum">
            <summary>  The MIS export types.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.DSTV">
            <summary>
            The DSTV type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.KISS">
            <summary>
            The KISS type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.EJE">
            <summary>
            The EJE type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.EPC">
            <summary>
            The EPC type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum.STEEL2000">
            <summary>
            The STEEL2000 type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum">
            <summary>Specifies what <see cref="M:Tekla.Structures.Model.Operations.Operation.ShowOnlySelected(Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum)"/> should do to unselected parts.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum.Hidden">
            <summary>Completely hide.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum.Transparent">
            <summary>Make almost transparent.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum.AsSticks">
            <summary>Show as sticks.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult">
            <summary>
            The result type of the shape metadata operations. If you alter this, check if
            you need to change ShapeMetadataResult_e on the Tekla Structures core side
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult.NoResult">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult.OK">
            <summary>
            Operation succeeded.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult.DuplicateKeyExist">
            <summary>
            At least one identical pre-existing key was found in the shape when trying to insert key and value
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult.NoMatchingShape">
            <summary>
            No matching shape found for the GUID in the catalog
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult.NoMatchingKey">
            <summary>
            No matching key found for the GUID in the shape
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.InitFilterCache">
            <summary>
            Inits the filtering cache
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ClearFilterCache">
            <summary>
            Clears the filtering cache
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsNumberingUpToDate(Tekla.Structures.Model.ModelObject)">
            <summary>
            Checks whether the numbering is up-to-date for an assembly, part, rebar, surface treatment, pour object or break.
            </summary>
            <param name="InputModelObject">The model object to check. The object must be an assembly, a part, a rebar or an inherited object. </param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="InputModelObject"/> is not of a correct type or if it is not valid.</exception>
            <returns>True if the numbering information is up-to-date.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsNumberingUpToDateAll">
            <summary>
            Checks whether the numbering is up-to-date for every assembly, part and rebar on the model.
            <remarks>
            Using this method is much faster than checking each object individually.
            </remarks>
            </summary>
            <returns>True if the numbering information is up-to-date.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.GetSimilarNumberedObjects(Tekla.Structures.Model.ModelObject)">
            <summary>
            Gets similar objects based on numbering of given object.
            </summary>
            <remarks>
            This method works currently only with parts and assemblies.
            </remarks>
            <param name="ObjectToCompare">The object for comparison. </param>
            <returns>List of similar objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateReportFromSelected(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Creates a report from the selected objects using the given template name and filename.
             <para>If a path is not given in the filename, the file is created to the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
             <para>If the given folder does not exist, the report creation fails.</para>
             <para>See Tekla Structures Help for more information about reports.</para>
             </summary>
             <param name="TemplateName">The name of the report template to be used in report creation. The name must contain more than three characters.</param>
             <param name="FileName">The name of the created report. The name must contain more than three characters.</param>
             <param name="Title1">The first title for the created report.</param>
             <param name="Title2">The second title for the created report.</param>
             <param name="Title3">The third title for the created report.</param>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is too short.</exception>
             <returns>True if the report is created.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Geometry3d;
            
             using System.Collections;
            
             public class Example
             {
                    public void Example1()
                    {
                        Model Model = new Model();
            
                        Beam B = new Beam(new Point(0,0,0), new Point(0,0,6000));
                        Beam B1 = new Beam(new Point(0,1000,0), new Point(0,1000,6000));
                        Beam B2 = new Beam(new Point(0,2000,0), new Point(0,2000,6000));
            
                        B.Insert();
                        B1.Insert();
                        B2.Insert();
            
                        ArrayList ObjectsToSelect = new ArrayList();
                        ObjectsToSelect.Add(B);
                        ObjectsToSelect.Add(B2);
                        Model.CommitChanges();
            
                        Tekla.Structures.Model.UI.ModelObjectSelector ModelSelector = new Tekla.Structures.Model.UI.ModelObjectSelector();
                        ModelSelector.Select(ObjectsToSelect);
            
                        Operation.CreateReportFromSelected("Assembly_list", "Assembly_list_selected.xsr", "MyTitle", "", "");
                        Operation.DisplayReport("Assembly_list_selected.xsr");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.DisplayReport(System.String)">
            <summary>
            Opens and displays a report with the given name.
            <para>If a path is not given in the filename, the file is searched from the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
            <para>See Tekla Structures Help for more information about reports.</para>
            </summary>
            <param name="FileName">The name of the report to display. The name must contain more than three characters. </param>
            <exception cref="T:System.ArgumentException">Thrown when the file specified in the <paramref name="FileName"/> is not found or when the <paramref name="FileName"/> is too short.</exception>
            <returns>True if the report existed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateReportFromAll(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Creates a report from all the objects using the given template name and filename.
             <para>If a path is not given in the filename, the file is created to the folder defined with the advanced option XS_REPORT_OUTPUT_DIRECTORY.</para>
             <para>If the given folder does not exist, the report creation fails.</para>
             <para>Internally, this method is asynchronous, and because of that the output file cannot be immediately available.</para>
             <para>See Tekla Structures Help for more information about reports.</para>
             </summary>
             <param name="TemplateName">The name of the report template to be used in report creation. The name must contain more than three characters.</param>
             <param name="FileName">The name of the created report. The name must contain more than three characters.</param>
             <param name="Title1">The first title for the created report.</param>
             <param name="Title2">The second title for the created report.</param>
             <param name="Title3">The third title for the created report.</param>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="TemplateName"/> or <paramref name="FileName"/> is too short.</exception>
             <returns>True if the report is created.</returns>
             <example>
             The following example creates a report and then displays it. It is taken into account that the created file might not be immediately available.
             <code>
             using System.IO;
             using System.Threading;
             using Tekla.Structures.Model.Operations;
            
             public class Example
             {
                    public bool IfLockedWait(string FileName)
                    {
                        // try 10 times
                        int RetryNumber = 10;
                        while (true)
                        {
                            try
                            {
                                using(FileStream FileStream = new FileStream(
                                FileName, FileMode.Open,
                                FileAccess.ReadWrite, FileShare.ReadWrite))
                                {
                                    byte[] ReadText = new byte[FileStream.Length];
                                    FileStream.Seek(0, SeekOrigin.Begin);
                                    FileStream.Read(ReadText, 0, (int)FileStream.Length);
                                }
                                return true;
                            }
                            catch (IOException)
                            {
                                // wait one second
                                Thread.Sleep(1000);
                                RetryNumber--;
                                if(RetryNumber == 0)
                                    return false;
                            }
                        }
                    }
            
                    public void Example1()
                    {
                        Operation.CreateReportFromAll("Assembly_list", "Assembly_list.xsr", "MyTitle", "", "");
            
                        if(File.Exists("Assembly_list.xsr"))
                        {
                            // wait until Tekla Structures has unlocked the file, or timeout
                            if(IfLockedWait("Assembly_list.xsr"))
                            {
                                // display the report
                                Operation.DisplayReport("Assembly_list.xsr");
                            }
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromSelected(System.String,System.String)">
             <summary>
             Creates NC files from the selected parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
             <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Model.UI;
            
             using System.Collections;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Picker Picker = new Picker();
            
                        try
                        {
                            Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create NC for") as Beam;
                            ArrayList Parts = new ArrayList();
            
                            Parts.Add(Beam1);
                            Tekla.Structures.Model.UI.ModelObjectSelector MOS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            
                            MOS.Select(Parts);
                            if (Operation.CreateNCFilesFromSelected("DSTV for profiles", ""))
                                MessageBox.Show("NC creation successful");
                            MOS.Select(new ArrayList()); //remove UI selection
                        }
                        catch { }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromSelected(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
             <summary>
             Creates NC files from the selected parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
             <param name="CreatePopMarks">Create pop-marks during export.</param>
             <param name="PopMarkSettingsFileName">The name of the pop-mark setting file to be used in creation.</param>
             <param name="CreateContourMarking">Create contour marking during export.</param>
             <param name="ContourMarkingSettingsFileName">The name of the contour marking setting file to be used in creation.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
             <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Model.UI;
            
             using System.Collections;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Picker Picker = new Picker();
            
                        try
                        {
                            Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create NC for") as Beam;
                            ArrayList Parts = new ArrayList();
            
                            Parts.Add(Beam1);
                            Tekla.Structures.Model.UI.ModelObjectSelector MOS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            
                            MOS.Select(Parts);
                            if (Operation.CreateNCFilesFromSelected("DSTV for profiles", "", true, "standard", true, "standard"))
                                MessageBox.Show("NC creation successful");
                            MOS.Select(new ArrayList()); //remove UI selection
                        }
                        catch { }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromAll(System.String,System.String)">
             <summary>
             Creates NC files from all parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
             <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model.Operations;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (Operation.CreateNCFilesFromAll("DSTV for plates", ""))
                            MessageBox.Show("NC creation successful");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesFromAll(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String)">
             <summary>
             Creates NC files from all parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
             <param name="CreatePopMarks">Create pop-marks during export.</param>
             <param name="PopMarkSettingsFileName">The name of the pop-mark setting file to be used in creation.</param>
             <param name="CreateContourMarking">Create contour marking during export.</param>
             <param name="ContourMarkingSettingsFileName">The name of the contour marking setting file to be used in creation.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
             <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model.Operations;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (Operation.CreateNCFilesFromAll("DSTV for plates", "", true, "standard", true, "standard"))
                            MessageBox.Show("NC creation successful");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateNCFilesByPartId(System.String,System.String,Tekla.Structures.Identifier,System.String@,System.Boolean,System.String,System.Boolean,System.String)">
             <summary>
             Creates NC files from the selected parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="DestinationFolder">The name of the folder where NC files are created. If defined, overrides the default folder in the setting template.</param>
             <param name="PartID">The identifier of the part.</param>
             <param name="DstvOutput">The DSTV output as string.</param>
             <param name="CreatePopMarks">Create pop-marks during export.</param>
             <param name="PopMarkSettingsFileName">The name of the pop-mark setting file to be used in creation.</param>
             <param name="CreateContourMarking">Create contour marking during export.</param>
             <param name="ContourMarkingSettingsFileName">The name of the contour marking setting file to be used in creation.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="NCFileSettings"/> is not defined.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="NCFileSettings"/> is <c>null</c>.</exception>
             <returns>True if the NC files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Model.UI;
            
             using System.Collections;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Picker Picker = new Picker();
            
                        try
                        {
                            Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create NC for") as Beam;
            
                            Identifier BeamId = Beam1.Identifier;
            
                            string DstvOutput;
                            if (Operation.CreateNCFilesByPartId("DSTV for profiles", "", BeamId, out DstvOutput, true, "standard", true, "standard"))
                            {
                                MessageBox.Show("NC creation successful");
                                //DstvOutput will contain all the info from exported dstv file
                            }
                        }
                        catch { }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateMISFileFromSelected(Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum,System.String)">
             <summary>
             Creates MIS files from the selected parts using the given file name.
             <para>See Tekla Structures Help for more information about MIS files.</para>
             </summary>
             <param name="MISType">The type of the MIS export.</param>
             <param name="FileName">The name of the MIS file to be used in creation.</param>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="FileName"/> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="FileName"/> is not defined.</exception>
             <returns>True if the MIS files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Model.UI;
            
             using System.Collections;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Picker Picker = new Picker();
            
                        try
                        {
                            Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create MIS for") as Beam;
                            ArrayList Parts = new ArrayList();
            
                            Parts.Add(Beam1);
                            Tekla.Structures.Model.UI.ModelObjectSelector MOS = new Tekla.Structures.Model.UI.ModelObjectSelector();
            
                            MOS.Select(Parts);
            
                            if (Operation.CreateMISFileFromSelected(Operation.MISExportTypeEnum.STEEL2000, "myExport.st2000"))
                                MessageBox.Show("MIS creation successful");
            
                            MOS.Select(new ArrayList()); //remove UI selection
                        }
                        catch { }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateMISFileFromAll(Tekla.Structures.Model.Operations.Operation.MISExportTypeEnum,System.String)">
             <summary>
             Creates MIS files from all parts using the given file name.
             <para>See Tekla Structures Help for more information about MIS files.</para>
             </summary>
             <param name="MISType">The type of the MIS export.</param>
             <param name="FileName">The name of the MIS file to be used in creation.</param>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="FileName"/> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="FileName"/> is not defined.</exception>
             <returns>True if the MIS files are created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model.Operations;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        if (Operation.CreateMISFileFromAll(Operation.MISExportTypeEnum.STEEL2000, "myExport.st2000"))
                            MessageBox.Show("MIS creation successful");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.RunMacro(System.String)">
             <summary>
             Starts a macro with the given name. Throws an exception if the file is not found.
             <para>Macros are saved as *.cs files in the folder defined with the
             XS_MACRO_DIRECTORY variable.</para>
             <para>It is possible to run drawing macros using relative paths.</para>
             <para>See Tekla Structures Help for more information about macros.</para>
             </summary>
             <param name="FileName">The name of the macro to start.</param>
             <returns>True if the macro existed.</returns>
             <example>
             <code>
             using Tekla.Structures.Model.Operations;
            
             public class Example
             {
                    public void Example1()
                    {
                        Operation.RunMacro("MyModelingMacro.cs");
                        Operation.RunMacro(@"..\drawings\MyDrawingMacro.cs");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsMacroRunning">
            <summary>
            Returns true if a macro is running, false otherwise.
            <para>Macros are saved as *.cs files in the folder defined with the
            XS_MACRO_DIRECTORY variable.</para>
            <para>See Tekla Structures Help for more information about macros.</para>
            </summary>
            <returns>True if a macro is running.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Open(System.String)">
            <summary>Opens a new model to Tekla Structures ignoring auto saved information.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Open(System.String,System.Boolean)">
            <summary>Opens a new model to Tekla Structures.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <param name="OpenAutoSaved">Tells whether to open auto saved information or not.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.IsModelAutoSaved(System.String)">
            <summary>Tells whether a model has auto saved information.</summary>
            <param name="ModelFolder">The model folder to be used.</param>
            <returns>True if there is auto saved information.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SaveAsWebModel(System.String)">
            <summary>
            Saves the current model as a web model.
            <para>You can save the model as a web model that can be viewed
            via the Internet using a web browser (e.g. Internet Explorer).</para>
            </summary>
            <param name="Filename">The filename to be used.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SaveSelectedAsWebModel(System.String)">
            <summary>
            Saves the selected objects as a web model.
            <para>You can save the selected objects as a web model that can be viewed
            via the Internet using a web browser (e.g. Internet Explorer).</para>
            </summary>
            <param name="Filename">The filename to be used.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.MoveObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.Vector)">
             <summary>
             Moves the model object using the given translation vector.
             </summary>
             <remarks>
             <para>
             Note that the object is moved and updated in the view so ModelObject.Modify() is not needed.
             Call Modify() only after the object's data has been updated with the ModelObject.Select() method.
             </para>
             </remarks>
             <param name="Object">The model object to move.</param>
             <param name="TranslationVector">The vector for moving the object.</param>
             <returns>True on success, false on failure.</returns>
             <example>
             In the following example a connection to the Tekla Structures model has already been established.
             The example code creates a beam to the model and moves the beam one meter in the x and y directions.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Geometry3d;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                        Beam1.Profile.ProfileString = "PL10*140";
                        if(Beam1.Insert())
                        {
                            Vector Vector1 = new Vector(1000, 1000, 0);
            
                            if(Operation.MoveObject(Beam1, Vector1))
                                MessageBox.Show("Move succeeded");
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.MoveObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem)">
             <summary>
             Moves the model object between the given translation coordinate systems.
             </summary>
             <remarks>
             <para>
             Note that the object is moved and updated in the view so ModelObject.Modify() is not needed.
             Call Modify() only after the object's data has been updated with the ModelObject.Select() method.
             </para>
             </remarks>
             <param name="Object">The model object to move.</param>
             <param name="StartCoordinateSystem">The coordinate system to move the object from.</param>
             <param name="EndCoordinateSystem">The coordinate system to move the object to.</param>
             <returns>True on success, false on failure.</returns>
             <example>
             In the following example a connection to the Tekla Structures model has already been established.
             The example code creates a beam (Beam3) to the model and moves the beam between the coordinate systems of Beam1 and Beam2.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Geometry3d;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                        Beam1.Profile.ProfileString = "PL10*140";
                        Beam1.Insert();
            
                        Beam Beam2 = new Beam(new Point(3000, 0, 0), new Point(6000, 0, 0));
                        Beam2.Profile.ProfileString = "PL10*140";
                        Beam2.Insert();
            
                        Beam Beam3 = new Beam(new Point(100, 0, 0), new Point(100, 0, 400));
                        Beam3.Profile.ProfileString = "PL10*140";
                        Beam3.Insert();
            
                        if(Operation.MoveObject(Beam3, Beam1.GetCoordinateSystem(), Beam2.GetCoordinateSystem()))
                            MessageBox.Show("Move succeeded");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CopyObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.Vector)">
             <summary>
             Copies the model object using the given translation vector.
             </summary>
             <param name="Object">The model object to copy.</param>
             <param name="CopyVector">The translation vector for copying.</param>
             <returns>The copied model object on success, null on failure.</returns>
             <example>
             In the following example a connection to the Tekla Structures model has already been established.
             The example code creates a beam to the model and copies the beam to a location that is one meter in the x and y directions.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Geometry3d;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                        Vector Vector1 = new Vector(1000, 1000, 0);
                        Beam1.Profile.ProfileString = "PL10*140";
                        if(Beam1.Insert())
                        {
                            Beam Beam2 = Operation.CopyObject(Beam1, Vector1) as Beam;
                            if(Beam2 != null)
                                MessageBox.Show("Copy succeeded");
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CopyObject(Tekla.Structures.Model.ModelObject,Tekla.Structures.Geometry3d.CoordinateSystem,Tekla.Structures.Geometry3d.CoordinateSystem)">
             <summary>
             Copies the model object between the given translation coordinate systems.
             </summary>
             <param name="Object">The model object to copy.</param>
             <param name="StartCoordinateSystem">The coordinate system to copy the object from.</param>
             <param name="EndCoordinateSystem">The coordinate system to copy the object to.</param>
             <returns>The copied model object on success, null on failure.</returns>
             <example>
             In the following example a connection to the Tekla Structures model has already been established.
             The example code creates a beam (Beam3) to the model and copies the beam between the coordinate systems of Beam1 and Beam2.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Geometry3d;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                        Beam1.Profile.ProfileString = "PL10*140";
                        Beam1.Insert();
            
                        Beam Beam2 = new Beam(new Point(3000, 0, 0), new Point(6000, 0, 0));
                        Beam2.Profile.ProfileString = "PL10*140";
                        Beam2.Insert();
            
                        Beam Beam3 = new Beam(new Point(100, 0, 0), new Point(100, 0, 400));
                        Beam3.Profile.ProfileString = "PL10*140";
                        Beam3.Insert();
            
                        Beam Beam4 = Operation.CopyObject(Beam3, Beam1.GetCoordinateSystem(), Beam2.GetCoordinateSystem()) as Beam;
                        if(Beam4 != null)
                            MessageBox.Show("Copy succeeded");
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.Beam,Tekla.Structures.Model.Beam)">
            <summary> Combines two beams into one beam. </summary>
            <param name="ObjectToCombineTo">The beam to be combined to.</param>
            <param name="ObjectToBeCombined">The beam which will be deleted after a successful operation.</param>
            <returns>The combined beam on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.SingleRebar,Tekla.Structures.Model.SingleRebar)">
            <summary> Combines two single rebars into one rebar. </summary>
            <param name="ObjectToCombineTo">The rebar to be combined to.</param>
            <param name="ObjectToBeCombined">The rebar which will be deleted after a successful operation.</param>
            <returns>The combined single rebar on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Combine(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Model.RebarGroup)">
            <summary> Combines two rebar groups into one rebar group. </summary>
            <param name="ObjectToCombineTo">The rebar group to be combined to.</param>
            <param name="ObjectToBeCombined">The rebar group which will be deleted after a successful operation.</param>
            <returns>The combined rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.Beam,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Splits the beam and creates a new one in the given position.
            </summary>
            <param name="Object">The beam object to be splitted.</param>
            <param name="SplitPoint">The position where splitting is executed.</param>
            <returns>The created beam on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.SingleRebar,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the single rebar and creates a new one in the given position.
            </summary>
            <param name="Object">The single rebar object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created single rebar on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.CurvedRebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the curved rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The curved rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created curved rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.CircleRebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the circle rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The circle rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created circle rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Geometry3d.Line)">
            <summary>
            Splits the rebar group and creates a new one in the given position.
            </summary>
            <param name="Object">The rebar group object to be splitted.</param>
            <param name="SplitLine">The line where splitting is executed.</param>
            <returns>The created rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Split(Tekla.Structures.Model.ContourPlate,Tekla.Structures.Model.Polygon)">
            <summary>
            Splits the contour plate and creates a new one along the given polygon.
            </summary>
            <param name="Object">The contour plate object to be splitted.</param>
            <param name="SplitPolygon">The position where splitting is executed.</param>
            <returns>The created contour plate on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SplitSlab(System.Int32,Tekla.Structures.Geometry3d.FacetedBrep)">
            <summary>
            This command is meant for specifically splitting a concrete slab with
            advanced solid operations to create more robust and user friendly results
            than the command:
            public static ContourPlate Split(ContourPlate Object, Polygon SplitPolygon).
            No validation is done for the type, it is the caller's responsibility to call
            this only for valid types (slabs). Behavior for non-slabs is undetermined.
            </summary>
            <param name="PartId">The part ID that identifies the slab to be split</param>
            <param name="Polymesh">The polymesh that defines the splitting surface</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Ungrouping(Tekla.Structures.Model.RebarGroup)">
            <summary> Ungroups the rebar group and creates new single rebars. </summary>
            <param name="Reinforcement">The rebar group to be ungrouped.</param>
            <returns>An enumerator of single rebars.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Ungrouping(Tekla.Structures.Model.RebarMesh)">
            <summary> Ungroups the rebar mesh and creates new single rebars. </summary>
            <param name="Reinforcement">The rebar mesh to be ungrouped.</param>
            <returns>An enumerator of single rebars.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.Group(System.Collections.IEnumerable)">
            <summary> Groups a list of single rebars or rebar groups and creates a new rebar group. </summary>
            <param name="RebarList">The list of single rebars and rebar groups to be grouped.</param>
            <returns>The created rebar group on success, null on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ShowOnlySelected(Tekla.Structures.Model.Operations.Operation.UnselectedModeEnum)">
            <summary>Show Only Selected objects in current view.</summary>
            <param name="UnselectedMode">Specify what to do with unselected parts.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.FaceVerticesToPolygon(Tekla.Structures.ModelInternal.dotPolygon_t@,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Converts face vertices into a polygon for passing them to the TS core
            </summary>
            <param name="facePolygon">Outputs an ordered polygon determining the face corner points</param>
            <param name="currentLoopPoints">The face loop points</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SolidFaceToPointList(Tekla.Structures.Solid.Face)">
            <summary>
            Gets list of vertex points inside a solid face.
            </summary>
            <param name="solidFace">Solid face to get points from.</param>
            <returns>Returns list of vertexes inside a solid face.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByParts(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">One part used for creating the bent plate.</param>
            <param name="part2">The other part used for creating the bent plate.</param>
            <param name="bendShape">Shape of the bend (cylindrical or conical)</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown if received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByParts(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part)">
            <summary>
            Modifies the first plate by adding a cylindrical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts.
            See <see cref="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByParts(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part,Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">One part used for creating the bent plate.</param>
            <param name="part2">The other part used for creating the bent plate.</param>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByParts(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part,System.Double)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and a radius.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Model.ConnectiveGeometry,System.Double)"/>.
            </summary>
            <param name="part1">One part used for creating the bent plate.</param>
            <param name="part2">The other part used for creating the bent plate.</param>
            <param name="radius">The target radius for the created cylindrical section.</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown if received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateConicalBentPlateByPartsAndAperture(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part,System.Double,System.Double)">
            <summary>
            Modifies the first plate by adding a conical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts. The resulting bend
            will have the given aperture and the provided larger radius.
            </summary>
            <param name="part1">One part used for creating the bent plate.</param>
            <param name="part2">The other part used for creating the bent plate.</param>
            <param name="largestRadius">Radius of the largest section of the cone</param>
            <param name="halfAperture">Angle between a generatrix of the cone and its center line (i.e. axis)</param>
            <returns>The bent plate object if successful, null otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateConicalBentPlateByPartsAndTwoRadiuses(Tekla.Structures.Model.Part,Tekla.Structures.Model.Part,System.Double,System.Double)">
            <summary>
            Modifies the first plate by adding a conical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts. The resulting bend
            will have the two given radiuses.
            </summary>
            <param name="part1">One part used for creating the bent plate.</param>
            <param name="part2">The other part used for creating the bent plate.</param>
            <param name="firstRadius">Radius of one section of the cone</param>
            <param name="secondRadius">Radius of the other section of the cone</param>
            <returns>The bent plate object if successful, null otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <param name="bendShape">Shape of the bend (cylindrical or conical)</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Modifies the first plate by adding a cylindrical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part.
            See <see cref="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.BentPlate.BendShape)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected solid face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected solid face on the second part.</param>
            <param name="bendShape">Shape of the bend (cylindrical or conical)</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face)">
            <summary>
            Modifies the first plate by adding a cylindrical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part.
            See <see cref="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.BentPlate.BendShape)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},System.Double)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts, selected faces in each part and radius.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <param name="radius">The target radius for the created cylindrical section.</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateBentPlateByFaces(Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,System.Double)">
            <summary>
            Modifies the first plate by adding a bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part and radius.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected solid face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected solid face on the second part.</param>
            <param name="radius">The target radius for the created cylindrical section.</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateConicalBentPlateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},System.Double,System.Double)">
            <summary>
            Modifies the first plate by adding a conical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts, selected faces in each part and radius.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <param name="largestRadius">The largest target radius for the created conical section.</param>
            <param name="halfAperture">Angle between a generatrix of the cone and its center line (i.e. axis)</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CreateConicalBentPlateByFaces(Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,Tekla.Structures.Model.Part,Tekla.Structures.Solid.Face,System.Double,System.Double)">
            <summary>
            Modifies the first plate by adding a conical bend that connects it to the second plate
            creating a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part, and the
            largest radius of the conical section and the cone aperture.
            This method can change GUID when using from plug-ins.
            To keep GUID, use <see cref="M:Tekla.Structures.Model.BentPlateGeometrySolver.AddLeg(Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.ConnectiveGeometry,Tekla.Structures.Geometry3d.LineSegment,System.Double)"/>.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected solid face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected solid face on the second part.</param>
            <param name="largestRadius">Largest radius of the conical section</param>
            <param name="halfAperture">Angle between a generatrix of the cone and its center line (i.e. axis)</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not create ConnectiveGeometry instance.</exception>
            <exception cref="T:System.ArgumentException">Thrown when faces have incorrect number of face points or received unsupported bent plate creation input.</exception>
            <returns>The bent plate object if successful, null otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ExplodeBentPlate(Tekla.Structures.Model.BentPlate)">
            <summary>
            Deletes bentPlate and inserts <see cref="T:Tekla.Structures.Model.ContourPlate"/>s instances
            equivalent to the ones used to create bentPlate.
            The <see cref="T:Tekla.Structures.Model.ContourPlate"/> created from the main polygon has the same identifier as bentPlate.
            </summary>
            <param name="bentPlate">the <see cref="T:Tekla.Structures.Model.BentPlate"/> instance to explode.</param>
            <exception cref="T:System.ArgumentException">Thrown when bentPlate is invalid.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.AddToPourUnit(Tekla.Structures.Model.PourUnit,System.Collections.Generic.List{Tekla.Structures.Model.ModelObject})">
             <summary>
             Adds model objects as part of a pour unit
             Model object types accepted are assembly types except cast in situ,
             reinforcements of different kind, components and bolts
             </summary>
             <param name="inputPourUnit">the instance of pour unit to add objects to. </param>
             <param name="objectsToBeAdded">the list of model objects to be added. </param>
             <exception cref="T:System.ArgumentException">Throw exceptions if Pour or object has invalid ID,
             do not exist in model or not valid object type.</exception>
             <example>
             The following example shows how to add all rebar groups in a model to a pour unit defined by the pour GUID.
             You will have to replace the curly braces for the List with lesser and greater than signs.
             <code>
             using System.Collections.Generic;
             using Tekla.Structures.Model;
            
             public class Example
             {
                  public void ExampleAddAllRebarGroupsToPour(Guid pourUnitGuid)
                  {
                         var Model = new Model();
            
                         ModelObjectEnumerator PourEnumerator =
                             Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.POUR_UNIT);
            
                         PourUnit pour = null;
            
                         if(PourEnumerator.GetSize() > 0)
                         {
                             while(PourEnumerator.MoveNext())
                             {
                                 var curPour = PourEnumerator.Current as PourUnit;
                                 if(curPour != null)
                                 {
                                     if(curPour.Identifier.GUID == pourUnitGuid)
                                     {
                                         pour = curPour;
                                         break;
                                     }
                                 }
                             }
                         }
            
                         if(pour != null)
                         {
                             var rebarGroupList = new List{ModelObject}();
            
                             ModelObjectEnumerator ObjectEnumerator =
                                 Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.REBARGROUP);
            
                             if(ObjectEnumerator.GetSize() > 0)
                             {
                                 while(ObjectEnumerator.MoveNext())
                                 {
                                     var rebargroup = ObjectEnumerator.Current as RebarGroup;
                                     if(rebargroup != null)
                                     {
                                         rebarGroupList.Add(rebargroup);
                                     }
                                 }
                             }
            
                             if (rebarGroupList.Count() > 0)
                             {
                                try
                                {
                                    AddToPourUnit(pour, rebarGroupList);
                                }
                                catch (ArgumentException ex)
                                {
                                    var DoSomethingWithThisEx = ex;
                                }
                             }
                         }
                  }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.RemoveFromPourUnit(System.Collections.Generic.List{Tekla.Structures.Model.ModelObject})">
             <summary>
             Removes model object from pour unit
             Model object types accepted are assembly types except cast in situ,
             reinforcements of different kind, components and bolts
             </summary>
             <param name="objectsToBeRemoved">the list of model objects to be added. </param>
             <exception cref="T:System.ArgumentException">Throw exceptions if object has invalid ID,
             do not exist in model or not valid object type.</exception>
             <example>
             The following example shows how to remove one rebar group from the pour unit.
             You will have to replace the curly braces for the List with lesser and greater than signs.
             <code>
             using System.Collections.Generic;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
            
             public class Example
             {
                  public void ExampleRemoveRebarGroupFromPour(Guid rebarGroupGuid)
                  {
                      var Model = new Model();
            
                      ModelObjectEnumerator ObjectEnumerator =
                         Model.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.REBARGROUP);
            
                      RebarGroup rebarGroup = null;
                      bool bFound = false;
                      if(ObjectEnumerator.GetSize() > 0)
                      {
                          while(ObjectEnumerator.MoveNext())
                          {
                              rebarGroup = ObjectEnumerator.Current as RebarGroup;
                              if(rebarGroup != null)
                              {
                                  if(rebarGroup.Identifier.GUID == rebarGroupGuid)
                                  {
                                      bFound = true;
                                      break;
                                  }
                              }
                         }
                      }
            
                      if(bFound)
                      {
                          var objectsToRemove = new List{ModelObject}() { rebarGroup };
                          RemoveFromPourUnit(objectsToRemove);
                      }
                  }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.CalculatePourUnits">
            <summary>
            Calculate and assign objects to pour unit
            Model object types that are associated with pour unit are assembly types except cast in situ,
            reinforcements of different kind, components and screws
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.GetHandlePoints(System.String)">
            <summary>
            Get the Shape Item Handle Points
            </summary>
            <param name="guid">The guid of the shape</param>
            <returns>List of Handle Points</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.SetHandlePoints(System.String,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Set the Shape Item Handle Points
            </summary>
            <param name="guid">The guid of the shape</param>
            <param name="HandlePoints">An array of handle points</param>
            <returns>True if the appending operation was successful</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.DisplayPrompt(System.String)">
            <summary>
            Displays a message in the status bar.
            </summary>
            <remarks>
            Prompts
            <para>
            Tekla Structures prefixes the given prompt with "prompt_" and
            looks for a translation in the <c>prompts.ail</c> file. If the translation
            (e.g. "prompt_Pick_first_position") is not found in the <c>prompts.ail</c>
            file, the prompt string is displayed as such. This feature can be used to
            give already translated strings to the picker.
            </para>
            </remarks>
            <param name="Message">The message to display.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="Message"/> is null.</exception>
            <returns>True if the message could be displayed.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ObjectMatchesToFilter(Tekla.Structures.Model.ModelObject,System.String)">
            <summary>
            Checks whether the object matches to the criteria in the given filter.
            </summary>
            <param name="ModelObject">The model object to check.</param>
            <param name="FilterName">The filter file to check against.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="ModelObject"/> is not valid.</exception>
            <returns>True if the object matches to the given filter criteria.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ObjectMatchesToFilter(Tekla.Structures.Model.ModelObject,Tekla.Structures.Filtering.FilterExpression)">
             <summary>
             Checks whether the object matches to the criteria in the given filter.
             </summary>
             <param name="ModelObject">The model object to check.</param>
             <param name="FilterExpression">The definition of a selection filter to check against.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="ModelObject"/> is not valid.</exception>
             <returns>True if the object matches to the given filter criteria.</returns>
             <example>
             In the following example a connection to the Tekla Structures model has already been established.
             The example code creates a beam to the model and moves the beam one meter in the x and y directions.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Operations;
             using Tekla.Structures.Filtering;
             using Tekla.Structures.Filtering.Categories;
             using Tekla.Structures.Geometry3d;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(3000, 0, 0));
                        Beam1.Profile.ProfileString = "PL10*140";
                        Beam1.Name = "GetObjectsByFilter";
                        if(Beam1.Insert())
                        {
                            BinaryFilterExpression FilterExpression1 = new BinaryFilterExpression(new PartFilterExpressions.Name(),
                                                                           StringOperatorType.IS_EQUAL,
                                                                           new StringConstantFilterExpression("GetObjectsByFilter"));
                            if(Operation.ObjectMatchesToFilter(Beam1, FilterExpression1))
                                MessageBox.Show("Object matches the filter");
                        }
                    }
             }
             </code>
             </example>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.Operation.ProgressBar">
            <summary>
            The ProgressBar class implements progress bar with cancel button.
            </summary>
            <example>
            The following example displays progress bar, updates progress, checks if cancel has been pressed
            and closes the progress bar.
            <code>
            var progress = new Tekla.Structures.Model.Operations.Operation.ProgressBar();
            bool displayResult = progress.Display(100, "title", "message", "cancel..", " ");
            // looping ii from 0 to totalCount-1
            {
                if (ii % 20 == 0) // progress update every 20th item
                {
                    if (progress.Canceled())
                    {
                        break;
                    }
                    progress.SetProgress(ii.ToString(), 100*ii/totalCount);
                }
            }
            progress.Close();
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Display(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Display progress bar dialog with cancel button.
            Display will fail if progress bar is already displayed.
            </summary>
            <param name="SleepTime">Time (ms) to wait until bar is displayed.</param>
            <param name="Title">Title of the dialog.</param>
            <param name="Message">Message to be displayed on the dialog above progress bar.</param>
            <param name="CancelButtonLabel">Label of cancel button.</param>
            <param name="ProgressLabel">Initial progress label (updated with SetProgress). If empty of null no bar exists.</param>
            <returns>True if bar was displayed successfully (meaning bar must be closed later).</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Close">
            <summary>
            Close progress bar. Can be called even if Display was not successful.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.SetProgress(System.String,System.Int32)">
            <summary>
            Update status information on the progress bar.
            </summary>
            <param name="ProgressLabel">Bar label text.</param>
            <param name="Progress">Progess, number between 0..100</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.Operation.ProgressBar.Canceled">
            <summary>
            Check if cancel has been pressed.
            </summary>
            <returns>True if cancel has been pressed.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Operations.GuidConversion">
            <summary>
            Conversion of old TS GUIDs to current GUIDs.
            GUIDs are changed in TS save as operation, this class can be used to convert old GUIDs to current GUIDs.
            To recognize the need for GUID conversion, application needs to save project GUID and compare to the current project GUID.
            Note: With big models the instance uses a lot of memory.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.GuidMapFile">
            <summary>The GUID map file</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.oldGuidNewGuid">
            <summary>The old GUID new GUID mapping</summary>
        </member>
        <member name="F:Tekla.Structures.Model.Operations.GuidConversion.newGuidOldGuid">
            <summary>The new GUID old GUID mapping. Only available when loading the file.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Operations.GuidConversion"/> class.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.GetGuidMapping">
            <summary>Gets the GUID mapping.</summary>
            <returns>The GUID mapping</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.GetNewGuid(System.Guid)">
            <summary>Gets the new GUID.</summary>
            <param name="oldGuid">The old GUID.</param>
            <returns>The current GUID</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.LoadGuidMapping(System.String)">
            <summary>Loads the GUID mapping.</summary>
            <param name="modelFolder">The model folder.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.AddToGuidMap(System.Guid,System.Guid)">
            <summary>Adds to GUID map.</summary>
            <param name="oldGuid">The old GUID.</param>
            <param name="newGuid">The new GUID.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Operations.GuidConversion.IsGuid(System.String)">
            <summary>Checks if the given string is a guid string.</summary>
            <param name="str">The input string.</param>
            <returns>True if guid, otherwise false.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Beam">
            <summary>
            The Beam class represents a single beam in the model.
            A beam has a single start and end point. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point point = new Point(0, 0, 0);
                       Point point2 = new Point(1000, 0, 0);
                       Beam beam = new Beam();
                       beam.StartPoint = point;
                       beam.EndPoint = point2;
                       beam.Profile.ProfileString = "HEA400";
                       beam.Finish = "PAINT";
                       beam.StartPointOffset = new Offset();
                       beam.EndPointOffset = new Offset();
                       bool result = false;
                       result = beam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Beam.BeamTypeEnum">
            <summary>
            The beam types.
            The strip and pad footings are valid only if the material type of the beam is concrete.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.BEAM">
            <summary>
            The beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.PANEL">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.STRIP_FOOTING">
            <summary>
            The concrete strip footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.PAD_FOOTING">
            <summary>
            The concrete pad footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.BeamTypeEnum.COLUMN">
            <summary>
            The column.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.Radius">
            <summary>
            Radius for curved beam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Beam.type">
            <summary>
            Beam type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.StartPoint">
            <summary>
            Gets or sets the start point of the beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.EndPoint">
            <summary>
            Gets or sets the end point of the beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.StartPointOffset">
            <summary>
            Gets or sets the beam's start point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.EndPointOffset">
            <summary>
            Gets or sets the beam's end point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Beam.Type">
            <summary>
            Gets the read-only type of the beam.
            The default type for a new beam instance is beam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam" /> class.
            The start and end points are in the origin.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor(Tekla.Structures.Model.Beam.BeamTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam" /> class by using the defined type.
            </summary>
            <param name="beamType">The type of the beam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Beam" /> class with the given start and end points.
            </summary>
            <param name="startPoint">The start point for the beam.</param>
            <param name="endPoint">The end point for the beam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Insert">
            <summary>
            Inserts the beam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Select">
            <summary>
            Selects a beam from the model database. The beam identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Modify">
            <summary>
            Modifies the existing beam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Beam.Delete">
            <summary>
            Deletes the beam instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BentPlate">
             <summary>
             A class for the bent plate
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                        private ContourPlate CreateContourPlate(Point point1, Point point2, Point point3)
                        {
                            ContourPoint contourPoint1 =  new ContourPoint(point1, null);
                            ContourPoint contourPoint2 = new ContourPoint(point2, null);
                            ContourPoint contourPoint3 = new ContourPoint(point3, null);
            
                            ContourPlate CP = new ContourPlate();
            
                            CP.AddContourPoint(contourPoint1);
                            CP.AddContourPoint(contourPoint2);
                            CP.AddContourPoint(contourPoint3);
                            CP.Finish = "FOO";
                            CP.Profile.ProfileString = "PL200";
                            CP.Material.MaterialString = "Steel_Undefined";
            
                            CP.Insert();
            
                            return CP;
                        }
            
                        public void Example1()
                        {
                            Point point1 = new Point(0, 4000, 1000);
                            Point point2 = new Point(2000, 4000, 1000);
                            Point point3 = new Point(0, 6000, 3000);
            
                            Point point4 = new Point(0, 0, 0);
                            Point point5 = new Point(0, 2000, 0);
                            Point point6 = new Point(2000, 2000, 0);
            
                            Part contourPlate1 = CreateContourPlate(point1, point2, point3);
                            Part contourPlate2 = CreateContourPlate(point4, point5, point6);
                            BentPlate bentPlate = Operations.Operation.CreateBentPlateByParts(contourPlate1, contourPlate2);
                        }
             }
             </code>
             </example>
        </member>
        <member name="T:Tekla.Structures.Model.BentPlate.BendShape">
            <summary>
            Enumerator to define different possibilities for bend shapes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlate.BendShape.Cylindrical">
            <summary>
            Cylindrical bend.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BentPlate.BendShape.Conical">
            <summary>
            Conical bend.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BentPlate" /> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BentPlate.Geometry">
            <summary>
            Gets or sets the geometry of the bent plate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BentPlate.Thickness">
            <summary>
            Gets thickness of the bent plate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.Insert">
            <summary>
            Inserts the bent plate into the model database. All the attributes must be set and geometry should have at least one bend.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.Select">
            <summary>
            Selects a bent plate object from the database.
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.Delete">
            <summary>
            Deletes the bent plate with this instance identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.Modify">
            <summary>
            Modifies the bent plate object values in the database.
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.ToStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Exports this to marshaling struct
            </summary>
            <param name="p">the export struct</param>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.BentPlateParametersCheck">
            <summary>
            Examines whether bent plate parameters are well defined
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.ClearPositioning">
            <summary>
            Resets positioning attributes of this bent plate, to avoid side effects e.g. after explode
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.SelectInstance">
            <summary>
            Selects an instance of a bent plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.CreateInstance">
            <summary>
            Creates an instance of a bent plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BentPlate.ModifyInstance">
            <summary>
            Modifies an instance of a bent plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Brep">
             <summary>
             The Brep class represents a single brep in the model.
             A brep has a single start and end point.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                    public void Example1()
                    {
                        Point point = new Point(0, 0, 0);
                        Point point2 = new Point(1000, 0, 0);
                        Brep brep = new Brep();
                        brep.StartPoint = point;
                        brep.EndPoint = point2;
                        brep.Profile = new Profile { ProfileString = "Default" };
                        bool result = brep.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.StartPoint">
            <summary>
            Gets or sets the start point of the brep.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.EndPoint">
            <summary>
            Gets or sets the end point of the brep.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.StartPointOffset">
            <summary>
            Gets or sets the beam's start point offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Brep.EndPointOffset">
            <summary>
            Gets or sets the beam's end point offset.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Brep" /> class.
            The start and end points are in the origin.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Brep" /> class with the given start and end points.
            </summary>
            <param name="startPoint">The start point for the brep.</param>
            <param name="endPoint">The end point for the brep.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Insert">
            <summary>
            Inserts the brep into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Select">
            <summary>
            Selects a brep from the model database. The brep identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Modify">
            <summary>
            Modifies the existing brep in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Brep.Delete">
            <summary>
            Deletes the brep instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPlate">
            <summary>
            The ContourPlate class represents a part made with a contour, such as, a concrete slab.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point =  new ContourPoint(new Point(   0, 4000, 0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000, 4000, 0), null);
                       ContourPoint point3 = new ContourPoint(new Point(   0, 6000, 0), null);
            
                       ContourPlate CP = new ContourPlate();
            
                       CP.AddContourPoint(point);
                       CP.AddContourPoint(point2);
                       CP.AddContourPoint(point3);
                       CP.Finish = "FOO";
                       CP.Profile.ProfileString = "PL200";
                       CP.Material.MaterialString = "Steel_Undefined";
            
                       bool Result = false;
                       Result = CP.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum">
            <summary>
            The contour plate types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.UNKNOWN">
            <summary>
            The unknown type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.PLATE">
            <summary>
            The plate-like contour plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate.ContourPlateTypeEnum.SLAB">
            <summary>
            The slab-like contour plate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.ContourPlate._type">
            <summary>
            The type of the PolyBeam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPlate.Type">
            <summary>
            Gets the read only type of the contour plate.
            In creation, the type is defined based on the material.
            If the material is concrete, the type will be slab, otherwise plate.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.ContourPlate.Contour">
            <summary>
            Gets or sets the contour for the contour plate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.ContourPlate" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a contour point to the contour plate.
            </summary>
            <param name="contourPoint">The contour point that is to be inserted.</param>
            <returns>True on success, false if there is no more space for another contour point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Insert">
            <summary>
            Inserts the contour plate into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Select">
            <summary>
            Selects a contour plate from the model database. The identifier of the contour plate must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Modify">
            <summary>
            Modifies the existing contour plate in the model database to match the current one. The identifier must
            be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.Delete">
            <summary>
            Deletes the contour plate instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.ContourPlate.GetContourPolycurve">
            <summary>
            Get contour as polycurve
            </summary>
            <returns>Polycurve instance or null</returns>
        </member>
        <member name="T:Tekla.Structures.Model.LoftedPlate">
             <summary>
             This class represents a lofted plate
             </summary>
             <example>
             <code>
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
            
             public class Example
             {
                 private static List&lt;ICurve&gt; GetPlateBaseGeometries()
                 {
                     var bottomArc = new Arc(new Point(0, 0, 0), new Point(1000, 0, 0), new Vector(0, 0, 1), Math.PI);
                     var topArc = new Arc(new Point(0, 0, 10000), new Point(1000, 0, 10000), new Vector(0, 0, 1), Math.PI);
            
                     return new List&lt;ICurve&gt; { bottomArc, topArc };
                 }
            
                 public static void Example1()
                 {
                     var baseCurves = GetPlateBaseGeometries();
            
                     var loftedPlate = new LoftedPlate
                     {
                         BaseCurves = baseCurves,
                         Finish = "FOO"
                     };
            
                     loftedPlate.Profile.ProfileString = "PL10";
                     loftedPlate.Material.MaterialString = "Steel_Undefined";
            
                     loftedPlate.Insert();
                     new Model().CommitChanges();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.LoftedPlate" /> class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoftedPlate.baseCurves">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.LoftedPlate.LoftedPlateFaceTypeEnum">
            <summary>
            Lofted plate solid creation face types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoftedPlate.LoftedPlateFaceTypeEnum.Perpendicular">
            <summary>
            Faces are perpendicular to the thickness direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.LoftedPlate.LoftedPlateFaceTypeEnum.BoundedByCurvePlanes">
            <summary>
            Faces following each curve plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.LoftedPlate.BaseCurves">
            <summary>
            The curves that define the directrix lines of the lofted plate. A lofted plate is defined by at least to
            base curves (non empty if they are Polycurve(s)).
            </summary>
            <remarks>
            Only the first two curves will be used for the plate. Additionally, if the base curves are polycurves, only
            the first geometry of each polycurve will be used.
            </remarks>
        </member>
        <member name="P:Tekla.Structures.Model.LoftedPlate.FaceType">
            <summary>
            Gets or sets what type of solid faces will be used to create lofted plate solid.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.Insert">
            <summary>
            Inserts the lofted plate into the model database. All the attributes must be set and there must be at
            minimum 2 base curves.
            </summary>
            <exception cref="T:Tekla.Structures.Model.LoftedPlateOperationException">
            Thrown if the input base curves would yield an invalid lofted plate. The most derived type of the exception
            can be used to retrieve the actual source of error.
            </exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.Select">
            <summary>
            Selects a lofted plate object from the database.
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.Delete">
            <summary>
            Deletes the lofted plate with this instance identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.Modify">
            <summary>
            Modifies the lofted plate object values in the database.
            </summary>
            <exception cref="T:Tekla.Structures.Model.LoftedPlateOperationException">
            Thrown if the input base curves would yield an invalid lofted plate. The most derived type of the exception
            can be used to retrieve the actual source of error.
            </exception>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.ToStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Exports this to marshaling struct
            </summary>
            <param name="p">the export struct</param>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.FromPolycurve(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Gets the a base curve from the given polycurve
            </summary>
            <param name="baseCurve">Input polycurve, from Core</param>
            <returns>ICurve that represents the base curve best</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.CheckParameterCorrectness">
            <summary>
            Examines whether lofted plate parameters are well defined
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.SetNeutralPositioning">
            <summary>
            Sets neutral positioning attributes
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.SelectInstance">
            <summary>
            Selects an instance of a lofted plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.CreateInstance">
            <summary>
            Creates an instance of a lofted plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.ModifyInstance">
            <summary>
            Modifies an instance of a lofted plate
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlate.ValidateOperationStatus(Tekla.Structures.ModelInternal.LoftedPlateValidityStatus)">
            <summary>
            Checks the error code of a lofted plate operation and throws the corresponding exception, if needed
            </summary>
            <param name="status">Error code to check</param>
        </member>
        <member name="T:Tekla.Structures.Model.LoftedPlateOperationException">
            <summary>
            This empty class serves as a base (marker class) for all the exception thrown in lofted plate operations
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LoftedPlateOperationException.#ctor(System.String)">
            <summary>
            Constructs an instance of the class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Tekla.Structures.Model.InvalidCurveCombinationException">
            <summary>
            This class represent an exception thrown when the combination of base curves is not allowed in a lofted plate
            operation
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.InvalidCurveCombinationException.#ctor">
            <summary>
            Constructs an instance of the class
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.NullRulingException">
            <summary>
            This class represent an exception thrown when a ruling of the lofted plate (i.e. the lines that swipe the plate
            surface between the base curves) would become zero because of a lofted plate operation
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NullRulingException.#ctor">
            <summary>
            Constructs an instance of the class
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.SelfIntersectingSurfaceException">
            <summary>
            This class represent an exception thrown when the an operation on a lofted plate has been determined to cause
            a self intersecting surface
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SelfIntersectingSurfaceException.#ctor">
            <summary>
            Constructs an instance of the class
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UnknownLoftedPlateErrorException">
            <summary>
            This class represent an exception thrown when an operation on a lofted plate caused an error of unknown origin
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UnknownLoftedPlateErrorException.#ctor">
            <summary>
            Constructs an instance of the class
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Part">
            <summary>
            The Part class represents a part in the model.
            A part can be either a beam, a polybeam or a contour plate.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Part.CastUnitTypeEnum">
            <summary>
            The cast unit types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Part.CastUnitTypeEnum.PRECAST">
            <summary>
            The precast cast unit type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Part.CastUnitTypeEnum.CAST_IN_PLACE">
            <summary>
            The cast in place cast unit type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Profile">
            <summary>
            Gets or sets the profile of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Material">
            <summary>
            Gets or sets the material the part is made of.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.DeformingData">
            <summary>
            Gets or sets the deforming data of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.PartNumber">
            <summary>
            Gets or sets the part number.
            Defines the numbering in the part sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.AssemblyNumber">
            <summary>
            Gets or sets the assembly number.
            Defines the numbering in the assembly sense.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Name">
            <summary>
            Gets or sets the name of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Class">
            <summary>
            Gets or sets the class of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Finish">
            <summary>
            Gets or sets the finish of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.CastUnitType">
            <summary>
            Gets or sets the cast unit type of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.PourPhase">
            <summary>
            Gets or sets the pour phase of the part.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Part.Position">
            <summary>
            Gets or sets the part position.
            Defines the way the part is positioned in the model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Part.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Part" /> class with default attributes.
            <para>The default values are set as follows:
            <list type="bullet">
            <item>Position = new Position();</item>
            <item>Profile = new Profile();</item>
            <item>Material = new Material();</item>
            <item>DeformingData = new DeformingData();</item>
            <item>Name = "";</item>
            <item>Class = "";</item>
            <item>Finish = "";</item>
            <item>PartNumber = new NumberingSeries("P", 1);</item>
            <item>AssemblyNumber = new NumberingSeries("A", 1);</item>
            <item>CastUnitType = CastUnitTypeEnum.PRECAST;</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid">
            <summary>
            Returns the solid of the part.
            </summary>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid(Tekla.Structures.Model.Solid.SolidCreationTypeEnum)">
            <summary>
            Returns the solid of the part.
            </summary>
            <param name="solidCreationType">The type to be used in solid creation.</param>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSolid(Tekla.Structures.Forming.FormingStates)">
            <summary>
            Returns the solid of the part.
            </summary>
            <param name="formingStates">Solid forming information.</param>
            <returns>The solid of the part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetAssembly">
            <summary>
            Returns the assembly that the part belongs to.
            </summary>
            <returns>The assembly that the part belongs to.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetPartMark">
            <summary>
            Returns the part mark. 
            </summary>
            <returns>A string with the part mark.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetCenterLine(System.Boolean)">
            <summary> Returns the center line for the given part. </summary>
            <param name="withCutsFittings">Defines if the center line is created from a solid with cuts and fittings or not.</param>
            <returns>A list of points that define the center line for the given part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetReferenceLine(System.Boolean)">
            <summary> Returns the reference line for the given part. </summary>
            <param name="withCutsFittings">Defines if the reference line is created from a solid with cuts and fittings or not.</param>
            <returns>A list of points that define the reference line for the given part.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetComponents">
            <summary>
            Returns an enumerator of all the connected components, connections,
            seams and details inherited from the base component.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetBooleans">
            <summary>
            Returns an enumerator of all the connected boolean objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetBolts">
            <summary>
            Returns an enumerator of all the connected bolts.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetWelds">
            <summary>
            Returns an enumerator of all the connected welds.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetReinforcements">
            <summary>
            Returns an enumerator of all the connected reinforcements.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSurfaceTreatments">
            <summary>
            Returns an enumerator of all the connected surface treatments.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetSurfaceObjects">
            <summary>
            Returns an enumerator of all the connected surface objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetPours">
            <summary>
            Returns an enumerator of all the pours that the part belongs to.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.CompareTo(Tekla.Structures.Model.Part)">
            <summary>
            Compares the instantiated part with another one.
            </summary>
            <param name="partToCompare">The part to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
            <remarks>
            If the numbering hasn't been performed the function will also return false.
            </remarks>
        </member>
        <member name="M:Tekla.Structures.Model.Part.GetDSTVCoordinateSystem">
            <summary>
            Get DSTV coordinate system.
            </summary>        
            <returns>The NC-DSTV coordinate system of the part on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.CompareToPart(System.Int32)">
            <summary>
            Compares the parts with id.
            </summary>
            <param name="partToCompareId">Part id to compare with.</param>
            <returns>True if there are no differences, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Part.ToStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Method for transforming the Part's data into corresponding struct.
            </summary>
            <param name="p">Reference to the struct which will be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Part.FromStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Method for transforming the struct data to corresponding Part data.
            </summary>
            <param name="p">Reference to the struct which will be used to populate the Part's data.</param>
        </member>
        <member name="T:Tekla.Structures.Model.PolyBeam">
            <summary>
            The PolyBeam class represents a continuous beam with a contour as input.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPoint point = new ContourPoint(new Point(0,2000,0), null);
                       ContourPoint point2 = new ContourPoint(new Point(2000,2000,0), null);
                       ContourPoint point3 = new ContourPoint(new Point(0,4000,0), null);
            
                       PolyBeam PolyBeam = new PolyBeam();
            
                       PolyBeam.AddContourPoint(point);
                       PolyBeam.AddContourPoint(point2);
                       PolyBeam.AddContourPoint(point3);
            
                       PolyBeam.Profile.ProfileString = "HEA400";
                       PolyBeam.Finish = "PAINT";
                       bool Result = false;
                       Result = PolyBeam.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum">
            <summary>
            The polybeam types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.BEAM">
            <summary>
            The polybeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.PANEL">
            <summary>
            The panel.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.STRIP_FOOTING">
            <summary>
            The strip footing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum.COLUMN">
            <summary>
            The column.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolyBeam.type">
            <summary>
            The type of the PolyBeam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PolyBeam.Type">
            <summary>
            Gets the read only type of the polybeam.
            The default type for a new polybeam instance is beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PolyBeam.Contour">
            <summary>
            Gets or sets the contour for the polybeam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PolyBeam" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.#ctor(Tekla.Structures.Model.PolyBeam.PolyBeamTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PolyBeam" /> class by using the defined type.
            </summary>
            <param name="polyBeamType">The type of the polybeam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.AddContourPoint(Tekla.Structures.Model.ContourPoint)">
            <summary>
            Adds a contour point to the polybeam.
            </summary>
            <param name="contourPoint">The contour point to be added to the polybeam.</param>
            <returns>True on success, false if there is no more space for another contour point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Insert">
            <summary>
            Inserts the polybeam into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Select">
            <summary>
            Selects a polybeam from the model database. The identifier of the polybeam must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Modify">
            <summary>
            Modifies the existing polybeam in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.Delete">
            <summary>
            Deletes the polybeam instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.GetPolybeamCoordinateSystems">
            <summary> Returns a list of coordinate systems for the polybeam segments. </summary>
            <returns>A list of coordinate systems for the polybeam segments.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolyBeam.GetCenterLinePolycurve">
            <summary>
            Get centerline as polycurve
            </summary>
            <returns>Polycurve instance or null</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SpiralBeam">
            <summary>
            A class for the spiral beam part.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public bool SimpleExample()
                   {
                       var startPoint = new Point(0.0, 0.0, 0.0);
                       var centerPoint = new Point(200.0, 0.0, 0.0);
                       var totalRise = 100.0;
                       var rotationAngle = 90.0;
                       
                       SpiralBeam spiral = new SpiralBeam(startPoint, centerPoint, totalRise, rotationAngle);
                       spiral.Profile.ProfileString = "U300";
                       return spiral.Insert();
                   }
                    
                   public bool FullExample()
                   {
                       var startPoint = new Point(0.0, 0.0, 0.0);
                       var rotationAxisPoint1 = new Point(200.0, 0.0, 0.0);
                       var rotationAxisPoint2 = new Point(200.0, 0.0, 1000.0);
                       var totalRise = 1000.0;
                       var rotationAngle = 1080.0;
                       var twistAngleStart = 10.0;
                       var twistAngleEnd = 30.0;
                       
                       SpiralBeam spiral = new SpiralBeam(startPoint, rotationAxisPoint1, rotationAxisPoint2, totalRise, rotationAngle, twistAngleStart, twistAngleEnd);
                       spiral.Profile.ProfileString = "HEA400";
                       spiral.Material.MaterialString = "Steel_Undefined";
                       
                       bool result = spiral.Insert();
                       return result;
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.StartPoint">
            <summary>
            Gets or sets the start point of the spiral beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.RotationAxisBasePoint">
            <summary>
            Gets or sets the first definition point of the spiral beam rotation axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.RotationAxisUpPoint">
            <summary>
            Gets or sets the second definition point of the spiral beam rotation axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.TotalRise">
            <summary>
            Gets or sets the difference between the spiral beam start and end point in the direction of the rotation axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.RotationAngle">
            <summary>
            Gets or sets the rotation of the spiral beam in degrees. Each range of 360.0 degrees adds a full rotation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.TwistAngleStart">
            <summary>
            Gets or sets the twist angle in degrees at the start of the spiral beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.TwistAngleEnd">
            <summary>
            Gets or sets the twist angle in degrees at the end of the spiral beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.RotationCenterPoint">
            <summary>
            Gets the geometric rotation center point at the start of the spiral beam.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.RotationAxisDirection">
            <summary>
            Gets the direction of the spiral beam rotation axis.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.EndPoint">
            <summary>
            Gets the spiral beam end point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.SpiralBeam" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.SpiralBeam" /> class with the given parameters.
            </summary>
            <param name="startPoint">The spiral beam starting point.</param>
            <param name="rotationAxisBasePoint">The first definition point of the spiral beam rotation axis.</param>
            <param name="rotationAxisUpPoint">The second definition point of the spiral beam rotation axis.</param>
            <param name="totalRise">The difference between the spiral beam start and end point along the rotation axis direction.</param>
            <param name="rotationAngle">The spiral beam cumulative rotation angle.</param>
            <param name="twistAngleAtStart">The twist angle at the start of the spiral beam.</param>
            <param name="twistAngleAtEnd">The twist angle at the end of the spiral beam.</param>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.SpiralBeam" /> class with the given parameters.
            </summary>
            <param name="startPoint">The spiral beam starting point.</param>
            <param name="rotationAxisBasePoint">The first definition point of the spiral beam rotation axis.</param>
            <param name="rotationAxisUpPoint">The second definition point of the spiral beam rotation axis.</param>
            <param name="totalRise">The difference between the spiral beam start and end point along the rotation axis direction.</param>
            <param name="rotationAngle">The spiral beam cumulative rotation angle.</param>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.SpiralBeam" /> class with the given parameters. Rotation axis direction is current positive Z direction.
            </summary>
            <param name="startPoint">The spiral beam starting point.</param>
            <param name="rotationAxisPoint">A point on the spiral beam rotation axis.</param>
            <param name="totalRise">The difference between the spiral beam start and end point along the rotation axis direction.</param>
            <param name="rotationAngle">The spiral beam cumulative rotation angle.</param>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.Insert">
            <summary>
            Inserts the spiral beam into the model database. All the attributes must be set.
            </summary>
            <exception cref="T:Tekla.Structures.Model.SpiralBeamDataException">Throws exception if input data is invalid.</exception>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.Select">
            <summary>
            Selects a spiral beam object from the database.
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.Delete">
            <summary>
            Deletes the spiral beam with this instance identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.Modify">
            <summary>
            Modifies the spiral beam object values in the database.
            </summary>
            <exception cref="T:Tekla.Structures.Model.SpiralBeamDataException">Throws exception if input data is invalid.</exception>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.ToStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Exports this to marshaling struct
            </summary>
            <param name="p">the export struct</param>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.FromStruct(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            Import this from marshaling struct
            </summary>
            <param name="p">the export struct</param>
        </member>
        <member name="P:Tekla.Structures.Model.SpiralBeam.Geometry">
            <summary>
            Gets or sets the geometry of the spiral beam.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.SpiralBeamParametersCheck">
            <summary>
            Examines whether the spiral beam parameters are well defined.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.SelectInstance">
            <summary>
            Selects an instance of a spiral beam.
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.CreateInstance">
            <summary>
            Creates an instance of a spiral beam.
            </summary>
            <exception cref="T:Tekla.Structures.Model.SpiralBeamDataException">Throws exception if input data is invalid.</exception>
            <returns>True if success</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SpiralBeam.ModifyInstance">
            <summary>
            Modifies an instance of a spiral beam.
            </summary>
            <exception cref="T:Tekla.Structures.Model.SpiralBeamDataException">Throws exception if input data is invalid.</exception>
            <returns>True if success</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SpiralBeam.ErrorStatus">
            <summary>
            Define possible statuses for geometry creation/modification commands.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SpiralBeam.ErrorStatus.DataMissing">
            <summary>
            Status when some part data is missing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SpiralBeam.ErrorStatus.DefinitionPointsTooClose">
            <summary>
            Status when definition points are too close.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SpiralBeam.ErrorStatus.DefinitionPointsCannotBeAligned">
            <summary>
            Status when definition points are on line with sweep direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SpiralBeam.ErrorStatus.ZeroTotalRiseWithMore360Degrees">
            <summary>
            Status when total rise is zero and rotation angle more than 360 degrees.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PolymeshEnumerator">
            <summary>
            The PolymeshEnumerator class is used to enumerate the polymesh of a pour's merged faces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.PolymeshEnumerator.enumerator">
            <summary>
            The enumerator holding polymeshes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolymeshEnumerator.#ctor(System.Collections.Generic.List{Tekla.Structures.Geometry3d.FacetedBrep})">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PolymeshEnumerator"/> class.
            </summary>
            <param name="polymeshes">List of polymeshes</param>
        </member>
        <member name="P:Tekla.Structures.Model.PolymeshEnumerator.Current">
            <summary>
            Gets the current polymesh.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolymeshEnumerator.MoveNext">
            <summary>
            Moves to the next item in the enumerator. 
            </summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolymeshEnumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.PourBreak">
             <summary>
             The PourBreak class represents a pour break in a model.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             using System;
             using System.Collections;
             using System.Collections.Generic;
             
             public class Example
             {
                public void Example1()
                {
                    Point startPointBeam = new Point(0.0, 0.0, 0.0);
                    Point endPointBeam = new Point(7200.0, 0.0, 0.0);
                    Beam beam = new Beam(startPointBeam, endPointBeam)
                    {
                        Profile = { ProfileString = "400*400" },
                        Material = { MaterialString = "Concrete_Undefined" }
                    };
            
                    if (beam.Insert())
                   {
                       Vector[] vertices = new[]
                       {
                           new Vector(2000.0,  200.0,    0.0),
                           new Vector(2000.0,  200.0, -400.0),
                           new Vector(2000.0, -200.0, -400.0),
                           new Vector(2000.0, -200.0,    0.0)
                       };
                       var outerWires = new int[1][];
                       outerWires[0] = new int[vertices.Length];
                       for (int i = 0; i &lt; vertices.Length; i++)
                           outerWires[0][i] = i;
                       var innerWires = new Dictionary&lt;int, int[][]&gt; { };
            
                       var pourBreak = new PourBreak { Polymesh = new FacetedBrep(vertices, outerWires, innerWires) };
                       bool result = pourBreak.Insert();
                   }
               }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.PourBreak.Polymesh">
            <summary>
            Gets or sets the polymesh that forms the object geometry.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PourBreak.ModelObjectType">
            <summary>
            Gets the model object type for this instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.Insert">
            <summary>
            Inserts a new model object. The geometry of the object
            needs to be set by using the public Polymesh
            function, before calling insert.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.Select">
            <summary>
            Selects the model object from the model by the identifier of this instance.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.Modify">
            <summary>
            Modifies the existing model object in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.Delete">
            <summary>
            Deletes the model object from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.ToStruct(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            converts this instance to a struct.
            </summary>
            <param name="output">
            The output parameter.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.FromStruct(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            Sets the properties of this instance from the struct.
            </summary>
            <param name="input">
            The input parameter.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.CreateInstanceDelegate(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            Invokes the delegate of creating this pour break in the model.
            </summary>
            <param name="pourBreak">The pour break.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.SelectInstanceDelegate(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            Invokes the delegate of selecting this pour break in the model.
            </summary>
            <param name="pourBreak">The pour break.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourBreak.ModifyInstanceDelegate(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            Invokes the delegate of modifying this pour break in the model.
            </summary>
            <param name="pourBreak">The pour break.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
        </member>
        <member name="T:Tekla.Structures.Model.PourObject">
            <summary>
            The PourObject class represents a pour object in the model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam beam = new Beam(new Point(1000, 1000, 400), new Point(3000, 1000, 400));
                    beam.Profile.ProfileString = "380*380";
                    beam.Material.MaterialString = "K40-1";
                    beam.CastUnitType = Part.CastUnitTypeEnum.CAST_IN_PLACE;
                    if (beam.Insert())
                    {
                        Beam beam2 = new Beam(new Point(800, 1000, 0), new Point(800, 1000, 3000));
                        beam2.Profile.ProfileString = "380*380";
                        beam2.Material.MaterialString = "K40-1";
                        beam2.CastUnitType = Part.CastUnitTypeEnum.CAST_IN_PLACE;
                        if (beam2.Insert())
                        {
                            new Model().CommitChanges();
                            ModelObjectEnumerator pours = beam.GetPours();
                            while(pours.MoveNext())
                            {
                                PourObject pour = pours.Current as PourObject;
                                if(pour != null)
                                {
                                    Solid solid = pour.GetSolid();
                                    if(solid != null)
                                        Console.WriteLine("Fetching solid from pour successfully!");
                                }
                            }
                        }         
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.PourObject"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PourObject.Class">
            <summary>
            Gets or sets the class of the pour object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PourObject.PourNumber">
            <summary>
            Gets or sets the pour number of the pour.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PourObject.PourType">
            <summary>
            Gets or sets the pour type of the pour.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.PourObject.ConcreteMixture">
            <summary>
            Gets or sets the concrete mixture of the pour.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Insert">
            <summary>
            At the moment pour objects cannot be inserted.
            </summary>
            <returns>Returns false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Select">
            <summary>
            Selects the pour object instance from the model. The identifier of the instance must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Modify">
            <summary>
            Modifies the pour object with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.Delete">
            <summary>
            At the moment pour objects cannot be deleted.
            </summary>
            <returns>Returns false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetSolid">
            <summary>
            Returns the solid of the pour object.
            </summary>
            <returns>The solid of the pour object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetPourPolymeshes">
            <summary>
            Returns a new polymesh enumerator based on merged faces of the pour object in the current plane.
            </summary>
            <returns>A polymesh enumerator to enumerate through the solid's faces after merging based on pour object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetParts">
            <summary>
            Returns an enumerator of all parts related to pour.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetObjects">
            <summary>
            Returns an enumerator of all objects related to pour.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetFatherPourUnit">
            <summary>
            Returns the pour unit that the pour object belongs to.
            </summary>
            <returns>a pour unit.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetSurfaceObjects">
            <summary>
            Returns an enumerator of all the connected surface objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.GetAssembly">
            <summary>
            Returns the assembly that the pour object belongs to.
            </summary>
            <returns>The assembly that the pour object belongs to.</returns>
            <obsolete>Deprecated, use GetFatherPourUnit instead</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.ToStruct(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            To the structure.
            </summary>
            <param name="pourObject">The pourObject.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.FromStruct(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            Froms the structure.
            </summary>
            <param name="pourObject">The pourObject.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.SelectInstance">
            <summary>
            Selects the instance.
            </summary>
            <returns>Returns true if can be selected.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourObject.ModifyInstance">
            <summary>
            Modifies the instance.
            </summary>
            <returns>Returns true if modified.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.PourUnit">
            <summary>
            The PourUnit class represents a pour unit in the model.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam beam = new Beam(new Point(1000, 1000, 400), new Point(3000, 1000, 400));
                    beam.Profile.ProfileString = "380*380";
                    beam.Material.MaterialString = "K40-1";
                    beam.CastUnitType = Part.CastUnitTypeEnum.CAST_IN_PLACE;
                    if (beam.Insert())
                    {
                        Beam beam2 = new Beam(new Point(800, 1000, 0), new Point(800, 1000, 3000));
                        beam2.Profile.ProfileString = "380*380";
                        beam2.Material.MaterialString = "K40-1";
                        beam2.CastUnitType = Part.CastUnitTypeEnum.CAST_IN_PLACE;
                        if (beam2.Insert())
                        {
                            new Model().CommitChanges();
                            ModelObjectEnumerator pours = beam.GetPours();
                            while (pours.MoveNext())
                            {
                                PourObject pour = pours.Current as PourObject;
                                if (pour != null)
                                {
                                    Solid solid = pour.GetSolid();
                                    if (solid != null)
                                        Console.WriteLine("Fetching solid from pour successfully!");
                                    PourUnit pourUnit = pour.GetFatherPourUnit();
                                    pourUnit.Name = "test";
                                    pourUnit.Modify();
                                    new Model().CommitChanges();
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.PourUnit.Name">
            <summary>
            Gets or sets the name of the pour unit.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.Insert">
            <summary>
            At the moment pour units cannot be inserted.
            </summary>
            <returns>Returns false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.Select">
            <summary>
            Selects the pour unit instance from the model. The identifier of the instance must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.Modify">
            <summary>
            Modifies the pour unit with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.Delete">
            <summary>
            At the moment pour units cannot be deleted.
            </summary>
            <returns>Returns false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.GetObjects">
            <summary>
            Returns all objects related to pour unit, pour object not included.
            </summary>
            <returns>A list of model object on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.GetPourObject">
            <summary>
            Returns the pour object in pour unit.
            </summary>
            <returns>The pour object</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.ToStruct(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            To the structure.
            </summary>
            <param name="PourUnit">The PourUnit.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.FromStruct(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            From the structure.
            </summary>
            <param name="PourUnit">The PourUnit.</param>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.SelectInstance">
            <summary>
            Selects the instance.
            </summary>
            <returns>Returns true if can be selected.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PourUnit.ModifyInstance">
            <summary>
            Modifies the instance.
            </summary>
            <returns>Returns true if modified.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BasePoint">
            <summary>
            The BasePoint class provides base point related functionalities. Base points can be retrieved using
            ProjectInfo class.
            </summary>
            <example>
            The following example gets the project information and shows the value of the Name property
            in a message dialog:
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                private void InsertBasePointExample()
                {
                    var BasePoint = new BasePoint(
                        0, // The id. Use zero when creating new
                        Guid.Empty, // The guid. Use Guid.Empty when creating new
                        Guid.Empty, // The initial guid. A metadata field
                        "Base point name",
                        "Base point description",
                        "Base point coordinate system",
                        1000.0, // North-South value
                        2000.0, // East-West value
                        3000.0, // Elevation value
                        4000.0, // Latitude value
                        5000.0, // Longitude value
                        6000.0, // Base points X location in model
                        7000.0, // Base points Y location in model
                        8000.0, // Base points Z location in model
                        (45 * Math.PI / 180), // Angle to north value in radians
                        false, // Boolean indicating if this base point is project base point
                        false); // Boolean indicating if this base point is current base point
                
                    BasePoint.Insert();
                }
                
                private void GetBasePointsExample()
                {
                    var BasePoints = ProjectInfo.GetBasePoints();
                }
                
                private void GetBasePointByGuidExample()
                {
                    Guid BasePointGuid = new Guid("TheGuidOfTheBasePoint");
                    var BasePoints = ProjectInfo.GetBasePointByGuid(BasePointGuid);
                }
                
                private void GetBasePointByNameExample()
                {
                    Guid BasePointGuid = new Guid("TheNameOfTheBasePoint");
                    var BasePoints = ProjectInfo.GetBasePointByGuid(BasePointGuid);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.round(System.Double)">
            <summary>
            Cast double to integer by Rounding away from zero.
            </summary>
            <param name="value">rounding double.</param>
            <returns>Rounded integer.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.DegreesMinutesSeconds(System.Double,System.Int32)">
            <summary>
            Converts angle value to compound plane angle: degree, minute and second.
            </summary>
            <param name="angle"> Lat or lon angle.</param>
            <param name="range"> Lat or lon range. ONE OF [90 || 180]</param>
            <returns>Tuple(bool, int, int, int), where bool is validity, item0 = degree, item1 = minute, item2 = second</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BasePoint"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.#ctor(System.Int32,System.Guid,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BasePoint"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="guid">The guid.</param>
            <param name="initialGuid">The initial guid.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="coordinateSystem">The coordinate system.</param>
            <param name="northSouth">The north-south.</param>
            <param name="eastWest">The east-west.</param>
            <param name="elevation">The elevation.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="locationInModelX">The location in model x.</param>
            <param name="locationInModelY">The location in model y.</param>
            <param name="locationInModelZ">The location in model z.</param>
            <param name="angleToNorth">The angle to north in radians.</param>
            <param name="isProjectBasePoint">Boolean indicating if this base point is the project base point.</param>
            <param name="isCurrentBasePoint">Boolean indicating if this base point is the current base point.</param>
        </member>
        <member name="T:Tekla.Structures.Model.BasePoint.CoordinateSystemType">
            <summary>
            The type of the base points coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BasePoint.CoordinateSystemType.GLOBAL">
            <summary>
            Coordinate system in global.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BasePoint.CoordinateSystemType.WORKPLANE">
            <summary>
            Coordinate system in work plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Guid">
            <summary>
            Gets or sets the guid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.InitialGuid">
            <summary>
            Gets or sets the initial guid. A metadata field to store for example some external
            applications base point guid. Not used in itself in any functionality.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.NorthSouth">
            <summary>
            Gets or sets the north-south.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.EastWest">
            <summary>
            Gets or sets the east-west.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.LocationInModelX">
            <summary>
            Gets or sets the location in model x.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.LocationInModelY">
            <summary>
            Gets or sets the location in model y.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.LocationInModelZ">
            <summary>
            Gets or sets the location in model z.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.AngleToNorth">
            <summary>
            Gets or sets the angle to north in radians.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.IsProjectBasePoint">
            <summary>
            Gets or sets the value indicating if this base point is the project base point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.IsCurrentBasePoint">
            <summary>
            Gets or sets the value indicating if this base point is the current base point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BasePoint.IsScopedCurrentBasePoint">
            <summary>
             Gets or sets the value indicating whether this base point is the scoped current base point.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.Insert">
            <summary>
            Inserts the base point into the model database.
            </summary>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.Modify">
            <summary>
            Modifies the base point in the model database.
            </summary>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.Delete">
            <summary>
            Deletes the base point from the model database.
            </summary>
            <returns>True on success, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.SetAsCurrent">
            <summary>
            Sets this base point as current base point point until the token is disposed of.
            Can be used for example when retrieving report values according to this base point.
            </summary>
            <code>
             using (basePoint.SetAsCurrent())
             {
                // Retrieve report values here, for example.
             }
            </code>
            <returns>
            The disposable token that removes this base points current base point status.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.GetCoordinateSystem(Tekla.Structures.Model.BasePoint.CoordinateSystemType)">
            <summary>
            Gets the coordinate system of the base point.
            </summary>
            <param name="CoordsysType">Optional: Type of the coordinate system.</param>
            <returns>The coordinate system of the base point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.GetCompoundPlaneAngleLatitude">
            <summary>
            Gets the Latitude as a compound plane angle.
            </summary>
            <returns>compound plane angle integers. The first param is true, if the value successfully calculated.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.GetCompoundPlaneAngleLongitude">
            <summary>
            Gets the Longitude as a compound plane angle.
            </summary>
            <returns>compound plane angle integers. The first param is true, if the value successfully calculated.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.ConvertToBasePoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Converts the given local point to this base point.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>On success, the converted value. Otherwise the original value.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.ConvertFromBasePoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Converts the given this base points point to local point.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>On success, the converted value. Otherwise the original value.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.ConvertToBasePoint(Tekla.Structures.Model.BasePoint,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Converts the given local point to given base point.
            </summary>
            <param name="basePoint">The base point, to which the point is converted to.</param>
            <param name="point">The point to be converted.</param>
            <returns>On success, the converted value. Otherwise the original value.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.ConvertFromBasePoint(Tekla.Structures.Model.BasePoint,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Converts the given base point point to local point.
            </summary>
            <param name="basePoint">The base point, from which the point is converted from.</param>
            <param name="point">The point to be converted.</param>
            <returns>On success, the converted value. Otherwise the original value.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.TransformToGlobal(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Return point in global coordinate system.
            </summary>
            <param name="point">Point to transform.</param>
            <returns>Return point in global coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.TransformToLocal(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Return point in local coordinate system.
            </summary>
            <param name="point">Point to transform.</param>
            <returns>Return point in local coordinate system.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.ToStruct">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.BasePoint.SetAsCurrentBasePoint(System.Boolean)">
            <summary>
            Sets this base point as current base point for temporary purposes, such as 
            getting report values etc.
            </summary>
            <param name="value">True if current, otherwise false.</param>
        </member>
        <member name="T:Tekla.Structures.Model.DisposableToken">
            <summary>
            <see cref="T:System.IDisposable" /> delegate adapter.
            </summary>
            <example>
            <code>
            <![CDATA[
            IDisposable InitiateOperation()
            {
                var token = Disposable.None;
                try
                {
                    token += new Disposable(() => FinalizeOnePart());
                    token += new Disposable(() => FinalizeOtherPart());
                    return token;
                }
                catch
                {
                    token.Dispose();
                    throw;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.DisposableToken.None">
            <summary>
            The default instance that does nothing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.DisposableToken.disposed">
            <summary>
            The delegate to a method that is invoked on dispose.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.DisposableToken.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.DisposableToken" /> class.
            </summary>
            <param name="disposed">The delegate to a method that is invoked on dispose.</param>
        </member>
        <member name="M:Tekla.Structures.Model.DisposableToken.op_Addition(Tekla.Structures.Model.DisposableToken,System.IDisposable)">
            <summary>
            Combines the two disposable objects.
            </summary>
            <param name="a">The left hand side operand.</param>
            <param name="b">The right hand side operand.</param>
            <returns>The combined disposable object.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.DisposableToken.Dispose">
            <summary>
            Invokes the callback.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Task">
            <summary>
            The Task class defines a single building site task. It may contain parts, assemblies or other tasks. Tasks may
            have a hierarchy between them i.e. there are other tasks as subtasks for a parent task. Tasks may also
            depend on each other, have resources assigned to them or have a single worktype.
            </summary>
            <example>
            The following example creates and inserts a task with two beams as objects into the model.
            The task has also a scenario:
            <code>
            using System.Collections.Generic;
            using System.Collections;
            using System;
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Point1 = new Point(0, 0, 0);
                       Point Point2 = new Point(1000, 0, 0);
                       Point Point3 = new Point(0, 1000, 0);
                       Point Point4 = new Point(1000, 1000, 0);
            
                       Beam Beam1 = new Beam(Point1, Point2);
                       Beam Beam2 = new Beam(Point3, Point4);
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Material.MaterialString = "S235JR";
                       Beam2.Profile.ProfileString = "HEA400";
                       Beam2.Finish = "PAINT";
                       Beam2.Material.MaterialString = "S235JR";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       // The Task
                       Task Task1 = new Task();
                       Task1.PlannedStartDate = DateTime.Now;
                       Task1.Name = "Test Task";
                       Task1.Critical = true;
                       Task1.Description = "Test task description";
                       Task1.Url = "http://test.task.url";
            
                       // Scenario
                       HierarchicDefinition ScenarioDefinition = new HierarchicDefinition();
                       ScenarioDefinition.Name = "Scenario type";
                       ScenarioDefinition.HierarchyType = HierarchicDefinitionTypeEnum.DOT_HIERARCHIC_TASK_SCENARIO;
                       ScenarioDefinition.Insert();
            
                       HierarchicObject Scenario = new HierarchicObject();
                       Scenario.Name = "Current scenario";
                       Scenario.Definition = ScenarioDefinition;
                       Scenario.Insert();
            
                       Task1.Scenario = Scenario;
            
                       ArrayList ModelObjects = new ArrayList();
                       ModelObjects.Add(Beam1);
                       ModelObjects.Add(Beam2);
                       Task1.AddObjectsToTask(ModelObjects);
            
                       Task1.Insert();
                   }
            }
            </code>
            </example>
            <seealso cref="T:Tekla.Structures.Model.TaskDependency"/>
            <seealso cref="T:Tekla.Structures.Model.TaskWorktype"/>
        </member>
        <member name="F:Tekla.Structures.Model.Task.SELECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Task.FunctionalityEnum">
            <summary>
            Enumeration about what to do on Tekla Structures side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Name">
            <summary>
            The name of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Completeness">
            <summary>
            The percentage of the completeness of the task on the scale from 0 to 100.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Critical">
            <summary>
            The criticality of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Local">
            <summary>
            The locality indicates if the task was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Scenario">
            <summary>
            The scenario which the task belongs to.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Description">
            <summary>
            A short textual description of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.Url">
            <summary>
            A link to material or data related to the task. The link can be a hyperlink or a file system link.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedStartDate">
            <summary>
            The planned start date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedEndDate">
            <summary>
            The planned end date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.PlannedWorkAmount">
            <summary>
            The amount of work planned to be used for the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualStartDate">
            <summary>
            The actual start date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualEndDate">
            <summary>
            The actual end date of the task.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Task.ActualWorkAmount">
            <summary>
            The amount of work already used for the task.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Task.#ctor">
            <summary>
            Creates a new task instance.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       bool Result = false;
                       Beam Beam1 = new Beam(new Point(0, 0, 0), new Point(1000, 0, 0));
                       Beam Beam2 = new Beam(new Point(0, 500, 0), new Point(1000, 500, 0));
                       Beam1.Name = "Default Beam 0000";
                       Beam2.Name = "Default Beam 0001";
                       Beam1.Insert();
                       Beam2.Insert();
                       Task Task1 = new Task();
                       Task1.Name = "Default Task 0000";
                       Task1.Insert();
                       ArrayList aChildren = new ArrayList();
                       aChildren.Add(Beam1);
                       aChildren.Add(Beam2);
                       Result = Task1.AddObjectsToTask(aChildren);
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Creates a task instance with a known identifier. Select the task after the creation.
            </summary>
            <param name="ID">The identifier of an existing task.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier Identifier1 = new Identifier(357);
            
                       bool Result = true;
                       Task Task1 = new Task(Identifier1);
                       Task1.Select();
                       ModelObjectEnumerator TaskChildren = Task1.GetChildren();
                       foreach (Task ChildTask in TaskChildren)
                       {
                           ChildTask.Name += " (modified)";
                           Result = ChildTask.Modify();
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Insert">
            <summary>
            Inserts the task instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Select">
            <summary>
            Selects the task instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Modify">
            <summary>
            Modifies the task instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.Delete">
            <summary>
            Deletes the task instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.AddObjectsToTask(System.Collections.ArrayList)">
            <summary>
            Adds objects to the task.
            </summary>
            <param name="ModelObjects">An array list of model objects to be added to the task.</param>
            <returns>True on success.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       // Add beam1 and beam2 into the task.
                       Task task = new Task();
                       Beam beam1 = new Beam();
                       Beam beam2 = new Beam();
            
                       if (task.Insert() &amp;&amp;
                           beam1.Insert() &amp;&amp;
                           beam2.Insert())
                       {
                           ArrayList objectsToAdd = new ArrayList();
                           objectsToAdd.Add(beam1);
                           objectsToAdd.Add(beam2);
            
                           task.AddObjectsToTask(objectsToAdd);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.RemoveObjectsFromTask(System.Collections.ArrayList)">
            <summary>
            Removes objects from the task.
            </summary>
            <param name="ModelObjects">An array list of model objects to be removed from the task.</param>
            <returns>True on success.</returns>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Identifier Identifier1 = new Identifier(357);
            
                       // Remove all the children from the task.
                       Task task = new Task(Identifier1);
            
                       if (task.Select())
                       {
                           ModelObjectEnumerator taskChildren = task.GetChildren();
                           ArrayList objectsToRemove = new ArrayList();
            
                           while (taskChildren.Current != null)
                           objectsToRemove.Add(taskChildren.Current);
            
                           task.RemoveObjectsFromTask(objectsToRemove);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetFathers">
            <summary>
            Returns an enumerator of all the task type fathers for the task object.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetDependencies">
            <summary>
            Returns an enumerator of all the task dependency objects where the task is involved.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.GetAllTasksOfSelectedObjects">
            <summary>
            Returns an enumerator of all the tasks related to the selected objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Task.DoAttachObjectsToTask(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Adds a list of objects to this task.
            </summary>
            <param name="ModelObjects">List of ModelObjects</param>
            <param name="Attach">True to attach, false to detach</param>
            <returns>Success</returns>
        </member>
        <member name="T:Tekla.Structures.Model.TaskDependency">
            <summary>
            The TaskDependency class represents a dependency between two task objects. Each task may depend
            on many other tasks, but between two specific tasks only one type of a dependency may exist.
            <para>
            There are four types of dependencies:
            <list type="bullet">
            <item>FINISH_TO_FINISH (FF)</item>
            <item>FINISH_TO_START (FS)</item>
            <item>START_TO_FINISH (SF)</item>
            <item>START_TO_START (SS)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Lag">
            <summary>
            The lag of the task dependency represented in whole hours.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Local">
            <summary>
            The locality indicates if the dependency was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Primary">
            <summary>
            The primary task of the task dependency.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.Secondary">
            <summary>
            The secondary task of the task dependency.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskDependency.DependencyType">
            <summary>
            The type of the task dependency.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum">
            <summary>
            The task dependency types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.FINISH_TO_FINISH">
            <summary>
            The task dependency type finish-to-finish.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.FINISH_TO_START">
            <summary>
            The task dependency type finish-to-start.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.START_TO_FINISH">
            <summary>
            The task dependency type start-to-finish.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskDependency.DependencyTypeEnum.START_TO_START">
            <summary>
            The task dependency type start-to-start.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.#ctor">
            <summary>
            Creates a new task dependency instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.#ctor(Tekla.Structures.Model.Task,Tekla.Structures.Model.Task)">
            <summary>
            Creates a new task dependency instance with the given primary and secondary tasks.
            </summary>
            <param name="primary">The primary task to be used.</param>
            <param name="secondary">The secondary task to be used.</param>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       bool Result = false;
                       Task Task1 = new Task();
                       Task Task2 = new Task();
                       Task1.Name = "Default Task 0000";
                       Task2.Name = "Default Task 0001";
                       Task1.Insert();
                       Task2.Insert();
                       TaskDependency TaskDependency1 = new TaskDependency(Task1, Task2);
                       TaskDependency1.DependencyType = TaskDependency.DependencyTypeEnum.START_TO_FINISH;
                       Result = TaskDependency1.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Insert">
            <summary>
            Inserts the task dependency instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Select">
            <summary>
            Selects the task dependency instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Modify">
            <summary>
            Modifies the task dependency instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskDependency.Delete">
            <summary>
            Deletes the task dependency instance from the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.TaskWorktype">
            <summary>
            The TaskWorktype class defines a single worktype for a task object. Each task may belong to only 
            one worktype.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.#ctor">
            <summary>
            Creates a new task worktype instance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.TaskWorktype._Name">
            <summary>
            The name of the task worktype.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.TaskWorktype.Name">
            <summary>
            The name of the task worktype.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Insert">
            <summary>
            Inserts the task worktype instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Select">
            <summary>
            Selects the task worktype instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Modify">
            <summary>
            Modifies the task worktype instance in the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.TaskWorktype.Delete">
            <summary>
            Deletes the task worktype instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarModifier">
            <summary>
            Represents a modifier that can modify the characteristics of <see cref="T:Tekla.Structures.Model.RebarSet"/> reinforcing bars that pass through it.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BaseRebarModifier"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum">
            <summary>
            This enum allows the caller to specify which end of the bar is of interest when calling the function GetAffectedBars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum.START">
            <summary>
            Gets bars that are affected at their start.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum.END">
            <summary>
            Gets bars that affected at their end.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum.EITHER">
            <summary>
            Gets all bars affected by the modifier.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum">
            <summary>
            The reinforcing bars affected.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum.ALL_BARS">
            <summary>
            All reinforcing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum.EVERY_SECOND_BAR">
            <summary>
            Every second reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum.EVERY_THIRD_BAR">
            <summary>
            Every third reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarModifier.BarsAffectedEnum.EVERY_FOURTH_BAR">
            <summary>
            Every fourth reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.Father">
            <summary>
            Gets or sets the <see cref="T:Tekla.Structures.Model.RebarSet"/> to which the modifier belongs.
            Only reinforcing bars generated by this <see cref="T:Tekla.Structures.Model.RebarSet"/> can be modified by this rebar modifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.Curve">
            <summary>
            Gets or sets the geometric <see cref="T:Tekla.Structures.Model.Contour"/> of the rebar modifier.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.BarsAffected">
            <summary>
            Gets or sets the reinforcing bars affected.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.FirstAffectedBar">
            <summary>
            Gets or sets the first affected bar.
            If set to zero, the first affected bar will be chosen automatically.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.FollowEdges">
            <summary>
            Gets or sets a flag that indicates whether the modifier should attempt to follow
            the leg face edges located between its end points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarModifier.OrderNumber">
            <summary>
            Gets or sets the order number of the rebar modifier that determines the order that rebar modifiers are applied to the <see cref="T:Tekla.Structures.Model.RebarSet"/>.
            (Made private because the functionality exists internally but is not currently to be exposed publicly).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.Insert">
            <summary>
            Inserts the rebar modifier into the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.Modify">
            <summary>
            Modifies the existing rebar modifier in the model database to match the current one.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.Delete">
            <summary>
            Deletes the rebar modifier from the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.Select">
            <summary>
            Selects the rebar modifier from the model database. The identifier must be set.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.SelectInstance">
            <summary>
            The select instance.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.ModifyInstance">
            <summary>
            The modify instance.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.CreateInstance">
            <summary>
            The create instance.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.ToStruct(Tekla.Structures.ModelInternal.dotRebarStrip_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarModifier.FromStruct(Tekla.Structures.ModelInternal.dotRebarStrip_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="T:Tekla.Structures.Model.NumberingSeriesNullable">
            <summary>
            The NumberingSeriesNullable class describes how an object is to be numbered.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeriesNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.NumberingSeriesNullable"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeriesNullable.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.NumberingSeriesNullable"/> class with the given arguments.
            </summary>
            <param name="prefix">The prefix to be used.</param>
            <param name="number">The start number to be used.</param>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeriesNullable.Prefix">
            <summary>
            Gets or sets the numbering prefix.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.NumberingSeriesNullable.StartNumber">
            <summary>
            Gets or sets the numbering start number.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeriesNullable.ToStruct(Tekla.Structures.ModelInternal.dotNumberingSeries_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Tekla.Structures.Model.NumberingSeriesNullable.FromStruct(Tekla.Structures.ModelInternal.dotNumberingSeries_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCranking">
            <summary>
            The RebarCranking class represents the cranking of reinforcing bars at a <see cref="T:Tekla.Structures.Model.RebarSplitter"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCranking.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarCranking"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCranking.CrankSideEnum">
            <summary>
            The crank side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankSideEnum.CRANK_LEFT">
            <summary>
            Crank left.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankSideEnum.CRANK_RIGHT">
            <summary>
            Crank right.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCranking.CrankedLengthTypeEnum">
            <summary>
            The cranked length type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankedLengthTypeEnum.DIAGONAL_RATIO">
            <summary>
            Diagonal ratio.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankedLengthTypeEnum.DIAGONAL_DISTANCE">
            <summary>
            Diagonal distance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankedLengthTypeEnum.HORIZONTAL_RATIO">
            <summary>
            Horizontal ratio.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankedLengthTypeEnum.HORIZONTAL_DISTANCE">
            <summary>
            Horizontal distance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCranking.CrankingTypeEnum">
            <summary>
            The cranking type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankingTypeEnum.CUSTOM_CRANKING">
            <summary>
            Custom cranking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCranking.CrankingTypeEnum.STANDARD_CRANKING">
            <summary>
            Standard cranking.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankSide">
            <summary>
            Gets or sets the crank side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankRotation">
            <summary>
            Gets or sets the crank rotation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankStraightLength">
            <summary>
            Gets or sets the crank straight length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankedLengthType">
            <summary>
            Gets or sets the cranked length type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankedRatio">
            <summary>
            Gets or sets the cranked ratio.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankedDistance">
            <summary>
            Gets or sets the cranked distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankedOffset">
            <summary>
            Gets or sets the cranked offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCranking.CrankingType">
            <summary>
            Gets or sets the cranking type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCranking.ToStruct(Tekla.Structures.ModelInternal.dotRebarCranking_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotCranking">The rebar cranking struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCranking.FromStruct(Tekla.Structures.ModelInternal.dotRebarCranking_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotCranking">The rebar cranking struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCrankingNullable">
            <summary>
            The RebarCrankingNullable class represents the cranking of reinforcing bars at a <see cref="T:Tekla.Structures.Model.RebarEndDetailModifier"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCrankingNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarCrankingNullable"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarCrankingNullable.EndCrankingTypeEnum">
            <summary>
            The end cranking type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCrankingNullable.EndCrankingTypeEnum.NO_CRANKING">
            <summary>
            No cranking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCrankingNullable.EndCrankingTypeEnum.CUSTOM_CRANKING">
            <summary>
            Custom cranking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarCrankingNullable.EndCrankingTypeEnum.STANDARD_CRANKING">
            <summary>
            Standard cranking.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankRotation">
            <summary>
            Gets or sets the crank rotation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankStraightLength">
            <summary>
            Gets or sets the crank straight length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankedLengthType">
            <summary>
            Gets or sets the cranked length type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankedRatio">
            <summary>
            Gets or sets the cranked ratio.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankedDistance">
            <summary>
            Gets or sets the cranked distance.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankedOffset">
            <summary>
            Gets or sets the cranked offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarCrankingNullable.CrankingType">
            <summary>
            Gets or sets the cranking type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCrankingNullable.ToStruct(Tekla.Structures.ModelInternal.dotRebarCranking_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotCranking">The rebar cranking struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarCrankingNullable.FromStruct(Tekla.Structures.ModelInternal.dotRebarCranking_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotCranking">The rebar cranking struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarEndDetailModifier">
             <summary>
             The RebarEndDetailModifier class represents a modifier that can modify the characteristics of <see cref="T:Tekla.Structures.Model.RebarSet"/> reinforcing bars that pass through it.
             It can modify reinforcing bar end properties and will therefore affect the end of the reinforcing bars it is nearest to.
             </summary>
             <example>
             The following example shows how to create and add a RebarEndDetailModifier, to a rebarset.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                         // Create and insert a rebarset (see the RebarSet example).
                         var rebarSet = new RebarSet();
            
                         // Create the RebarEndDetailModifier.
                         var strip = new RebarEndDetailModifier();
                         strip.Father = rebarSet;
                         strip.EndType = RebarEndDetailModifier.EndTypeEnum.HOOK;
                         strip.RebarHook.Shape = RebarHookData.RebarHookShapeEnum.HOOK_90_DEGREES;
                         strip.RebarThreading.ThreadingType = "ThreadingType1";
                         strip.RebarThreading.Length = 100;
                         strip.RebarThreading.ExtraFabricationLength = 50;
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(0, 200, 500), null));
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(0,1000, 500), null));
                         strip.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarEndDetailModifier"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarEndDetailModifier.EndTypeEnum">
            <summary>
            The end type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndTypeEnum.HOOK">
            <summary>
            Hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndTypeEnum.CRANKING">
            <summary>
            Cranking.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags">
            <summary>
            The end-detail modifier flags enum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.Shape">
            <summary>The shape flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.Angle">
            <summary>The angle flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.Radius">
            <summary>The radius flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.Length">
            <summary>The length flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.ThreadingType">
            <summary>The threading type.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.ThreadingLength">
            <summary>The threading length.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.ThreadingExtraFabLength">
            <summary>The threading extra fab length.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.Rotation">
            <summary>The rotation flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.LengthAdjustmentType">
            <summary>The length adjustment type flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.LengthAdjustmentLength">
            <summary>The length adjustment length flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.EndType">
            <summary>The end type flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankingType">
            <summary>The cranking type flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankRotation">
            <summary>The crank rotation flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankStraightLength">
            <summary>The crank straight length flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankedLengthType">
            <summary>The cranked length type flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankedRatio">
            <summary>The cranked ratio flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankedDistance">
            <summary>The cranked distance flag</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarEndDetailModifier.EndDetailModifierFlags.CrankedOffset">
            <summary>The cranked offset flag</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarEndDetailModifier.RebarHook">
            <summary>
            Gets or sets the reinforcing bar hook data.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarEndDetailModifier.RebarThreading">
            <summary>
            Gets or sets the reinforcing bar threading data.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarEndDetailModifier.RebarLengthAdjustment">
            <summary>
            Gets or sets the reinforcing bar length adjustment data.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarEndDetailModifier.RebarCranking">
            <summary>
            Gets or sets the rebar cranking.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarEndDetailModifier.EndType">
            <summary>
            Gets or sets the end type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.GetAffectedBars(Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum)">
            <summary>
            Gets the virtual bars affected by this modifier.
            </summary>
            <param name="whichEnd">A value indicating which end of the bars the modifier should affect.</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObjectEnumerator"/> containing the virtual rebars of the rebar set that are affected.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.CreateInstance">
            <summary>
            The create instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.ModifyInstance">
            <summary>
            The modify instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.SelectInstance">
            <summary>
            The select instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.ToStruct(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotStrip">The dotRebarEndDetailStrip_t struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarEndDetailModifier.FromStruct(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotStrip">The dotRebarEndDetailStrip_t struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGuideline">
            <summary>
            Defines a rebar guideline that is used in a <see cref="T:Tekla.Structures.Model.RebarSet"/>.
            A <see cref="T:Tekla.Structures.Model.RebarSet"/> has a minimum of one rebar guideline, the primary guideline.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGuideline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarGuideline"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGuideline.Id">
            <summary>
            Gets or sets an identifier that may be used to identify instances of the same rebar guideline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGuideline.Curve">
            <summary>
            Gets or sets the geometric <see cref="T:Tekla.Structures.Model.Contour"/> of the rebar guideline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGuideline.Spacing">
            <summary>
            Gets or sets the <see cref="T:Tekla.Structures.Model.RebarSpacing"/> along the rebar guideline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGuideline.FollowEdges">
            <summary>
            Gets or sets a flag that indicates whether the guideline should attempt to follow
            the leg face edges located between its end points.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarHookDataNullable">
            <summary>
            The RebarHookDataNullable class defines the hook at the end of a reinforcing bar. Hooks are used for anchoring purposes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarHookDataNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarHookDataNullable"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookDataNullable.Shape">
            <summary>
            Gets or sets the shape of the hook. The options are:
            <list type="bullet">
            <item><description>NO_HOOK. Sets the angle, radius and length to 0.</description></item>
            <item><description>HOOK_90_DEGREES.</description></item>
            <item><description>HOOK_135_DEGREES.</description></item>
            <item><description>HOOK_180_DEGREES.</description></item>
            <item><description>CUSTOM_HOOK. The angle, radius and length values have to be set manually.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookDataNullable.Angle">
            <summary>
            Gets or sets the angle of the hook. The value is between -270 to +270 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookDataNullable.Radius">
            <summary>
            Gets or sets the bending radius of the hook.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookDataNullable.Length">
            <summary>
            Gets or sets the length of the straight part of the hook.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookDataNullable.Rotation">
            <summary>
            Gets or sets the rotation of the hook.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarHookDataNullable.ToStruct(Tekla.Structures.ModelInternal.dotRebarHookData_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="p">The dotRebarHookData_t struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarHookDataNullable.FromStruct(Tekla.Structures.ModelInternal.dotRebarHookData_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="p">The dotRebarHookData_t struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLapping">
            <summary>
            The RebarLapping class represents the lapping of reinforcing bars at a <see cref="T:Tekla.Structures.Model.RebarSplitter"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarLapping"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLapping.LapSideEnum">
            <summary>
            The side of the split that the lap is located.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LapSideEnum.LAP_LEFT">
            <summary>
            Lap left.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LapSideEnum.LAP_RIGHT">
            <summary>
            Lap right.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LapSideEnum.LAP_MIDDLE">
            <summary>
            Lap middle.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLapping.LapPlacementEnum">
            <summary>
            The placement of the lap relative to the associated <see cref="T:Tekla.Structures.Model.RebarLegFace"/>.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LapPlacementEnum.ON_LEG_FACE">
            <summary>
            On leg face.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LapPlacementEnum.PERPENDICULAR_TO_LEG_FACE">
            <summary>
            Perpendicular to leg face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLapping.LappingTypeEnum">
            <summary>
            The lapping type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LappingTypeEnum.CUSTOM_LAPPING">
            <summary>
            Custom lapping.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLapping.LappingTypeEnum.STANDARD_LAPPING">
            <summary>
            Standard lapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLapping.LapLength">
            <summary>
            Gets or sets the lap length.
            Negative values will define a gap rather than a lap.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLapping.LapSide">
            <summary>
            Gets or sets the side of the split that the lap is located.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLapping.LapPlacement">
            <summary>
            Gets or sets the placement of the lap relative to the associated <see cref="T:Tekla.Structures.Model.RebarLegFace"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLapping.LappingType">
            <summary>
            Gets or sets the lapping type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLegFace">
            <summary>
            Defines a rebar leg face that is used in a <see cref="T:Tekla.Structures.Model.RebarSet"/>.
            Rebar leg faces control how the <see cref="T:Tekla.Structures.Model.RebarSet"/> generates the reinforcing bars.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLegFace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarLegFace"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLegFace.#ctor(Tekla.Structures.Model.Contour)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarLegFace"/> class using the specified <see cref="P:Tekla.Structures.Model.RebarLegFace.Contour"/>.
            </summary>
            <param name="contour">The primary contour.</param>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLegFace.Id">
            <summary>
            Gets or sets an identifier that may be used to identify instances of the same rebar leg face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLegFace.AdditonalOffset">
            <summary>
            Gets or sets the user defined offset of the rebars from the rebar leg face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLegFace.LayerOrderNumber">
            <summary>
            Gets or sets the layer order number of the rebar leg face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLegFace.Reversed">
            <summary>
            Gets or sets a value indicating whether the cover thickness is opposite to the coordinate system Z direction for the rebar leg face.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLegFace.Contour">
            <summary>
            Gets or sets the outer <see cref="P:Tekla.Structures.Model.RebarLegFace.Contour"/> of the rebar leg face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable">
            <summary>
            The RebarLengthAdjustmentDataNullable class defines the length adjustment at the end of a reinforcing bar affected by a <see cref="T:Tekla.Structures.Model.RebarEndDetailModifier"/>.
            If a length adjustment property is null then that property will not be applied to the <see cref="T:Tekla.Structures.Model.RebarSet"/> generated reinforcing bars.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.LengthAdjustmentTypeEnum">
            <summary>
            The length adjustment type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.LengthAdjustmentTypeEnum.NO_ADJUSTMENT">
            <summary>
            No adjustment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.LengthAdjustmentTypeEnum.END_OFFSET">
            <summary>
            End offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.LengthAdjustmentTypeEnum.LEG_LENGTH">
            <summary>
            Leg length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.AdjustmentType">
            <summary>
            Gets or sets the adjustment type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.AdjustmentLength">
            <summary>
            Gets or sets the adjustment length.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.ToStruct(Tekla.Structures.ModelInternal.dotRebarLengthAdjustment_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotLengthAdjustment">The rebar length adjustment struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLengthAdjustmentDataNullable.FromStruct(Tekla.Structures.ModelInternal.dotRebarLengthAdjustment_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotLengthAdjustment">The rebar length adjustment struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarProperties">
            <summary>
            The RebarProperties class defines the default properties of the reinforcing bars in a <see cref="T:Tekla.Structures.Model.RebarSet"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarProperties"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.Size">
            <summary>
            Gets or sets the size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.Grade">
            <summary>
            Gets or sets the steel grade of the reinforcing bar.
            The grade indicates the strength of the steel used in reinforcing bars.
            It can also indicate other factors, such as the weldability or surface deformations of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.Name">
            <summary>
            Gets or sets the name of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.Class">
            <summary>
            Gets or sets the class of the reinforcement. The class is used to group reinforcements.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.NumberingSeries">
            <summary>
            Gets or sets the numbering series of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.BendingRadius">
            <summary>
            Gets or sets the bending radius of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarProperties.Finish">
            <summary>
            Gets or sets the finish of the rebars.
            (Finish is currently internal because it is not yet fully implemented).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarProperties.ToStruct(Tekla.Structures.ModelInternal.dotRebarProperties_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarProperties.FromStruct(Tekla.Structures.ModelInternal.dotRebarProperties_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarPropertiesNullable">
            <summary>
            The RebarPropertiesNullable class defines the properties of the reinforcing bars affected by a <see cref="T:Tekla.Structures.Model.RebarPropertyModifier"/>.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertiesNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarPropertiesNullable"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.Size">
            <summary>
            Gets or sets the size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.Grade">
            <summary>
            Gets or sets the steel grade of the reinforcing bar.
            The grade indicates the strength of the steel used in reinforcing bars.
            It can also indicate other factors, such as the weldability or surface deformations of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.Name">
            <summary>
            Gets or sets the name of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.Class">
            <summary>
            Gets or sets the class of the reinforcement. The class is used to group reinforcements.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.NumberingSeries">
            <summary>
            Gets or sets the numbering series of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.BendingRadius">
            <summary>
            Gets or sets the bending radius radius of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertiesNullable.Finish">
            <summary>
            Gets or sets the finish of the rebars.
            (Finish is currently internal because it is not yet fully implemented).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertiesNullable.ToStruct(Tekla.Structures.ModelInternal.dotRebarProperties_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertiesNullable.FromStruct(Tekla.Structures.ModelInternal.dotRebarProperties_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarPropertyModifier">
             <summary>
             The RebarPropertyModifier class represents a modifier that can modify the characteristics of <see cref="T:Tekla.Structures.Model.RebarSet"/> reinforcing bars that pass through it.
             </summary>
             <example>
             The following example shows how to create and add a RebarPropertyModifier, to a rebarset.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                         // Create and insert a rebarset (see the RebarSet example).
                         var rebarSet = new RebarSet();
            
                         // Create the RebarPropertyModifier
                         var strip = new RebarPropertyModifier();
                         strip.Father = rebarSet;
                         strip.GroupingType = RebarPropertyModifier.GroupingTypeEnum.AUTOMATIC;
                         strip.RebarProperties.Name = "REBAR";
                         strip.RebarProperties.Class = 3;
                         strip.RebarProperties.Grade = "H";
                         strip.RebarProperties.Size = "12";
                         strip.RebarProperties.BendingRadius = 24;
                         strip.RebarProperties.NumberingSeries.StartNumber = 1;
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(200, 200, 0), null));
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(200, 1000, 0), null));
                         strip.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarPropertyModifier"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum">
            <summary>
            The grouping type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum.AUTOMATIC">
            <summary>
            Automatic.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum.MANUAL">
            <summary>
            Manual.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.GroupingTypeEnum.NO_GROUPING">
            <summary>
            No grouping.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags">
            <summary>
            The property modifier flags enum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Name">
            <summary>The name flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Class">
            <summary>The class flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Grade">
            <summary>The grade flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Size">
            <summary>The size flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.BendingRadius">
            <summary>The bending radius flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Finish">
            <summary>The finish flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.Prefix">
            <summary>The prefix flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.StartNumber">
            <summary>The start number flag.</summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarPropertyModifier.PropertyModifierFlags.GroupingType">
            <summary>The grouping type flag.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertyModifier.RebarProperties">
            <summary>
            Gets or sets the reinforcing bar properties.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarPropertyModifier.GroupingType">
            <summary>
            Gets or sets the grouping type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.GetAffectedBars">
            <summary>
            Gets the virtual bars affected by this modifier.
            </summary>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObjectEnumerator"/> containing the virtual rebars of the rebar set that are affected.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.CreateInstance">
            <summary>
            The create instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.ModifyInstance">
            <summary>
            The modify instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.SelectInstance">
            <summary>
            The select instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.ToStruct(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarPropertyModifier.FromStruct(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSet">
             <summary>
             The RebarSet class represents a set of reinforcing bars.
             </summary>
             <example>
             The following example shows how to create a rebarset.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                         // Create rebarset
                         var rebarSet = new RebarSet();
                         rebarSet.RebarProperties.Name = "RebarSet Test";
                         rebarSet.RebarProperties.Grade = "The Grade";
                         rebarSet.RebarProperties.BendingRadius = 42.0;
                         rebarSet.RebarProperties.Class = 7;
                         rebarSet.RebarProperties.Size = "16";
                         rebarSet.LayerOrderNumber = 17;
                         
                         // Create leg face 1
                         var legFace1 = new RebarLegFace
                         {
                             LayerOrderNumber = 2,
                             AdditonalOffset = 25.0,
                             Reversed = false
                          };
                          
                         legFace1.Contour.AddContourPoint(new ContourPoint(new Point(0, 0, 0), null));
                         legFace1.Contour.AddContourPoint(new ContourPoint(new Point(800, 0, 0), null));
                         legFace1.Contour.AddContourPoint(new ContourPoint(new Point(800, 1200, 0), null));
                         legFace1.Contour.AddContourPoint(new ContourPoint(new Point(0, 1200, 0), null));
                         
                         // Add leg face 1
                         rebarSet.LegFaces.Add(legFace1);
             
                         // Create leg face 2
                         var legFace2 = new RebarLegFace
                         {
                             LayerOrderNumber = 2,
                             AdditonalOffset = 25.0,
                             Reversed = false
                         };
            
                         legFace2.Contour.AddContourPoint(new ContourPoint(new Point(0, 0, 0), null));
                         legFace2.Contour.AddContourPoint(new ContourPoint(new Point(0, 0, 500), null));
                         legFace2.Contour.AddContourPoint(new ContourPoint(new Point(0, 1200, 500), null));
                         legFace2.Contour.AddContourPoint(new ContourPoint(new Point(0, 1200, 0), null));
                         
                         //  Add leg face 2
                         rebarSet.LegFaces.Add(legFace2);
             
                         // Create the guideline
                         var guideline = new RebarGuideline();
                         guideline.Spacing.Zones.Add(new RebarSpacingZone
                                                  {
                                                     Spacing = 200, SpacingType = RebarSpacingZone.SpacingEnum.EXACT,
                                                     Length = 1000, LengthType = RebarSpacingZone.LengthEnum.RELATIVE,
                                                     NumberOfSpaces = 10,
                                                     NumberOfSpacesType = RebarSpacingZone.SpacingEnum.TARGET
                                                  });
                                                  
                         guideline.Curve.AddContourPoint(new ContourPoint(new Point(0.0, 0.0, 0.0), null));            
                         guideline.Curve.AddContourPoint(new ContourPoint(new Point(0.0, 1200, 0.0), null));
             
                         rebarSet.Guidelines.Add(guideline);
                         rebarSet.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSet.MaxLegFaces">
            <summary>
            The max leg faces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSet.MaxGuidelines">
            <summary>
            The max guidelines.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarSet"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSet.RebarProperties">
            <summary>
            Gets or sets the reinforcing bar properties for the rebar set.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSet.LegFaces">
            <summary>
            Gets or sets the rebar set's leg faces.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSet.Guidelines">
            <summary>
            Gets or sets the rebar set's guidelines.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSet.LayerOrderNumber">
            <summary>
            Gets or sets the layer order number.
            If set to 0 this means use the creation date/time of the rebar set object to determine the layering.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.Insert">
            <summary>
            Inserts the rebar set into the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.Modify">
            <summary>
            Modifies the rebar set in the model database to match the current one.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.Delete">
            <summary>
            Deletes the rebar set instance with the given identifier from the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.Select">
            <summary>
            Selects the rebar set from the model database. The rebar set identifier must be set.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.GetRebarSetAdditions">
            <summary>
            Returns an enumerator of all child <see cref="T:Tekla.Structures.Model.RebarSetAddition"/> objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.GetRebarModifiers">
            <summary>
            Returns an enumerator of all child <see cref="T:Tekla.Structures.Model.BaseRebarModifier"/> objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.GetRebarLegSurfaces">
            <summary>
            Returns an enumerator of all child <see cref="T:Tekla.Structures.ModelInternal.RebarLegSurfaceObject"/> objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.GetReinforcements">
            <summary>
            Returns an enumerator of all the connected <see cref="T:Tekla.Structures.Model.SingleRebar"/> objects.
            </summary>
            <returns>A model object enumerator on success, otherwise null.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSet.Clear">
            <summary>
            Remove all the child objects.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSetAddition">
             <summary>
             The RebarSetAddition class can be used to add <see cref="T:Tekla.Structures.Model.RebarLegFace"/> objects to an existing <see cref="T:Tekla.Structures.Model.RebarSet"/>.
             </summary>
             <example>
             The following example shows how to create and add a RebarSetAddition, to a rebarset.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                         // Create and insert a rebarset (see the RebarSet example).
                         var rebarSet = new RebarSet();
            
                         // Create the RebarSetAddition
                         var rebarSetAddition = new RebarSetAddition();
                         
                         // Create an additional leg face
                         var additionalLegFace = new RebarLegFace
                         {
                             LayerOrderNumber = 2,
                             AdditonalOffset = 25.0,
                             Reversed = false
                          };
            
                         additionalLegFace.Contour.AddContourPoint(new ContourPoint(new Point(800, 0, 0), null));
                         additionalLegFace.Contour.AddContourPoint(new ContourPoint(new Point(800, 0, 500), null));
                         additionalLegFace.Contour.AddContourPoint(new ContourPoint(new Point(800, 1200,500), null));
                         additionalLegFace.Contour.AddContourPoint(new ContourPoint(new Point(800, 1200, 0), null));
             
                         // Insert the additional leg face
                         rebarSetAddition.LegFaces.Add(additionalLegFace);
             
                         rebarSetAddition.Father = rebarSet;
                         rebarSetAddition.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSetAddition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarSetAddition"/> class with empty attributes.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSetAddition.LegFaces">
            <summary>
            Gets or sets the rebar set addition's <see cref="T:Tekla.Structures.Model.RebarLegFace"/> objects.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSetAddition.Father">
            <summary>
            Gets or sets the <see cref="T:Tekla.Structures.Model.RebarSet"/> to which the rebar set addition applies.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSetAddition.Insert">
            <summary>
            Inserts the rebar set addition into the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSetAddition.Modify">
            <summary>
            Modifies the rebar set addition in the model database to match the current one.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSetAddition.Delete">
            <summary>
            Deletes the rebar set addition with the given identifier from the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSetAddition.Select">
            <summary>
            Selects the rebar set addition from the model database. The rebar set addition identifier must be set.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSpacing">
            <summary>
            The RebarSpacing class defines spacing properties for a <see cref="T:Tekla.Structures.Model.RebarGuideline"/>.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.MaxRebarSpacingZones">
            <summary>
            The maximum rebar spacing zones.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.startOffSet">
            <summary>
            The start offset
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.endOffSet">
            <summary>
            The end offset
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.startOffsetType">
            <summary>
            The startOffsetType
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.endOffsetType">
            <summary>
            The endOffsetType
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.startOffsetIsAutomatic">
            <summary>
            The startOffsetIsAutomatic
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.endOffsetIsAutomatic">
            <summary>
            The endOffsetIsAutomatic
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarSpacing"/> class. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSpacing.OffsetEnum">
            <summary>
            The offset distance type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.OffsetEnum.EXACT">
            <summary>
            The offset distance is exact.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacing.OffsetEnum.MINIMUM">
            <summary>
            The offset distance is the minimum required.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.Zones">
            <summary>
            Gets or sets the spacing zones.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.StartOffset">
            <summary>
            Gets or sets the proposed offset to the first reinforcing bar from the start of the <see cref="T:Tekla.Structures.Model.RebarGuideline"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.EndOffset">
            <summary>
            Gets or sets the proposed offset to the last reinforcing bar from the end of the <see cref="T:Tekla.Structures.Model.RebarGuideline"/>.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.StartOffsetType">
            <summary>
            Gets or sets a value indicating whether the start offset is exact or minimum.
            If the start offset is minimum the spacing algorithm may determine a larger offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.EndOffsetType">
            <summary>
            Gets or sets a value indicating whether the end offset is exact or minimum.
            If the end offset is minimum the spacing algorithm may determine a larger offset.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.StartOffsetIsAutomatic">
            <summary>
            Gets or sets a value indicating whether the start offset is automatic.
            When automatic the proposed start offset is calculated to be the concrete cover thickness plus half the reinforcing bar diameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.EndOffsetIsAutomatic">
            <summary>
            Gets or sets a value indicating whether the end offset is automatic.
            When automatic the proposed end offset is calculated to be the concrete cover thickness plus half the reinforcing bar diameter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacing.InheritFromPrimary">
            <summary>
            Gets or sets a value indicating whether the secondary guideline inherits all its spacing properties from the 
            primary guideline.
            This property is not applicable to a primary guideline.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacing.ToStructs(Tekla.Structures.ModelInternal.dotRebarSpacing_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t})">
            <summary>
            The to structs method.
            </summary>
            <param name="dotSpacing">The dot rebar spacing struct.</param>
            <param name="spacingZoneData">The dot zones.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacing.FromStructs(Tekla.Structures.ModelInternal.dotRebarSpacing_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t})">
            <summary>
            The from structs method.
            </summary>
            <param name="dotSpacing">The dot rebar spacing struct.</param>
            <param name="spacingZoneData">The dot zones.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSpacingZone">
            <summary>
            The RebarSpacingZone class defines the properties of a single spacing zone.
            The spacing properties of number of spaces, spacing and length are proposed properties that the spacing algorithm uses as input when calculating the
            final reinforcing bars spacing.
            Depending on the RebarSpacingZone properties and any other rebar spacing zones defined on the associated <see cref="T:Tekla.Structures.Model.RebarGuideline"/> the spacing algorithm may
            determine a different final reinforcing bars spacing from the original proposed properties. However the RebarSpacingZone properties will always contain the
            original proposed values.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacingZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarSpacingZone"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSpacingZone.LengthEnum">
            <summary>
            The length type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacingZone.LengthEnum.ABSOLUTE">
            <summary>
            The length is an absolute value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacingZone.LengthEnum.RELATIVE">
            <summary>
            The length is a relative value.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSpacingZone.SpacingEnum">
            <summary>
            The spacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacingZone.SpacingEnum.EXACT">
            <summary>
            The spacing is exact.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSpacingZone.SpacingEnum.TARGET">
            <summary>
            The spacing is a target value.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.NumberOfSpaces">
            <summary>
            Gets or sets the proposed number of spaces in the spacing zone.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.Spacing">
            <summary>
            Gets or sets the proposed spacing (the space between each reinforcing bar centerline) in the spacing zone.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.Length">
            <summary>
            Gets or sets the proposed overall spacing zone length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.NumberOfSpacesType">
            <summary>
            Gets or sets a value indicating whether the number of spaces is exact or target.
            If the number of spaces is target the spacing algorithm may determine a different number of spaces to use.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.SpacingType">
            <summary>
            Gets or sets a value indicating whether the spacing is exact or target.
            If the spacing is target the spacing algorithm may determine a different spacing to use.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSpacingZone.LengthType">
            <summary>
            Gets or sets a value indicating whether the length is absolute or relative.
            If the length is relative the length property is treated as a proportion of the overall available spacing length (from the associated <see cref="T:Tekla.Structures.Model.RebarGuideline"/>).
            The available spacing length is the guideline length less the calculated start and end offsets and less any fixed length spacing zones.
            An example of how relative length values are handled:
            With two relative length zones with proposed length values of 10 and 20 respectively the final calculated lengths will normally be
            'available spacing length'*10/(10+20) and 'available spacing length'*20/(10+20) though the spacing algorithm may determine a different result in some situations.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacingZone.ToStruct(Tekla.Structures.ModelInternal.dotSpacingZone_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotZone">The dot spacing zone struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSpacingZone.FromStruct(Tekla.Structures.ModelInternal.dotSpacingZone_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotZone">The dot spacing zone struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplitter">
             <summary>
             The RebarSplitter class represents a modifier that can split the <see cref="T:Tekla.Structures.Model.RebarSet"/> reinforcing bars that pass through it.
             </summary>
             <example>
             The following example shows how to create and add a RebarSplitter, to a rebarset.
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
                    public void Example1()
                    {
                         // Create and insert a rebarset (see the RebarSet example).
                         var rebarSet = new RebarSet();
            
                         // Create the RebarSplitter
                         var strip = new RebarSplitter();
                         strip.Father = rebarSet;
                         strip.SplitType = RebarSplitter.SplitTypeEnum.LAPPING;
                         strip.Lapping.LappingType = RebarLapping.LappingTypeEnum.CUSTOM_LAPPING;
                         strip.Lapping.LapLength = 100;
                         strip.StaggerType = RebarSplitter.StaggerTypeEnum.STAGGER_LEFT;
                         strip.StaggerOffset = 200;
                         strip.SplitOffset = 50;
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(400, 200, 0), null));
                         strip.Curve.AddContourPoint(new ContourPoint(new Point(400, 1000, 0), null));
                         strip.Insert();
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarSplitter"/> class.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum">
            <summary>
            The side of the split that the additional offset (stagger) is located.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum.NO_STAGGER">
            <summary>
            No stagger.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum.STAGGER_LEFT">
            <summary>
            Stagger left.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum.STAGGER_RIGHT">
            <summary>
            Stagger right.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.StaggerTypeEnum.STAGGER_MIDDLE">
            <summary>
            Stagger middle.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplitter.SplitTypeEnum">
            <summary>
            The split type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.SplitTypeEnum.LAPPING">
            <summary>
            Lapping.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplitter.SplitTypeEnum.CRANKING">
            <summary>
            Cranking.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.StaggerType">
            <summary>
            Gets or sets the stagger type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.StaggerOffset">
            <summary>
            Gets or sets the additional offset (stagger) of the split location for every other split reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.SplitOffset">
            <summary>
            Gets or sets the offset of the split from the location of the rebar splitter.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.SplitType">
            <summary>
            Gets or sets the split type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.Lapping">
            <summary>
            Gets or sets the rebar lapping.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplitter.Cranking">
            <summary>
            Gets or sets the rebar cranking.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.GetAffectedBars(Tekla.Structures.Model.BaseRebarModifier.AffectedRebarEnum)">
            <summary>
            Gets the virtual bars affected by this splitter.
            </summary>
            <param name="whichEnd">A value indicating which end of the bars the splitter should affect.</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObjectEnumerator"/> containing the virtual rebars of the rebar set that are affected.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.CreateInstance">
            <summary>
            The create instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.ModifyInstance">
            <summary>
            The modify instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.SelectInstance">
            <summary>
            The select instance.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.ToStruct(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            The to struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplitter.FromStruct(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            The from struct.
            </summary>
            <param name="dotStrip">The dot strip.</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarThreadingDataNullable">
            <summary>
            The RebarThreadingDataNullable class defines the threading properties at the end of a reinforcing bar affected by a <see cref="T:Tekla.Structures.Model.RebarEndDetailModifier"/>.
            If a threading property is null then that property will not be applied to the <see cref="T:Tekla.Structures.Model.RebarSet"/> generated reinforcing bars.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarThreadingDataNullable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarThreadingDataNullable"/> class. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarThreadingDataNullable.ThreadingType">
            <summary>
            Gets or sets the threading type.
            Null indicates that the threading type is not specified.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarThreadingDataNullable.Length">
            <summary>
            Gets or sets the threading length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarThreadingDataNullable.ExtraFabricationLength">
            <summary>
            Gets or sets the extra fabrication length.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarThreadingDataNullable.ToStruct(Tekla.Structures.ModelInternal.dotRebarThreading_t@)">
            <summary>
            The to struct method.
            </summary>
            <param name="dotThread">The dot rebar threading struct.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarThreadingDataNullable.FromStruct(Tekla.Structures.ModelInternal.dotRebarThreading_t@)">
            <summary>
            The from struct method.
            </summary>
            <param name="dotThread">The dot rebar threading struct.</param>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup">
            <summary>
            The BaseRebarGroup class is an abstract base class that represents reinforcing bar group classes. 
            The reinforcing bar groups derived from the base group are the rebar group, the circled rebar group 
            and the curved rebar group.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum">
            <summary>
            The different ways to exclude reinforcing bars from the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE">
            <summary>
            All the reinforcing bars are included.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_FIRST">
            <summary>
            The first reinforcing bar is not to be created to the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_LAST">
            <summary>
            The last reinforcing bar is not to be created to the group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH">
            <summary>
            The first and last reinforcing bars are not to be created to the group.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum">
            <summary>
            The different stirrup types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.GROUP">
            <summary>
            The group subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.CURVED">
            <summary>
            The curved subtype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupTypeEnum.CIRCLE">
            <summary>
            The circle subtype.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum">
            <summary>
            The ways to distribute the reinforcing bars with different spacings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_UNDEFINED">
            <summary>
            The undefined spacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS">
            <summary>
            The bars are distributed using the spacing values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_NUMBER">
            <summary>
            Equal distribution by the number of reinforcing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE">
            <summary>
            Equal distribution by the target spacing value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_START">
            <summary>
            Distribution by the exact spacing value with a flexible first space.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_END">
            <summary>
            Distribution by the exact spacing value with a flexible last space.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH">
            <summary>
            Distribution by the exact spacing value with flexible first and last spaces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE">
            <summary>
            Distribution by the exact spacing value with a flexible middle space.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.FromPlaneOffset">
            <summary>
            The offset value from the part surface applied in both sides.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.ExcludeType">
            <summary>
            Defines which bars to omit from the group. The options are:
            <list type="bullet">
            <item><description>EXCLUDE_TYPE_NONE</description></item>
            <item><description>EXCLUDE_TYPE_FIRST</description></item>
            <item><description>EXCLUDE_TYPE_LAST</description></item>
            <item><description>EXCLUDE_TYPE_BOTH</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Polygons">
            <summary>
            An array list of polygons for the reinforcing bar group. Each polygon must have an equal number of points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.SpacingType">
            <summary>
            The type of spacing. The options are (BaseRebarGroup.RebarGroupSpacingTypeEnum.):
            <list type="bullet">
            <item><description>SPACING_TYPE_UNDEFINED</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACINGS</description></item>
            <item><description>SPACING_TYPE_EXACT_NUMBER</description></item>
            <item><description>SPACING_TYPE_TARGET_SPACE</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_START</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_END</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_BOTH</description></item>
            <item><description>SPACING_TYPE_EXACT_SPACE_FLEX_AT_MIDDLE</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.Spacings">
            <summary>
            The spacing value(s).
            If the type of the spacing is SPACING_TYPE_EXACT_NUMBER
            Spacings has only one value that defines the number of the reinforcing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseRebarGroup._Type">
            <summary>
            The subtype of group(group, curved, cicle).
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.StartPoint">
            <summary>
            The start point of the direction in which the bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.BaseRebarGroup.EndPoint">
            <summary>
            The end point of the direction in which the bars are distributed.
            </summary> 
        </member>
        <member name="M:Tekla.Structures.Model.BaseRebarGroup.#ctor">
            <summary>
            Initializes a new base rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CircleRebarGroup">
            <summary>
            The CircleRebarGroup class represents a group of reinforcing bars which have a circular shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       CircleRebarGroup CircleRebarGroup = new CircleRebarGroup();
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       CircleRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       CircleRebarGroup.StartPoint = new Point(MinimumX, MaximumY, MinimumZ);
                       CircleRebarGroup.EndPoint = new Point(MaximumX, MaximumY, MinimumZ);
                       CircleRebarGroup.Father = Beam;
                       CircleRebarGroup.RadiusValues.Add(40.0);
                       CircleRebarGroup.SpacingType = BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS;
                       CircleRebarGroup.Spacings.Add(300);
                       CircleRebarGroup.ExcludeType = BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE;
                       CircleRebarGroup.Name = "RebarGroup";
                       CircleRebarGroup.Class = 3;
                       CircleRebarGroup.Size = "10";
                       CircleRebarGroup.NumberingSeries.StartNumber = 0;
                       CircleRebarGroup.NumberingSeries.Prefix = "Group";
                       CircleRebarGroup.Grade = "A500HW";
                       CircleRebarGroup.StirrupType = CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_CIRCLE;
                       CircleRebarGroup.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.CircleRebarGroup.Polygon">
            <summary>
            A polygon definition for the circle reinforcing bar group shape. The polygon must have 3 points.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum">
            <summary> The different stirrup types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_CIRCLE">
            <summary> The circle type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.CircleRebarGroup.CircleRebarGroupStirrupTypeEnum.STIRRUP_TYPE_SPIRAL">
            <summary> The spiral type of stirrup. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.CircleRebarGroup.StirrupType">
            <summary>
            The type of the stirrup.
            The options are:
            <list type="bullet">
            <item><description>STIRRUP_TYPE_CIRCLE</description></item>
            <item><description>STIRRUP_TYPE_SPIRAL</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.#ctor">
            <summary>
            Initializes a new circle rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Insert">
            <summary>
            Inserts the circle rebar group into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Select">
            <summary>
            Selects a circle rebar group from the model database. The identifier of the circle rebar group must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Modify">
            <summary>
            Modifies the existing circle rebar group in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CircleRebarGroup.Delete">
            <summary>
            Deletes the circle rebar group instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.CurvedRebarGroup">
            <summary>
            The CurvedRebarGroup class represents a group of reinforcing bars which have a curved shape.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "D500";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       CurvedRebarGroup CurvedRebarGroup = new CurvedRebarGroup();
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       CurvedRebarGroup.Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       CurvedRebarGroup.StartPoint = new Point(MinimumX, MaximumY, MinimumZ);
                       CurvedRebarGroup.EndPoint = new Point(MaximumX, MaximumY, MinimumZ);
                       CurvedRebarGroup.Father = Beam;
                       CurvedRebarGroup.RadiusValues.Add(40.0);
                       CurvedRebarGroup.SpacingType = BaseRebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_EXACT_SPACINGS;
                       CurvedRebarGroup.Spacings.Add(30); //if you use: RebarGroup.Spacings.Add(30.0); ->then it works
                       CurvedRebarGroup.ExcludeType = BaseRebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_NONE;
                       CurvedRebarGroup.Name = "RebarGroup";
                       CurvedRebarGroup.Class = 3;
                       CurvedRebarGroup.Size = "8";
                       CurvedRebarGroup.NumberingSeries.StartNumber = 0;
                       CurvedRebarGroup.NumberingSeries.Prefix = "Group";
                       CurvedRebarGroup.Grade = "A500HW";
                       CurvedRebarGroup.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.CurvedRebarGroup.Polygon">
            <summary>
            A polygon definition for the curved reinforcing bar group shape. The polygon must have 3 points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.#ctor">
            <summary>
            Initializes a new curved rebar group instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Insert">
            <summary>
            Inserts the curved rebar group into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Select">
            <summary>
            Selects a curved rebar group from the model database. The identifier of the curved rebar group must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Modify">
            <summary>
            Modifies the existing curved rebar group in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.CurvedRebarGroup.Delete">
            <summary>
            Deletes the curved rebar group instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.RebarComplexGeometry">
            <summary>
            The ReinforcingBar class represents a single physical reinforcing bar. It contains the curves
            and bendings that define the geometry of the bar.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    var rebarGroup = new RebarGroup();
                    var barGeometries = rebarGroup.GetRebarComplexGeometries(true, true, true);
                    foreach (RebarComplexGeometry barGeom in barGeometries)
                    {
                        Console.WriteLine("Bar has the following curves:");
                        foreach (var leg in barGeom.Legs)
                        {
                            if (leg.Curve is LineSegment)
                            {
                                Console.Write("Line ");
                            }
                            else if (leg.Curve is Arc)
                            {
                                Console.Write("Arc ");
                            }
                        }
                        Console.WriteLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.RebarComplexGeometry.#ctor">
            <summary>
            The constructor for RebarGeometry. The class requires index which 
            indicates the position in the rebar group. Index starts with 1.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarComplexGeometry.Legs">
            <summary>
            Gets the list of <see cref="T:Tekla.Structures.Model.RebarLeg"/>s of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarComplexGeometry.Diameter">
            <summary>
            Gets the diameter of the wire.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarComplexGeometry.BendingRadiuses">
            <summary>
            The bending radiuses of the wire.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarComplexGeometry.FromData(System.Double[],System.Int32[],System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t},System.Int32@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGeometry">
            <summary>
            The RebarGeometry class represents a single physical reinforcing bar - the building block of 
            a mesh, a rebar group and even a single rebar.
            It contains the physical reinforcing bar points in 3D space.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       RebarGroup Group = new RebarGroup();
                       ArrayList RebarGeoms = Group.GetRebarGeometries(true);
                       foreach (RebarGeometry Rebar in RebarGeoms)
                       {
                           if (Rebar != null)
                           {
                               Console.WriteLine("Wire {0} has the following points:");
                               foreach (Point p in Rebar.Shape.Points)
                               {
                                   Console.WriteLine("[{0},{1},{2}]", p.X, p.Y, p.Z);
                               }
                           }
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGeometry.WIRE_TRANSFER_STACK_SIZE">
            <summary> Constant indicating the number of rebar geometries transferred at once from Tekla Structures. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGeometry.MAX_REBAR_POSITION_POINTS">
            <summary> Constant indicating the maximum number of position points for a wire. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.Shape">
            <summary>The physical points of the reinforcing bar.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.Diameter">
            <summary>The diameter of the wire.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGeometry.BendingRadiuses">
            <summary>The bending radiuses of the wire.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.#ctor">
            <summary>
            The constructor for RebarGeometry. The class requires index which 
            indicates the position in the rebar group. Index starts with 1.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.FromLists(Tekla.Structures.ModelInternal.PointList,Tekla.Structures.ModelInternal.DoubleList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal method for transforming struct received over .NET interface into RebarGeometry class.
            </summary>
            <param name="pointList">All the points in for all polygons in the object.</param>
            <param name="diameterAndRadiiList">An array containing all the bar diameters and the bending radii for all polygons.</param>
            <param name="polygonIndex">The index of the polygon.</param>
            <param name="pointIndex">The index of the first point.</param>
            <param name="numberPoints">The number of points in this polygon.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGeometry.FromStruct(Tekla.Structures.ModelInternal.dotWire_t,System.Int32,System.Int32)">
            <summary>
            Internal method for transforming struct received over .NET interface into RebarGeometry class.
            </summary>
            <param name="dotWire">The struct from which rebar data is copied.</param>
            <param name="polygonIndex">The index of the polygon.</param>
            <param name="pointIndex">The index of the first point</param>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGroup">
            <summary>
            The RebarGroup class represents a group of reinforcing bars.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 8000, 0), new Point(6000, 8000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
            
                       Polygon Polygon2 = new Polygon();
                       Polygon2.Points.Add(new Point(MaximumX, MaximumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MinimumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MinimumY, MaximumZ));
                       Polygon2.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       RebarGroup RebarGroup = new RebarGroup();
                       RebarGroup.Polygons.Add(Polygon);
                       RebarGroup.Polygons.Add(Polygon2);
                       RebarGroup.RadiusValues.Add(40.0);
                       RebarGroup.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup.Spacings.Add(30.0);
                       RebarGroup.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup.Father = Beam;
                       RebarGroup.Name = "RebarGroup";
                       RebarGroup.Class = 3;
                       RebarGroup.Size = "12";
                       RebarGroup.NumberingSeries.StartNumber = 0;
                       RebarGroup.NumberingSeries.Prefix = "Group";
                       RebarGroup.Grade = "A500HW";
                       RebarGroup.StartHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
                       RebarGroup.StartHook.Angle = -90;
                       RebarGroup.StartHook.Length = 3;
                       RebarGroup.StartHook.Radius = 20;
                       RebarGroup.EndHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
                       RebarGroup.EndHook.Angle = -90;
                       RebarGroup.EndHook.Length = 3;
                       RebarGroup.EndHook.Radius = 20;
                       RebarGroup.OnPlaneOffsets.Add(25.0);
                       RebarGroup.OnPlaneOffsets.Add(10.0);
                       RebarGroup.OnPlaneOffsets.Add(25.0);
                       RebarGroup.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup.StartPointOffsetValue = 20;
                       RebarGroup.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup.EndPointOffsetValue = 60;
                       RebarGroup.FromPlaneOffset = 40;
            
                       RebarGroup.Insert();
            
                       RebarGroup.Name = "Modified Group 1";
                       RebarGroup.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGroup.Polygons">
            <summary>
            An array list of polygons to define the reinforcing bar group shape. 
            Use 1 polygon when defining non-tapered or spiral rebar groups. 
            Use 2 to 99 polygons when defining tapered rebar groups.
            Each polygon must have an equal number of points. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum">
            <summary> The different stirrup types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_POLYGONAL">
            <summary> The polygonal type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_SPIRAL">
            <summary> The spiral type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarGroup.RebarGroupStirrupTypeEnum.STIRRUP_TYPE_TAPERED_CURVED">
            <summary> The tapered curved type of stirrup. Three polygons have to be defined. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarGroup.StirrupType">
            <summary>
            The type of the stirrup.
            The options are:
            <list type="bullet">
            <item><description>STIRRUP_TYPE_POLYGONAL</description></item>
            <item><description>STIRRUP_TYPE_SPIRAL</description></item>
            <item><description>STIRRUP_TYPE_TAPERED_CURVED</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.#ctor">
            <summary> Initializes a new rebar group instance with empty attributes. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Insert">
            <summary> Inserts the rebar group into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Select">
            <summary> Selects a rebar group from the model database. The reinforcement identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Modify">
            <summary>
            Modifies the existing rebar group in the model database to match the current one. 
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarGroup.Delete">
            <summary> Deletes the rebar group instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.RebarHookData">
            <summary>
            The RebarHookData class defines the hook at the end of a reinforcing bar.
            Hooks are used for anchoring purposes.  
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum">
            <summary>
            The different hook shapes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.NO_HOOK">
            <summary>
            No hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_90_DEGREES">
            <summary>
            The standard 90-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_135_DEGREES">
            <summary>
            The standard 135-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.HOOK_180_DEGREES">
            <summary>
            The standard 180-degree hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK">
            <summary>
            The custom hook shape to manually define the angle, radius and length of a hook.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Shape">
            <summary>
            Defines the shape of the hook. The options are:
            <list type="bullet">
            <item><description>NO_HOOK. Sets the angle, radius and length to 0.</description></item>
            <item><description>HOOK_90_DEGREES.</description></item>
            <item><description>HOOK_135_DEGREES.</description></item>
            <item><description>HOOK_180_DEGREES.</description></item>
            <item><description>CUSTOM_HOOK. The angle, radius and length values have to be set manually.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Angle">
            <summary>
            The angle of the hook. The value is between -270 to +270 degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Radius">
            <summary>
            The bending radius of the hook.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarHookData.Length">
            <summary>
            The length of the straight part of the hook. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarHookData.#ctor">
            <summary>
            Instantiates a rebar hook data instance with empty members.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLeg">
            <summary>
            This represents a leg of a rebar and is used in the <see cref="T:Tekla.Structures.Model.RebarComplexGeometry"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarLeg.#ctor(Tekla.Structures.Geometry3d.ICurve,Tekla.Structures.Model.RebarLeg.OriginEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.RebarLeg"/> class.
            </summary>
            <param name="curve">The leg curve.</param>
            <param name="origin">The leg origin.</param>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLeg.Curve">
            <summary>
            Gets the curve of the leg
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarLeg.Origin">
            <summary>
            Gets the origin of the leg
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarLeg.OriginEnum">
            <summary>
            Enumerator for different leg origins.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLeg.OriginEnum.NORMAL">
            <summary>
            The leg is from a face
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLeg.OriginEnum.HOOK">
            <summary>
            The leg is on a hook.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarLeg.OriginEnum.CRANK">
            <summary>
            The leg is on a crank.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh">
            <summary>
            The RebarMesh class represents a reinforcement mesh.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate CP = new ContourPlate();
            
                       RebarMesh RebarMesh = new RebarMesh();
                       RebarMesh.MeshType = Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.RECTANGULAR_MESH;
                       RebarMesh.Father = CP;
                       RebarMesh.StartPoint = new Point(3000, 0, 0);
                       RebarMesh.EndPoint = new Point(5000, 0, 0);
                       RebarMesh.CatalogName = "MyCatalog";
                       RebarMesh.LongitudinalSize = "6";
                       RebarMesh.CrossSize = "6";
                       RebarMesh.LeftOverhangCross = 20;
                       RebarMesh.LeftOverhangLongitudinal = 40;
                       RebarMesh.RightOverhangCross = 20;
                       RebarMesh.RightOverhangLongitudinal = 40;
                       RebarMesh.LongitudinalSpacingMethod = RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE;
                       RebarMesh.LongitudinalDistances.Add(50.0);
                       RebarMesh.CrossDistances.Add(20.0);
                       RebarMesh.Name = "Mesh Test";
                       RebarMesh.Class = 7;
                       RebarMesh.NumberingSeries.StartNumber = 0;
                       RebarMesh.NumberingSeries.Prefix = "Mesh";
                       RebarMesh.Grade = "B500K";
                       RebarMesh.OnPlaneOffsets.Add(10.0);
                       RebarMesh.FromPlaneOffset = -50;
                       RebarMesh.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarMesh.StartPointOffsetValue = 10;
                       RebarMesh.CutByFatherPartCuts = false;
                       RebarMesh.CrossBarLocation = Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE;
                       RebarMesh.Length = 1500;
                       RebarMesh.Width = 3500;  
            
                       RebarMesh.Insert();
            
                       RebarMesh.Grade = "B600KX";
                       RebarMesh.LongitudinalSize = "8";
                       RebarMesh.RightOverhangLongitudinal = 75;
                       RebarMesh.Length = 1800;
                       RebarMesh.Width = 3800;
            
                       RebarMesh.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum">
            <summary>
            The different types of reinforcement meshes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.UNKNOWN_MESH">
            <summary>
            The type of the mesh is unknown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.RECTANGULAR_MESH">
            <summary>
             The shape of the mesh is rectangular. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.POLYGON_MESH">
            <summary>
             The shape of the mesh is a polygon. Create rectangular meshes also as polygon meshes. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshTypeEnum.BENT_MESH">
            <summary>
            The shape of the mesh is bent.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum">
            <summary>
            The ways to distribute the reinforcing bars with different spacings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_UNDEFINED">
            <summary>
            The undefined spacing type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_SAME_DISTANCE">
            <summary>
            Distributes the bars using the same distance for all bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshSpacingMethodEnum.SPACING_TYPE_MULTIPLE_VARYING_DISTANCES">
            <summary>
            Varying distribution of the bars.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum">
            <summary>
            The ways to locate the crossing bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_UNDEFINED">
            <summary>
            The undefined location type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_ABOVE">
            <summary>
            The location of the crossing bars is above the longitudinal bars.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarMesh.RebarMeshCrossBarLocationEnum.LOCATION_TYPE_BELOW">
            <summary>
            The location of the crossing bars is below the longitudinal bars.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.MeshType">
            <summary>
            The type of the reinforcement mesh. The options are:
            <list type="bullet">
            <item><description>RECTANGULAR_MESH</description></item>
            <item><description>POLYGON_MESH</description></item>
            <item><description>BENT_MESH</description></item>
            </list>
            </summary>
            <remarks>It is not possible to change the type of existing rebar meshes.</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalSpacingMethod">
            <summary>
            The type of spacing between rebar mesh bars. Used both for longitudinal and crossing bars.
            The options are (RebarMesh.RebarMeshSpacingMethodEnum.):
            <list type="bullet">
            <item><description>SPACING_TYPE_SAME_DISTANCE</description></item>
            <item><description>SPACING_TYPE_MULTIPLE_VARYING_DISTANCES</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Polygon">
            <summary>
            The polygon of the mesh. 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalDistances">
            <summary>
            The longitudinal spacing double value(s). 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossDistances">
            <summary>
            The crossing spacing double value(s). 
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.FromPlaneOffset">
            <summary>
            The offset value from the part surface applied in both sides.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartPoint">
            <summary>
            The start point of the direction in which the longitudinal bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndPoint">
            <summary>
            The end point of the direction in which the longitudinal bars are distributed.
            </summary> 
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LeftOverhangLongitudinal">
            <summary>
            The overhang of the longitudinal bar's left side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LeftOverhangCross">
            <summary>
            The overhang of the crossing part's left side.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.RightOverhangLongitudinal">
            <summary>
            The right overhang of the longitudinal bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.RightOverhangCross">
            <summary>
            The right overhang of the crossing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.LongitudinalSize">
            <summary>
            The size of the longitudinal rebar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossSize">
            <summary>
            The size of the crossing rebar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Width">
            <summary>
            The width of the rectangle rebar mesh.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.Length">
            <summary>
            The length of the rectangle rebar mesh.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CutByFatherPartCuts">
            <summary>
            Defines whether the rebar mesh is cut by father part cuts or not.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CatalogName">
            <summary>
            The name of the rebar mesh catalog.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.CrossBarLocation">
            <summary>
            Defines the location of the crossing bars.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.StartHook">
            <summary> The hook at the beginning of the reinforcing. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarMesh.EndHook">
            <summary> The hook at the end of the reinforcing. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.#ctor">
            <summary>
            Initializes a new mesh instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Insert">
            <summary>
            Inserts the reinforcement mesh into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Select">
            <summary>
            Selects a reinforcement mesh from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Modify">
            <summary>
            Modifies the existing reinforcement mesh in the model database to match the current one. 
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarMesh.Delete">
            <summary>
            Deletes the reinforcement mesh instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice">
            <summary>
            The RebarSplice class represents a splice between two reinforcements.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 15000, 0), new Point(6000, 15000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X; 
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
                       double MidX = (MinimumX + MaximumX) / 2.0;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon.Points.Add(new Point(MidX, MinimumY, MinimumZ));
            
                       Polygon Polygon2 = new Polygon();
                       Polygon2.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
                       Polygon2.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon2.Points.Add(new Point(MidX, MaximumY, MinimumZ));
            
                       RebarGroup RebarGroup1 = new RebarGroup();
                       RebarGroup1.Polygons.Add(Polygon);  
                       RebarGroup1.Polygons.Add(Polygon2);
                       RebarGroup1.RadiusValues.Add(40.0);
                       RebarGroup1.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup1.Spacings.Add(30.0);
                       RebarGroup1.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup1.Father = Beam;
                       RebarGroup1.Name = "RebarGroup1";
                       RebarGroup1.Class = 3;
                       RebarGroup1.Size = "12";
                       RebarGroup1.NumberingSeries.StartNumber = 0;
                       RebarGroup1.NumberingSeries.Prefix = "Group";
                       RebarGroup1.Grade = "A500HW";
                       RebarGroup1.StartHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup1.StartHook.Angle = -90;
                       RebarGroup1.StartHook.Length = 3;
                       RebarGroup1.StartHook.Radius = 20;
                       RebarGroup1.EndHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup1.EndHook.Angle = -90;
                       RebarGroup1.EndHook.Length = 3;
                       RebarGroup1.EndHook.Radius = 20;
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.OnPlaneOffsets.Add(25.0);
                       RebarGroup1.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup1.StartPointOffsetValue = 20;
                       RebarGroup1.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup1.EndPointOffsetValue = 20;
                       RebarGroup1.FromPlaneOffset = 40;
            
                       RebarGroup1.Insert();
            
                       Polygon Polygon3 = new Polygon();
                       Polygon3.Points.Add(new Point(MidX, MinimumY, MinimumZ));
                       Polygon3.Points.Add(new Point(MaximumX, MinimumY, MinimumZ));
                       Polygon3.Points.Add(new Point(MaximumX, MinimumY, MaximumZ));
            
                       Polygon Polygon4 = new Polygon();
                       Polygon4.Points.Add(new Point(MidX, MaximumY, MinimumZ));
                       Polygon4.Points.Add(new Point(MaximumX, MaximumY, MinimumZ));
                       Polygon4.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       RebarGroup RebarGroup2 = new RebarGroup();
                       RebarGroup2.Polygons.Add(Polygon3);
                       RebarGroup2.Polygons.Add(Polygon4);
                       RebarGroup2.RadiusValues.Add(40.0);
                       RebarGroup2.SpacingType = RebarGroup.RebarGroupSpacingTypeEnum.SPACING_TYPE_TARGET_SPACE;
                       RebarGroup2.Spacings.Add(30.0);
                       RebarGroup2.ExcludeType = RebarGroup.ExcludeTypeEnum.EXCLUDE_TYPE_BOTH;
                       RebarGroup2.Father = Beam;
                       RebarGroup2.Name = "RebarGroup2";
                       RebarGroup2.Class = 3;
                       RebarGroup2.Size = "12";
                       RebarGroup2.NumberingSeries.StartNumber = 0;
                       RebarGroup2.NumberingSeries.Prefix = "Group";
                       RebarGroup2.Grade = "A500HW";
                       RebarGroup2.StartHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup2.StartHook.Angle = -90;
                       RebarGroup2.StartHook.Length = 3;
                       RebarGroup2.StartHook.Radius = 20;
                       RebarGroup2.EndHook.Shape = RebarHookData.RebarHookShapeEnum.NO_HOOK;
                       RebarGroup2.EndHook.Angle = -90;
                       RebarGroup2.EndHook.Length = 3;
                       RebarGroup2.EndHook.Radius = 20;
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.OnPlaneOffsets.Add(25.0);
                       RebarGroup2.StartPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup2.StartPointOffsetValue = 20;
                       RebarGroup2.EndPointOffsetType = Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS;
                       RebarGroup2.EndPointOffsetValue = 20;
                       RebarGroup2.FromPlaneOffset = 40;
            
                       RebarGroup2.Insert();
            
                       RebarSplice RebarSplice = new RebarSplice(RebarGroup1, RebarGroup2);
            
                       if(!RebarSplice.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum">
            <summary> 
            The splice types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_RIGHT">
            <summary>
            The first (left) bar extends over the second (right) bar. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_LEFT">
            <summary> 
            The second (right) bar extends over the first (left) bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_LAP_BOTH">
            <summary> 
            Both bars extend over each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_MUFF">
            <summary> 
            The bar ends are joined with a muff.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceTypeEnum.SPLICE_TYPE_WELD">
            <summary> 
            The bar ends are joined with a weld.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum">
            <summary> 
            The bar group positions in the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum.SPLICE_BAR_ON_TOP">
            <summary>
            Joined bars on top of each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.RebarSplice.RebarSpliceBarPositionsEnum.SPLICE_BAR_PARALLEL">
            <summary> 
            Joined bars parallel to each other.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.RebarGroup1">
            <summary>
            The first one of the joined reinforcements (picked first).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.RebarGroup2">
            <summary>
            The second one of the joined reinforcements (picked second).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Type">
            <summary>
            The type of the splice (can be a lap, weld or muff splice).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.LapLength">
            <summary>
            The lap length of the lap type splice.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Offset">
            <summary>
            The distance from the end point of the first bar along the bar length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.Clearance">
            <summary>
            The clearance between joined bars in the case of the lap type splice.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarSplice.BarPositions">
            <summary>
            Value 0: Joined bars on top of each other in the case of the lap type splice.
            Value 1: Joined bars parallel to each other in the case of the lap type splice. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.#ctor(Tekla.Structures.Model.RebarGroup,Tekla.Structures.Model.RebarGroup)">
            <summary>
            Initializes a new rebar splice instance with rebar groups to be joined.
            </summary>
            <param name="InputRebar1">The first rebar group to be used.</param>
            <param name="InputRebar2">The second rebar group to be used.</param>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.#ctor">
            <summary>
            Initializes a new rebar splice instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Insert">
            <summary>
            Inserts the rebar splice into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Select">
            <summary>
            Selects a rebar splice from the model database. The splice identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Modify">
            <summary>
            Modifies the existing rebar splice in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarSplice.Delete">
            <summary>
            Deletes the rebar splice instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.RebarStrand">
            <summary>
            The RebarStrand class represents prestressed strands for concrete parts.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 14000, 0), new Point(6000, 14000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X; 
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon1 = new Polygon();
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MaximumZ)); 
                       Polygon1.Points.Add(new Point(MinimumX, MinimumY, MaximumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MinimumY, MinimumZ));
                       Polygon1.Points.Add(new Point(MinimumX, MaximumY, MinimumZ));
            
                       RebarStrand RebarStrand = new RebarStrand();
                       RebarStrand.Patterns.Add(Polygon1);        
                       RebarStrand.StartPoint = new Point(MinimumX, MinimumY, MinimumZ);
                       RebarStrand.EndPoint = new Point(MaximumX, MinimumY, MinimumZ);
                       RebarStrand.Father = Beam;
                       RebarStrand.Name = "Strand Test 1";
                       RebarStrand.Class = 3;
                       RebarStrand.Size = "10";
                       RebarStrand.NumberingSeries.StartNumber = 0;
                       RebarStrand.NumberingSeries.Prefix = "STRAND1";
                       RebarStrand.Grade = "B500K";
                       RebarStrand.RadiusValues.Add(30.0);
                       RebarStrand.PullPerStrand = 8000.0;
                       StrandUnbondingData Unbonding = new StrandUnbondingData();
                       Unbonding.FromEnd = 20;
                       Unbonding.FromStart = 20;
                       Unbonding.MiddleToEnd = 30;
                       Unbonding.MiddleToStart = 30;
                       Unbonding.StrandIndex = 1;
                       RebarStrand.Unbondings.Add(Unbonding);
                       StrandUnbondingData Unbonding2 = new StrandUnbondingData();
                       Unbonding2.FromEnd = 40;
                       Unbonding2.FromStart = 40;
                       Unbonding2.MiddleToEnd = 15;
                       Unbonding2.MiddleToStart = 15;
                       Unbonding2.StrandIndex = 2;
                       RebarStrand.Unbondings.Add(Unbonding2);
            
                       if(!RebarStrand.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.PullPerStrand">
            <summary>
            The pull per strand (N).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Patterns">
            <summary>
            An array list of polygons that represents the patterns of the rebar strand.
            Give the strand positions in the same order as for the first pattern.
            The maximum number of patterns is 20.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.Unbondings">
            <summary>
            An array list of StrandUnbondingData items.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.StartPoint">
            <summary>
            The start point of the single strand (the start point and end point define the length of the strand).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.EndPoint">
            <summary>
            The end point of the single strand (the start point and end point define the length of the strand).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.RebarStrand.OnPlaneOffsets">
            <summary> Not supported. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.#ctor">
            <summary>
            Initializes a new rebar strand instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Insert">
            <summary>
            Inserts the strand into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Select">
            <summary>
            Selects the strand from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Modify">
            <summary>
            Modifies the existing strand in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.RebarStrand.Delete">
            <summary>
            Deletes the strand instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Reinforcement">
            <summary>
            The Reinforcement class represents a reinforcement in the model. A reinforcement can either be a mesh,
            a single rebar, a rebar group or a strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_ON_PLANE_OFFSET_VALUES">
            <summary>
            Maximum on plane offset values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_RADIUS_VALUES">
            <summary>
            Maximum rebar radius values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_SPACING_VALUES">
            <summary>
            Maximum rebar splicing values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.MAX_REBAR_POLYGONS">
            <summary>
            Maximum rebar polygons.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum">
            <summary>
            Options for the function GetRebarGeometries.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum.NONE">
            <summary>
            No hooks or clash avoidance or length adjustment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum.HOOKS">
            <summary>
            Hooks.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum.AVOID_CLASH">
            <summary>
            In case rebar polygon clashes with itself, physical points are moved to avoid clashing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum.LENGTH_ADJUSTMENTS">
            <summary>
            Length adjustments 
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum">
            <summary> 
            The different types of offsets.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_COVER_THICKNESS">
            <summary>
            The concrete cover thickness.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement.RebarOffsetTypeEnum.OFFSET_TYPE_LEG_LENGTH">
            <summary> 
            The leg length.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Father">
            <summary>
            Gets or sets the father object of the reinforcement; the model object instance to operate on.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Grade">
            <summary>
            Gets or sets the steel grade of the reinforcing bar.
            The grade indicates the strength of the steel used in reinforcing bars.
            It can also indicate other factors, such as the weldability or surface deformations of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Name">
            <summary>
            Gets or sets the name of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.Class">
            <summary>
            Gets or sets the class of the reinforcement. The class is used to group reinforcements.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.NumberingSeries">
            <summary>
            Gets or sets the numbering series of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.OnPlaneOffsets">
            <summary>
            Gets or sets the double offset value for each leg on the same plane as the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.FromPlaneOffset">
            <summary>
            Gets or sets the offset value from the part surface.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.StartPointOffsetType">
            <summary>
            Gets or sets the type of the start point offset is either OFFSET_TYPE_LEG_LENGTH or OFFSET_TYPE_COVER_THICKNESS.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.StartPointOffsetValue">
            <summary>
            Gets or sets the concrete cover thickness or leg length at the first end of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.EndPointOffsetType">
            <summary>
            Gets or sets the type of the end point offset. The options are:
            <list type="bullet">
            <item><description>OFFSET_TYPE_LEG_LENGTH</description></item>
            <item><description>OFFSET_TYPE_COVER_THICKNESS</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.EndPointOffsetValue">
            <summary>
            Gets or sets the concrete cover thickness or leg length at the second end of the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.RadiusValues">
            <summary>
            Gets or sets the radius value(s) of the bends in the bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement.InputPointDeformingState">
            <summary>
            Gets or sets the reinforcement input point deforming state.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Reinforcement._Size">
            <summary>
            Gets or sets the size of the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Reinforcement._wires">
            <summary>
            Stores the physical rebars from which the RebarMesh consists of.
            The rebars may be requested one at a time or all in a list, and they contain
            physical points that single rebar has. These points can both include the hook 
            points or not depending on how the retreiving function is called.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.#ctor">
            <summary>
            Initializes a new instance of the Reinforcement class with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarGeometries(Tekla.Structures.Model.Reinforcement.RebarGeometryOptionEnum)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type RebarGeometry).
            These objects contain physical points in the 3D space of each reinforcing bar.
            </summary>
            <param name="options">The options.</param>
            <returns>An array list that contains the RebarGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarGeometries(System.Boolean)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type RebarGeometry).
            These objects contain physical points in the 3D space of each reinforcing bar.
            </summary>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>An array list that contains the RebarGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarGeometriesWithoutClashes(System.Boolean)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type RebarGeometry).
            These objects contain physical points in the 3D space of each reinforcing bar as shown in model view.
            In case rebar polygon clashes with itself, physical points are moved to avoid clashing.
            </summary>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>An array list that contains the RebarGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetRebarComplexGeometries(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a list of physical reinforcing bars (of type ReinforcingBar).
            These objects contain physical curves in the 3D space of each reinforcing bar as shown in model view.
            In case rebar polygon clashes with itself, physical points are moved to avoid clashing. ReinforcingBar
            only differs from RebarGeometry by containing a Polycurve rather than a Polyline.
            </summary>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <param name="withoutClashes">A parameter to determine whether self-clash avoidance should be included in the rebar geometry or not.</param>
            <param name="lengthAdjustments">A parameter to determine whether rounding and step tapering should be included in the rebar geometry or not.</param>
            <returns>A list of <see cref="T:Tekla.Structures.Model.RebarComplexGeometry"/>s.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.IsGeometryValid">
            <summary>
            Tells whether the geometry of a reinforcement object is valid or not.
            </summary>
            <returns>True if the geometry of the reinforcement is valid, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetNumberOfRebars">
            <summary>
            Returns the number of rebars in the reinforcing group.
            </summary>
            <returns>The number of rebars in the rebar group.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSingleRebar(System.Int32,System.Boolean)">
            <summary>
            Returns a single rebar inside the rebar group located by the given index.
            The indexing starts from the start point. The rebar represents a physical reinforcing bar 
            and contains physical points in the 3D space of the bar.
            The method returns null on error, for example if given an erroneous index.
            The number of rebars in the group can be requested with GetNumberOfRebars().
            </summary>
            <param name="index">The index of the rebar in the group.</param>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>The instance of a RebarGeometry object that contains the point list of the single physical reinforcing bar. Null if the given index was not valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSingleRebarWithoutClash(System.Int32,System.Boolean)">
            <summary>
            Returns a single rebar inside the rebar group located by the given index.
            The indexing starts from the start point. The rebar represents a physical reinforcing bar 
            and contains physical, non-clashing points in the 3D space of the bar.
            The method returns null on error, for example if given an erroneous index.
            The number of rebars in the group can be requested with GetNumberOfRebars().
            </summary>
            <param name="index">The index of the rebar in the group.</param>
            <param name="withHooks">A parameter to determine whether the hook points should be included in the rebar geometry or not.</param>
            <returns>The instance of a RebarGeometry object that contains the point list of the single physical reinforcing bar. Null if the given index was not valid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetSolid">
            <summary>
            Method for getting the solid information of the reinforcement.
            </summary>
            <returns>The solid instance of the reinforcement.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetFatherPour">
            <summary>
            Returns the pour that the rebar is associated to.
            </summary>
            <returns>The pour object.</returns>
            <obsolete>Deprecated since TS v2018.</obsolete>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.GetFatherPourUnit">
            <summary>
            Returns the pour unit that the rebar is associated to.
            </summary>
            <returns>A pour unit.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.SelectInnerRebars(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects the physical rebars inside the group. 
            These rebars contain for example physical points of the rebar.
            The function fetches all physical rebars for the structure. Due to remoting limitations,
            they may be fetched with several subsequent remote calls when handling a big reinforcement structure.
            This may cause some overhead.
            The function is only called once, when first inquiry about the physical rebarsis made.
            </summary>
            <param name="withHooks">Parameter to determine whether the hook points should be included or not.</param>
            <param name="withoutClashes">Parameter to determine whether the polygon points should be moved to avoid clashing or not.</param>
            <param name="lengthAdjustments">Parameter to determine whether the bar should have round and step tapering applied.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.ToStruct(Tekla.Structures.ModelInternal.dotReinforcement_t@)">
            <summary>
            Method for transforming the Reinforcement data into corresponding struct.
            </summary>
            <param name="p">Reference to the struct which will be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Reinforcement.FromStruct(Tekla.Structures.ModelInternal.dotReinforcement_t@)">
            <summary>
            Method for transforming the struct data to corresponding Reinforcement data.
            </summary>
            <param name="p">Reference to the struct which will be used to populate the Reinforcement data.</param>
        </member>
        <member name="T:Tekla.Structures.Model.SingleRebar">
            <summary>
            The SingleRebar class represents a single reinforcing bar.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Beam Beam = new Beam(new Point(5000, 7000, 0), new Point(6000, 7000, 0));
                       Beam.Profile.ProfileString = "250*250";
                       Beam.Material.MaterialString = "K40-1";
                       Beam.Finish = "PAINT";
                       Beam.Insert();
            
                       double MinimumY = Beam.GetSolid().MinimumPoint.Y;
                       double MinimumX = Beam.GetSolid().MinimumPoint.X;
                       double MinimumZ = Beam.GetSolid().MinimumPoint.Z;
                       double MaximumY = Beam.GetSolid().MaximumPoint.Y;
                       double MaximumX = Beam.GetSolid().MaximumPoint.X;
                       double MaximumZ = Beam.GetSolid().MaximumPoint.Z;
            
                       Polygon Polygon = new Polygon();
                       Polygon.Points.Add(new Point(MinimumX, MaximumY, MaximumZ));
                       Polygon.Points.Add(new Point(MaximumX, MaximumY, MaximumZ));
            
                       SingleRebar SingleRebar = new SingleRebar();
                       SingleRebar.Polygon = Polygon;
                       SingleRebar.Father = Beam;
                       SingleRebar.Name = "SingleRebar";
                       SingleRebar.Class = 9;
                       SingleRebar.Size = "12";
                       SingleRebar.NumberingSeries.StartNumber = 0;
                       SingleRebar.NumberingSeries.Prefix = "Single";
                       SingleRebar.Grade = "A500HW";
                       SingleRebar.OnPlaneOffsets = new ArrayList();
                       SingleRebar.OnPlaneOffsets.Add(25.00);
                       SingleRebar.StartHook.Angle = -90;
                       SingleRebar.StartHook.Length = 10;
                       SingleRebar.StartHook.Radius = 10;
                       SingleRebar.StartHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;      
                       SingleRebar.EndHook.Angle = 90;
                       SingleRebar.EndHook.Length = 10;
                       SingleRebar.EndHook.Radius = 10;
                       SingleRebar.EndHook.Shape = RebarHookData.RebarHookShapeEnum.CUSTOM_HOOK;
            
                       if(!SingleRebar.Insert())
                           Console.WriteLine("Insert failed!");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.Size">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SingleRebar.Polygon">
            <summary>
            The polygon of the reinforcing bar.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.#ctor">
            <summary>
            Initializes a new single rebar instance with empty attributes.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Insert">
            <summary>
            Inserts the single rebar into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Select">
            <summary>
            Selects a single rebar from the model database. The reinforcement identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Modify">
            <summary>
            Modifies the existing single rebar in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.Delete">
            <summary>
            Deletes the single rebar instance with the given identifier from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SingleRebar.GetRebarSet">
            <summary>
            Gets the parent <see cref="T:Tekla.Structures.Model.RebarSet"/> of the single rebar.
            </summary>
            <returns>The parent <see cref="T:Tekla.Structures.Model.RebarSet"/>, or null if no parent rebar set.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.StrandUnbondingData">
            <summary>
            The StrandUnbondingData class represents the unbonding of a rebar strand.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       StrandUnbondingData Unbonding = new StrandUnbondingData();
                       Unbonding.FromEnd = 20;
                       Unbonding.FromStart = 20;
                       Unbonding.MiddleToEnd = 30;
                       Unbonding.MiddleToStart = 30;
                       Unbonding.StrandIndex = 1;
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.StrandIndex">
            <summary>
            The index of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.FromStart">
            <summary>
            The unbonding from the start of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.MiddleToStart">
            <summary>
            The unbonding from the middle of the strand 
            to the start of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.MiddleToEnd">
            <summary>
            The unbonding from the middle of the strand to the end of the strand.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.StrandUnbondingData.FromEnd">
            <summary>
            The unbonding from the end of the strand.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.StrandUnbondingData.#ctor">
            <summary>
            Initializes a new strand unbonding data instance with empty attributes.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid">
            <summary>
            The Solid class represents the physical object in the model created by a part instance.
            A solid instance can be used to query the actual geometry of the part and intersect that
            geometry with, for example, lines and planes.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Solid;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam MyPart = new Beam();
                    ArrayList MyList = new ArrayList();
                    ArrayList MyFaceNormalList = new ArrayList();
            
                    Solid Solid = MyPart.GetSolid();
                    FaceEnumerator MyFaceEnum = Solid.GetFaceEnumerator();
                    while (MyFaceEnum.MoveNext())
                    {
                        Face MyFace = MyFaceEnum.Current as Face;
                        if (MyFace != null)
                        {
                            MyFaceNormalList.Add(MyFace.Normal);
            
                            LoopEnumerator MyLoopEnum = MyFace.GetLoopEnumerator();
                            while (MyLoopEnum.MoveNext())
                            {
                                Loop MyLoop = MyLoopEnum.Current as Loop;
                                if (MyLoop != null)
                                {
                                    VertexEnumerator MyVertexEnum = MyLoop.GetVertexEnumerator() as VertexEnumerator;
                                    while (MyVertexEnum.MoveNext())
                                    {
                                        Point MyVertex = MyVertexEnum.Current as Point;
                                        if (MyVertex != null)
                                        {
                                            MyList.Add(MyVertex);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.faceList">
            <summary>
            List of solid faces. Each item of the list is itself a list of loops,
            and each loop is a list of vertexes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.edgeList">
            <summary>
            List of global edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.normalVectorList">
            <summary>
            List of face normal vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.shellIndexList">
            <summary>
            List of face shell indices.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.originPartIdList">
            <summary>
            List of face origin part ids.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.intersectionFaceList">
            <summary>
            List of all faces with loop points fetched with intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.intersectionPointsList">
            <summary>
            List of points fetched with GetAllIntersectionPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.ShellCount">
            <summary>
            The number of shells the solid consists of. -1 if unknown. Computation can be expensive.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidCreationTypeEnum">
            <summary>
            The creation type of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.RAW">
            <summary>
            The solid is created without any boolean operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.FITTED">
            <summary>
            The solid is created with fittings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.NORMAL">
            <summary>
            The solid is created including all cutting and fitting operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.HIGH_ACCURACY">
            <summary>
            The solid is created as normal with an exact profile cross section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.PLANECUTTED">
            <summary>
            The solid is created with fittings and cut planes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.NORMAL_WITHOUT_EDGECHAMFERS">
            <summary>
            The solid is created including all cutting and fitting operations without edge chamfers.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidCreationTypeEnum.NORMAL_WITHOUT_WELDPREPS">
            <summary>
            The solid is created including all cutting and fitting operations without weld prepping.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidId">
            <summary>
            Identifier of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidCreationType">
            <summary>
            Creation type of the solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.solidFormingStates">
            <summary>
            Forming states of the solid.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Solid.MinimumPoint">
            <summary>
            Gets the minimum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Solid.MaximumPoint">
            <summary>
            Gets the maximum axis-aligned point of the solid in the current plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidQueryTypeEnum">
            <summary>
            Solid query type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EXTREMA_MIN">
            <summary>
            Get extrema min.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EXTREMA_MAX">
            <summary>
            Get extrema max.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_SOLID_DATA">
            <summary>
            Get solid data.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_FACE_NORMAL">
            <summary>
            Get face normal.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidQueryTypeEnum.SOLID_GET_EDGES">
            <summary>
            Get edges.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidReturnValueEnum">
            <summary>
            Solid return value enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_FAILURE">
            <summary>
            Return failure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_CURRENT_LOOP">
            <summary>
            Return continue current loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_LOOP">
            <summary>
            Return continue next loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_FACE">
            <summary>
            Return continue next face.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_CONTINUE_NEXT_EDGE">
            <summary>
            Return continue next edge.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidReturnValueEnum.SOLID_RET_SOLID_COMPLETE">
            <summary>
            Return solid complete.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum">
            <summary>
            Solid intersection query type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_LINE_INTERSECTION">
            <summary>
            Line intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_PLANE_INTERSECTION">
            <summary>
            Plane intersection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionQueryTypeEnum.SOLID_PLANE_INTERSECTION_ALL">
            <summary>
            Plane intersection all.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum">
            <summary>
            Solid intersection return type enumeration.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_COMPLETE">
            <summary>
            Intersection complete.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_FACE">
            <summary>
            Intersection continue face.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_LOOP">
            <summary>
            Intersection continue loop.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Solid.SolidIntersectionReturnTypeEnum.SOLID_INTERSECTION_CONTINUE_NEXT_FACE">
            <summary>
            Intersection continue next face.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid" /> class.
            </summary>
            <param name="solidId">Solid id.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Model.Solid.SolidCreationTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid" /> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="creationType">Creation type.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Forming.FormingStates)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid" /> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="formingStates">Solid forming states.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.#ctor(Tekla.Structures.Identifier,Tekla.Structures.Model.Solid.SolidCreationTypeEnum,Tekla.Structures.Forming.FormingStates)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Solid" /> class.
            </summary>
            <param name="solidId">Solid id.</param>
            <param name="creationType">Creation type</param>
            <param name="formingStates">Solid forming states.</param>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Returns a list of line - solid intersection points.
            </summary>
            <param name="line">The intersection line to be used.</param>
            <returns>A list of intersection points.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns a list of line - solid intersection points.
            </summary>
            <param name="point1">The first end of the intersection line.</param>
            <param name="point2">The second end of the intersection line.</param>
            <returns>A list of intersection points.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.Intersect(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Returns a list of plane - solid intersection points. The first item of the list contains
            a list of the outmost intersection polygon and the rest of the items (if there are any)
            inner polygons.
            </summary>
            <param name="point1">The first plane point.</param>
            <param name="point2">The second plane point.</param>
            <param name="point3">The third plane point.</param>
            <returns>An array list of intersection point lists.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.IntersectAllFaces(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
             <summary>
             Returns an enumerator for an array list of lists of plane - solid intersection points from all intersecting faces. 
             The first item of one list contains points of the outmost intersection polygon and then the inner polygons (if there are any).
             </summary>
             <param name="point1">The first plane point.</param>
             <param name="point2">The second plane point.</param>
             <param name="point3">The third plane point.</param>
             <returns>An enumerator for an array list of intersection point lists.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Solid;
             using Tekla.Structures.Geometry3d;
             using System.Collections;
             
             public class Example
             {
                 public void Example1()
                 {
                     Beam Beam = new Beam(new Point(0, 0, 0), new Point(500, 0, 0));
                     Beam.Profile.ProfileString = "HEA400";
                     Beam.Name = "SolidPlane";
                     Beam.Finish = "Normal";
                     Beam.Class = "6";
                     Beam.Insert();
            
                     Solid Solid = Beam.GetSolid();
            
                     IEnumerator FaceEnum = Solid.IntersectAllFaces(new Point(0, -50, 0), new Point(1000, -50, 0), new Point(0, -50, 1000));
                     int FaceIndex = 0;
                     while (FaceEnum.MoveNext())
                     {
                         ArrayList Points = FaceEnum.Current as ArrayList;
                         IEnumerator LoopsEnum = Points.GetEnumerator();
            
                         int LoopIndex = 0;
                         while (LoopsEnum.MoveNext())
                         {
                             ArrayList LoopPoints = LoopsEnum.Current as ArrayList;
                             if (LoopPoints != null)
                             {
                                 IEnumerator LoopPointsEnum = LoopPoints.GetEnumerator();
                                 while (LoopPointsEnum.MoveNext())
                                 {
                                     Point SolidPoint = LoopPointsEnum.Current as Point;
                                     if(SolidPoint != null)
                                     {
                                         System.Diagnostics.Debug.WriteLine("Face " + FaceIndex.ToString() + " Loop " + LoopIndex.ToString() + " Point " + SolidPoint.ToString());
                                     }
                                 }
                             }
                             LoopIndex++;
                         }
                         FaceIndex++;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetAllIntersectionPoints(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Used to get all the intersection points between the solid and a plane.
            Does not arrange the points into polygons, thus a lot faster.
            </summary>
            <param name="point1">1st of the 3 points defining a plane</param>
            <param name="point2">2nd of the 3 points defining a plane</param>
            <param name="point3">3rd of the 3 points defining a plane</param>
            <returns>An IEnumerator containing the intersection points of type the Point</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetFaceEnumerator">
            <summary>
            Returns a new face enumerator in the current plane.
            </summary>
            <returns>A face enumerator to enumerate through solid faces.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetEdgeEnumerator">
            <summary>
            Returns a new edge enumerator in the current plane.
            </summary>
            <returns>An edge enumerator to enumerate through the solid's global edges.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.GetCutPart(Tekla.Structures.Model.Solid)">
             <summary>
             Returns a shell enumerator for the solid th at results cutting this solid with the given solid.
             </summary>
             <param name="CuttingPart">The solid to use for cutting.</param>
             <returns>An shell enumerator to enumerate through the resulting solid's shells.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Solid;
             using Tekla.Structures.Geometry3d;
             
             public class Example
             {
             
                 private static Beam CreateBeam(Point p1, Point p2, String profileName, bool SetAsOperativeClass)
                 {
                     Beam beam1 = new Beam
                     {
                         StartPoint = p1,
                         EndPoint = p2,
                         Profile = { ProfileString = profileName },
                         Finish = "PAINT",
                         Material = { MaterialString = "S235JR" },
                         Position = { Depth = Position.DepthEnum.MIDDLE },
                         Class = SetAsOperativeClass ? BooleanPart.BooleanOperativeClassName : "1"
                     };
            
                     return beam1;
                 }
            
                 public void Example1()
                 {
                     Beam beam1 = CreateBeam(new Point(1000.0, 1000.0, 0.0), new Point(1000.0, 2000.0, 0.0), "500*500", false);
                     Beam beam2 = CreateBeam(new Point(500.0, 1500.0, 250.0), new Point(1500.0, 1500.0, 250.0), "500*500", true);
                     BooleanPart cut = new BooleanPart { Father = beam1 };
                     cut.SetOperativePart(beam2);
                    
                     Solid solid1 = beam1.GetSolid(Solid.SolidCreationTypeEnum.RAW);
                     Solid solid2 = beam1.GetSolid(Solid.SolidCreationTypeEnum.NORMAL);
                    
                     ShellEnumerator shells = solid1.GetCutPart(solid2);
                    
                     int shellCount = 0;
                     List&lt;int&gt; faceCounts = new List&lt;int&gt;();
                    
                     while (shells.MoveNext())
                     {
                         var shell = shells.Current as Shell;
                         if (shell != null)
                         {
                             FaceEnumerator faces = shell.GetFaceEnumerator();
                             faceCounts.Insert(shellCount, 0); 
                             while(faces.MoveNext())
                             {
                                 faceCounts[shellCount]++; 
                             }
                         }
                         shellCount++;
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.Model.Solid.IsValid">
            <summary>
            Returns if the solid is valid.
            </summary>
            <returns>The validity of the solid.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment">
            <summary>
            The SurfaceTreatment class defines a layer above a building element defining what a surface looks like.
            The surface could for example have a tiled look.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       ContourPlate cp = new ContourPlate();
                       cp.Profile.ProfileString = "PL10";
                       cp.Class = "3";
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000,  6000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 9000, 12000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point(10500, 15000,0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000,0),null));
            
                       Contour c = new Contour();
                       c.AddContourPoint(new ContourPoint(new Point( 6000,  6000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 9000,  6000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 9000, 12000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point(10500, 15000,5), null));
                       c.AddContourPoint(new ContourPoint(new Point( 7500, 12000,5), null));
            
                       cp.Insert();
            
                       SurfaceTreatment treatment = new SurfaceTreatment();
                       treatment.Father = cp;
                       treatment.Polygon = c;
                       treatment.StartPoint = new Point(1500,0000,0);
                       treatment.EndPoint = new Point(1500,6000,0);
            
                       bool Result = false;
                       Result = treatment.Insert();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum">
            <summary>
            The different surfacing types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.CONCRETE_FINISH">
            <summary>
            The concrete finish surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.SPECIAL_MIX">
            <summary>
            The special mix surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.TILE_SURFACE">
            <summary>
            The tile surface type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceTypeEnum.STEEL_FINISH">
            <summary>
            The steel finish surface type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum">
            <summary>
            The different surfacing colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.WHITE">
            <summary>
            The white surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.RED">
            <summary>
            The red surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.GREEN">
            <summary>
            The green surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.BLUE">
            <summary>
            The blue surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.CYAN">
            <summary>
            The cyan surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.YELLOW">
            <summary>
            The yellow surface color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceTreatment.SurfaceColorEnum.MAGENTA">
            <summary>
            The magenta surface color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Type">
            <summary>
            The type of the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Color">
            <summary>
            The color of the surfacing.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Material">
            <summary>
            Defines the material for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Position">
            <summary>
            Defines the position for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Polygon">
            <summary>
            Defines the area for the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.StartPoint">
            <summary>
            Determines the origin of the surfacing. The surfacing is then filled out from
            the start point towards the end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.EndPoint">
            <summary>
            Determines the direction the surfacing is filled in. The direction is from the start point
            towards the end point.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Father">
            <summary>
            Defines the father part for the surface treatment: the part that the surface treatment is created on.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Thickness">
            <summary>
            Defines how thick the surface treatment is.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Name">
            <summary>
            The name of the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.Class">
            <summary>
            The class of the surface treatment.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.CutByFatherBooleans">
            <summary>
            Defines if the part is cut by the father's cuts.
            </summary>
            <remarks>Polygon cuts are not supported.</remarks>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceTreatment.TypeName">
            <summary>
            The name of the surface treatment type. The valid names are defined in the product_finishes.dat file.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.#ctor">
            <summary>
            Creates a new surface treatment instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Insert">
            <summary>
            Inserts the surface treatment to the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Select">
            <summary>
            Selects the surface treatment with the given identifier.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Modify">
            <summary>
            Modifies the surface treatment with the given identifier in the database to match
            the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceTreatment.Delete">
            <summary>
            Deletes the surface treatment with the given identifier from the database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.SurfaceObject">
             <summary>
             The SurfaceObject class represents a surface object in the model. Currently this class
             only support dynamic surfaces whose geometries are determined by the parts or pours 
             they associate to. It is not allowed to modify the geometry of a dynamic surface on Open API.
             The polymesh setter of this class throws <exception cref="T:System.InvalidOperationException"/>.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
             using System;
             using System.Collections;
             using System.Collections.Generic;
             
             public class Example
             {
                public void Example1()
                {
                   Point startPointBeam = new Point(0.0, 0.0, 0.0);
                   Point endPointBeam = new Point(10000.0, 0.0, 0.0);
                   Beam Beam = new Beam(startPointBeam, endPointBeam)
                   {
                      Profile = { ProfileString = "400*400" },
                      Material = { MaterialString = "Concrete_Undefined" }
                   };
                   Beam.Insert();
            
                   SurfaceObject surfaceObject = new SurfaceObject();
                   surfaceObject.Polymesh = CreateSingleFacePolymeshGeometry(
                                   new[]
                                   {
                                       new Vector(    0.0, -200.0, 0.0), // 0
                                       new Vector(10000.0, -200.0, 0.0), // 1
                                       new Vector(10000.0,  200.0, 0.0), // 2
                                       new Vector(    0.0,  200.0, 0.0)  // 3
                                   });
                   surfaceObject.Father = this.Beam;
                   surfaceObject.Insert();
                }
                
                private static FacetedBrep CreateSingleFacePolymeshGeometry(Vector[] vertices)
                {
                    var outerWires = new int[1][];
                    outerWires[0] = new int[vertices.Length];
                    for (int i = 0; i &lt; vertices.Length; i++)
                        outerWires[0][i] = i;
                    
                    var innerWires = new Dictionary&lt;int, int[][]> { };
                    
                    return new FacetedBrep(vertices, outerWires, innerWires);
                }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.SurfaceObject.father">
            <summary>
            The father object of the surface object. 
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.SurfaceObject"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.Polymesh">
            <summary>
            Gets or sets the surface geometry brep.
            </summary>
            <value>
            The polymesh.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.Class">
            <summary>
            Gets or sets the class of the surface object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.Name">
            <summary>
            Gets or sets the name of the surface object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.CreateHoles">
            <summary>
            Gets or sets a value indicating whether CreateHoles parameter of the surface object.
            </summary>
            <value>
              <c>true</c> if [create holes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.Type">
            <summary>
            Gets or sets the type of the surface object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.Father">
            <summary>
            Gets or sets the father object of the surface object. The father can be set only before the Insert(), otherwise exception is thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the father is tried to set after Insert().</exception>
        </member>
        <member name="P:Tekla.Structures.Model.SurfaceObject.ModelObjectType">
            <summary>
            Gets the model object type for this instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.Insert">
            <summary>
            Inserts a new model object. The geometry of the object
            needs to be set by using the public Polymesh
            function, before calling insert.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.Select">
            <summary>
            Selects the model object from the model by the identifier of this instance.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.Modify">
            <summary>
            Modifies the existing model object in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.Delete">
            <summary>
            Deletes the model object from the model database.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.ToStruct(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            converts this instance to a struct.
            </summary>
            <param name="output">
            The output parameter.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.FromStruct(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            Sets the properties of this instance from the struct.
            </summary>
            <param name="input">
            The input parameter.
            </param>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.CreateInstanceDelegate(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            Invokes the delegate of creating this surface in the model.
            </summary>
            <param name="surface">The surface.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
            <paramref name="surface" /> the surface polymesh
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.SelectInstanceDelegate(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            Invokes the delegate of selecting this surface in the model.
            </summary>
            <param name="surface">The surface.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.SurfaceObject.ModifyInstanceDelegate(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            Invokes the delegate of modifying this surface in the model.
            </summary>
            <param name="surface">The surface.</param>
            <returns>
            The error code returned from the delegate.
            </returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ClipPlane">
            <summary>
            The ClipPlane class defines a clip plane which can be used together with a visible view.
            </summary>
            <example>
            The following example shows how three ClipPlanes are created to the first visible view:
            <code>
            using System;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class ClipPlaneExample
            {
                public void ClipPlaneExample1()
                {
                    ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                    ViewEnum.MoveNext();
                    View ActiveView = ViewEnum.Current;
                    ClipPlane CPlane = new ClipPlane();
                    CPlane.View = ActiveView;
                    CPlane.UpVector = new Vector(1, 0, 0);
                    CPlane.Location = new Point(20000, 10000, 5000);
                    CPlane.Insert();
            
                    CPlane.UpVector = new Vector(0, 1, 0);
                    CPlane.Location = new Point(10000, 20000, 2000);
                    CPlane.Insert();
            
                    CPlane.UpVector = new Vector(0, 0, 1);
                    CPlane.Location = new Point(20000, 20000, 6000);
                    CPlane.Insert();
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.Location">
            <summary>The clip plane location in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.UpVector">
            <summary>The clip plane up vector in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.View">
            <summary>The view the clip plane belongs to.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.IsBorderVisible">
            <summary>Gets or sets a value indicating whether the clip plane border is visible.</summary>
            <value>True if the clip plane border is visible otherwise false.</value>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlane.IsScissorVisible">
            <summary>Gets or sets  a value indicating whether the clip plane scissor icon is visible.</summary>
            <value>True if the scissor icon is visible otherwise false.</value>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Insert">
             <summary>
            Creates a new clip plane to the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Delete">
             <summary>
            Deletes the clip plane from the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.Modify">
             <summary>
            Modifies the clip plane position in the application view.
            The application view must be visible.
            </summary>
             <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.UI.ClipPlane"/> class.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlane.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Tekla.Structures.Model.UI.ClipPlane"/> class with the specified clip plane ID.</summary>
            <param name="ID">The clip plane ID.</param>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ClipPlaneCollection">
            <summary>
            The ClipPlaneCollection class handles the collection of the clip planes.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ClipPlaneCollection._ClipPlanes">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.#ctor">
            <summary>
            Creates a new input item collection.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown when the type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ClipPlaneCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ClipPlaneCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Color">
            <summary>
            The Color class represents an RGB color with transparency. The color values must be between 0.0 and 1.0.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       Color SolidGreen = new Color(0.0, 1.0, 0.0);
                       Color SeeThroughBlue = new Color(0.0, 0.0, 1.0, 0.5);
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Red">
            <summary>
            The red value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Green">
            <summary>
            The green value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Blue">
            <summary>
            The blue value of the color, between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Color.Transparency">
            <summary>
            The transparency value of the color, between 0.0 (completely see-through) and 1.0 (completely solid).
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor">
            <summary>
            Creates a new color object. The default object is black.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new color object with the given values.
            </summary>
            <param name="Red">The red value of the color, between 0.0 and 1.0.</param>
            <param name="Green">The green value of the color, between 0.0 and 1.0.</param>
            <param name="Blue">The blue value of the color, between 0.0 and 1.0.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new color object with the given values.
            </summary>
            <param name="Red">The red value of the color, between 0.0 and 1.0.</param>
            <param name="Green">The green value of the color, between 0.0 and 1.0.</param>
            <param name="Blue">The blue value of the color, between 0.0 and 1.0.</param>
            <param name="Transparency">The transparency value of the color, 
            between 0.0 (completely see-through) and 1.0 (completely solid).</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.ToStruct(Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Color.FromStruct(Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicPolyLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicPolyLine.LineType">
            <summary>
            The appearance of the line. For instance solid, dashed or dotted.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Solid">
            <summary>
            The solid line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dashed1">
            <summary>
            The first dashed line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dashed2">
            <summary>
            The second dashed line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.DashedAndDotted">
            <summary>
            The dashed and dotted line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.GraphicPolyLine.LineType.Dotted">
            <summary>
            The dotted line type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.PolyLine">
            <summary>
            The path of the line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Color">
            <summary>
            The line color.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Width">
            <summary>
            The line width in pixels. 
            NOTE: Currently the valid width values are 1, 2 and 4
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.GraphicPolyLine.Type">
            <summary>
            The appearance of the line. For instance solid, dashed or dotted.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor">
            <summary>
            Create a black line with width 1 and solid line type.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor(Tekla.Structures.Model.UI.Color,System.Int32,Tekla.Structures.Model.UI.GraphicPolyLine.LineType)">
            <summary>
            Create a graphic polyline object with 0 points.
            </summary>
            <param name="color">The color of the line.</param>
            <param name="width">The width of the line.</param>
            <param name="type">The type of the line. For example solid, dashed or dotted.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.#ctor(Tekla.Structures.Geometry3d.PolyLine,Tekla.Structures.Model.UI.Color,System.Int32,Tekla.Structures.Model.UI.GraphicPolyLine.LineType)">
            <summary>
            Create a graphic polyline object.
            </summary>
            <param name="polyLine">The path of the line.</param>
            <param name="color">The color of the line.</param>
            <param name="width">The width of the line.</param>
            <param name="type">The type of the line. For example solid, dashed or dotted.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.ToStruct(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            
            </summary>
            <param name="graphicPolyLine"></param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicPolyLine.FromStruct(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            
            </summary>
            <param name="graphicPolyLine"></param>
        </member>
        <member name="T:Tekla.Structures.Model.UI.GraphicsDrawer">
            <summary>
            The GraphicsDrawer class draws temporary graphics in the currently active rendered view in Tekla Structures.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       GraphicsDrawer drawer = new GraphicsDrawer();
            
                       drawer.DrawText(new Point(0.0, 1000.0, 1000.0), "TEXT SAMPLE", new Color(1.0, 0.5, 0.0));
                       drawer.DrawLineSegment(new Point(0.0, 0.0, 0.0), new Point(1000.0, 1000.0, 1000.0), new Color(1.0, 0.0, 0.0));
            
                       Mesh mesh = new Mesh();
                       mesh.AddPoint(new Point(   0.0,    0.0, 0.0));
                       mesh.AddPoint(new Point(1000.0,    0.0, 0.0));
                       mesh.AddPoint(new Point(1000.0, 1000.0, 0.0));
                       mesh.AddPoint(new Point(   0.0, 1000.0, 0.0));
                       mesh.AddTriangle(0,1,2);
                       mesh.AddTriangle(0,2,3);
                       mesh.AddLine(0,1); mesh.AddLine(1,2); mesh.AddLine(2,3); mesh.AddLine(3,1);
            
                       drawer.DrawMeshSurface(mesh, new Color(1.0, 0.0, 0.0, 0.5));
                       drawer.DrawMeshLines(mesh, new Color(0.0, 0.0, 1.0));
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.#ctor">
            <summary>
            Creates a new graphics drawer instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawText(Tekla.Structures.Geometry3d.Point,System.String,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary text in the currently active rendered view.
            </summary>
            <param name="Location">The location of the text's top-left corner.</param>
            <param name="Text">The text to be drawn. The maximum length is 511 characters.</param>
            <param name="Color">The color of the text. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawLineSegment(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary line segment in the currently active rendered view.
            </summary>
            <param name="LineSegment">The line to draw.</param>
            <param name="Color">The color of the line. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawLineSegment(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws a temporary line segment in the currently active rendered view.
            </summary>
            <param name="Point1">The first point of the line.</param>
            <param name="Point2">The second point of the line.</param>
            <param name="Color">The color of the line. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawMeshSurface(Tekla.Structures.Model.UI.Mesh,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws the mesh surface as temporary graphics in the 
            currently active Tekla Structures rendered view. The counterclockwise sides
            of the mesh triangles are drawn.
            </summary>
            <param name="Mesh">The mesh to draw.</param>
            <param name="Color">The color of the mesh.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawMeshLines(Tekla.Structures.Model.UI.Mesh,Tekla.Structures.Model.UI.Color)">
            <summary>
            Draws the mesh lines as temporary graphics in the 
            currently active Tekla Structures rendered view.
            </summary>
            <param name="Mesh">The mesh to draw.</param>
            <param name="Color">The color of the mesh lines. The transparency value of the color is ignored.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.DrawPolyLine(Tekla.Structures.Model.UI.GraphicPolyLine)">
            <summary>
            Draw a temporary polyline into all open Tekla Structures views.
            </summary>
            <param name="GraphicPolyLine">The polyline to draw.</param>
            <returns>The identifier of the temporary graphic. You can delete the graphic with RemoveTemporaryGraphicsObject.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveTemporaryGraphicsObject(System.Int32)">
            <summary>
            Remove a temporary graphic object from all views.
            </summary>
            <param name="GraphicObjectID">The identifier that was returned when the object was created.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveTemporaryGraphicsObjects(System.Collections.IEnumerable)">
            <summary>
            Remove a list of temporary graphic objects from all views.
            </summary>
            <param name="GraphicObjectIDs">The identifiers that was returned when the object was created.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.Draw(Tekla.Structures.ModelInternal.GraphicObjectContainer)">
            <summary>
            Draw a graphical object containing lines, polylines, surfaces and textss to all open Tekla Structures views.
            </summary>
            <param name="graphicObject">The graphical object to draw.</param>
            <returns>True in success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveGraphicObjectContainer(Tekla.Structures.ModelInternal.GraphicObjectContainer)">
            <summary>
            Remove a graphic object container from all views.
            </summary>
            <param name="graphicObject">The object to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveGraphicObjectContainers(System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicObjectContainer})">
            <summary>
            Remove a graphic object container from all views.
            </summary>
            <param name="graphicObjects">The object to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.GraphicsDrawer.RemoveAllGraphicObjectContainers(System.String)">
            <summary>
            Removes all graphic object containers in given schema from all views.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Mesh">
            <summary>
            The Mesh class represents a mesh for drawing three-dimensional data.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            using System;
            
            public class ConeMesh
            {
                private Mesh _mesh;
            
                public Mesh Mesh
                {
                    get { return _mesh; }
                }
            
                public ConeMesh(Point center, double height, double radius, int segmentCount)
                {
                    _mesh = new Mesh();
                    Point centerTop = new Point(center);
                    centerTop.Z = centerTop.Z + height;
                    _mesh.Points.Add(centerTop);
            
                    double x = center.X + radius * Math.Cos(0.0);
                    double y = center.Y + radius * Math.Sin(0.0);
                    double z = center.Z;
            
                    Point p = new Point(x, y, z);
                    _mesh.AddPoint(p);
                    _mesh.AddLine(0, 1);
            
                    for (int i = 1; i &lt; segmentCount; i++)
                    {
                        x = center.X + radius * Math.Cos(i * (2 * Math.PI) / segmentCount);
                        y = center.Y + radius * Math.Sin(i * (2 * Math.PI) / segmentCount);
                        z = center.Z;
            
                        p = new Point(x, y, z);
            
                        _mesh.AddPoint(p);
                        _mesh.AddTriangle(0, i, i + 1);
                        _mesh.AddLine(0, i + 1);
                        _mesh.AddLine(i, i + 1);
                    }
            
                    _mesh.AddTriangle(0, segmentCount, 1);
                    _mesh.AddLine(segmentCount, 1);
                }
            }
            
            public class Example
            {
                   public void Example1()
                   {
                       GraphicsDrawer drawer = new GraphicsDrawer();
                       ConeMesh cone = new ConeMesh(new Point(0.0, 0.0, 0.0), 5000.0, 5000.0, 100);
            
                       drawer.DrawMeshSurface(cone.Mesh, new Color(1.0, 0.0, 0.0, 1.0));
                       drawer.DrawMeshLines(cone.Mesh, new Color(0.0, 0.0, 1.0));
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Points">
            <summary>
            An array list of point objects representing the mesh points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Triangles">
            <summary>
            An array list of indices (as integers) pointing to the points array list. Three consecutive indices
            always represent a single triangle.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.Mesh.Lines">
            <summary>
            An array list of indices (as integers) pointing to the points array list. Two consecutive indices
            always represent a single line.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.#ctor">
            <summary>
            Creates a new empty mesh instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Creates a new mesh instance with the given points, triangles and lines. Does not check
            the indices in the given triangles and lines array lists for correctness.
            </summary>
            <param name="Points">An array list of point objects representing the mesh points. Null represents
            no points. </param>
            <param name="Triangles">An array list of indices (of type integer) pointing to the points array list. 
            Three consecutive indices represent a single triangle. The first index is 0. If null, the mesh
            will not contain any triangles.</param>
            <param name="Lines">An array list of indices (of type integer) pointing to the points array list. 
            Two consecutive indices represent a single line. The first index is 0. If null, the mesh
            will not contain any lines.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddPoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds a new point in the mesh.
            </summary>
            <param name="Point">The point to be added, must not be null.</param>
            <returns>The index of the added point.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new triangle in the mesh.
            </summary>
            <param name="Index1">The index of the triangle's first point in the points array list.</param>
            <param name="Index2">The index of the triangle's second point in the points array list.</param>
            <param name="Index3">The index of the triangle's third point in the points array list.</param>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Mesh.AddLine(System.Int32,System.Int32)">
            <summary>
            Adds a new line in the mesh.
            </summary>
            <param name="Index1">The index of the line's start point in the points array list.</param>
            <param name="Index2">The index of the line's end point in the points array list.</param>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelObjectSelector">
            <summary>
            The ModelObjectSelector class can be used to select objects from the Tekla Structures user interface.
            Currently, these selections both select the objects from the database and highlight them visually.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model Model = new Model();
            
                       Beam B = new Beam(new Point(0,0,0), new Point(0,0,6000));
                       Beam B1 = new Beam(new Point(0,1000,0), new Point(0,1000,6000));
                       Beam B2 = new Beam(new Point(0,2000,0), new Point(0,2000,6000));
            
                       B.Insert();
                       B1.Insert();
                       B2.Insert();
            
                       ArrayList ObjectsToSelect = new ArrayList();
                       ObjectsToSelect.Add(B);
                       ObjectsToSelect.Add(B2);
            
                       Tekla.Structures.Model.UI.ModelObjectSelector MS = new Tekla.Structures.Model.UI.ModelObjectSelector();
                       MS.Select(ObjectsToSelect);
            
                       Model.CommitChanges();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.SELECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum">
            <summary>
            Enumeration about what to do in TS size
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.NEW_SELECTION">
            <summary>
            New selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.ADD_TO_PREVIOUS_SELECTION">
            <summary>
            Add to previous
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.SELECTION_FINISHED">
            <summary>
            Selection finished
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.NEW_ANNOTATION_SELECTION">
            <summary>
            New annotation selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.ADD_TO_PREVIOUS_ANNOTATION_SELECTION">
            <summary>
            Add to the previous annotation selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ModelObjectSelector.FunctionalityEnum.SELECTION_ANNOTATION_FINISHED">
            <summary>
            Annotation selections done
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.#ctor">
            <summary>
            Creates a new model object selector instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.GetSelectedObjects">
            <summary>
            Returns an enumerator of all the selected model objects in the model view.
            </summary>
            <returns>A model object enumerator of all the selected model objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.GetObjectsByBoundingBox(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.UI.View)">
            <summary>
            Returns an enumerator of the given view's visible model objects that collide with the given
            geometrical bounding box. Note that this method uses approximate bounding
            boxes and thus is NOT EXACT, and may return objects not necessarily colliding
            with the given box but only being somewhere near to it.
            </summary>
            <param name="MinPoint">The minimum point of the bounding box.</param>
            <param name="MaxPoint">The maximum point of the bounding box.</param>
            <param name="View">The view to get the objects from.</param>
            <returns>
            A model object enumerator of the visible model objects colliding with the given bounding box.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.Select(System.Collections.ArrayList)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="ModelObjects">The list of model objects to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.Select(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="ModelObjects">The list of model objects to select.</param>
            <param name="ShowDimensions">Defines whether to show dimensions of the parts in the selection.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.Select(System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="ModelObjects">The list of model objects to select.</param>
            <param name="ShowDimensions">Defines whether to show dimensions of the parts in the selection.</param>
            <param name="SuppressCallbacks">if set to <c>true</c>, suppress callbacks.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectSelector.SelectAnnotations(System.Collections.Generic.List{Tekla.Structures.Identifier})">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="Identifiers">The list of model objects to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.TemporaryTransparency">
            <summary> 
            The possible temporary transparencies. Used to temporarily change transparency
               of a model object to visualize some state in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.TemporaryTransparency.HIDDEN">
            <summary>
            Object is hidden.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.TemporaryTransparency.TRANSPARENT">
            <summary>
            Object is transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.TemporaryTransparency.SEMITRANSPARENT">
            <summary>
            Object is semi transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.TemporaryTransparency.SEMIVISIBLE">
            <summary>
            Object is almost fully visible.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.TemporaryTransparency.VISIBLE">
            <summary>
            Object is fully visible.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelObjectVisualization">
            <summary> 
            The class to set and clear temporary visualization (color and transparency) for model objects in view. 
            Permananet representation will be restored when view is redrawed or temporary visualization is cleared.
            Can be used also to fetch current permanent representation of model object.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System.Collections;
            
            public class Example
            {
                   public void Example1()
                   {
                       Model model = new Model();
            
                       Beam b = new Beam(new Point(0,0,0), new Point(0,0,6000));
                       Beam b1 = new Beam(new Point(0,1000,0), new Point(0,1000,6000));
                       Beam b2 = new Beam(new Point(0,2000,0), new Point(0,2000,6000));
                       b.Material.MaterialString = b1.Material.MaterialString = b2.Material.MaterialString = "Steel_Undefined";
                       b.Profile.ProfileString = b1.Profile.ProfileString = b2.Profile.ProfileString = "PL10*1000";
                       
                       b.Insert();
                       b1.Insert();
                       b2.Insert();
            
                       model.CommitChanges();
            
                       var blueObjects = new List&lt;ModelObject&gt; { b , b2 };
                       
                       var redObjects = new List&lt;ModelObject&gt; { b1 };
                       
                       ModelObjectVisualization.SetTransparencyForAll(TemporaryTransparency.HIDDEN); 
                       ModelObjectVisualization.SetTemporaryState(blueObjects, new TSM.UI.Color(0.0, 0.0, 1.0));
                       ModelObjectVisualization.SetTemporaryState(redObjects, new TSM.UI.Color(1.0, 0.0, 0.0));
            
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTemporaryStateForAll(Tekla.Structures.Model.UI.Color)">
            <summary>
            Sets temporary visualization state (red, blue, green and transparency) for all model objects
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTemporaryState(System.Collections.Generic.List{Tekla.Structures.Model.ModelObject},Tekla.Structures.Model.UI.Color)">
            <summary>
            Sets visualization temporary state (red, blue, green and transparency) for given model objects
            </summary>
            <param name="modelObjects"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTransparencyForAll(Tekla.Structures.Model.UI.TemporaryTransparency)">
            <summary>
            Restores permanent representation settings and sets temporary transparency for all model objects
            </summary>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTransparency(System.Collections.Generic.List{Tekla.Structures.Model.ModelObject},Tekla.Structures.Model.UI.TemporaryTransparency)">
            <summary>
            Restores permanent representation settings and sets temporary transparency for given model objects
            </summary>
            <param name="modelObjects"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTransparency(System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.Model.UI.TemporaryTransparency)">
            <summary>
            Restores permanent representation settings and sets temporary transparency for given model object identifiers
            </summary>
            <param name="identifiers"></param>
            <param name="transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.SetTemporaryState(System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.Model.UI.Color)">
            <summary>
            Sets visualization temporary state (red, blue, green and transparency) for given model object identifiers
            </summary>
            <param name="identifiers"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.GetRepresentation(Tekla.Structures.Model.ModelObject,Tekla.Structures.Model.UI.Color@)">
            <summary>
            Gets current permanent representation (red, blue, green and transparency) of given model object
            </summary>
            <param name="modelObject"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelObjectVisualization.ClearAllTemporaryStates">
            <summary> 
            Clears temporary visualization from all model objects and restores permanent representation. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ModelViewEnumerator">
            <summary>
            The ModelViewEnumerator class is an enumerator class for model views.
            The enumerator enables model view items to be looped.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ModelViewEnumerator.Current">
            <summary>Returns the current view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ModelViewEnumerator.Count">
            <summary>Returns the number of views in the enumerator.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ModelViewEnumerator.CurrentViewId">
            <summary>
            Gets the current view identifier.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelViewEnumerator.MoveNext">
            <summary>Moves to the next view in the enumerator.</summary>
            <returns>False on failure.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ModelViewEnumerator.Reset">
            <summary>Resets the enumerator.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker">
            <summary>
            The Picker class can be used to query the user to do manual picks of objects and points from the Tekla Structures model.
            The methods throw an exception if the user interrupts (cancels) the pick command.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            using System;
            using System.Windows.Forms;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker Picker = new Picker();
                       Point p = null;
                       try
                       {
                           p = Picker.PickPoint();
                       }
                       catch (Exception e)
                       {
                           MessageBox.Show(e.ToString());
                       }
                   }
            }
            </code>
            </example>
            <remarks>
            Prompts
            <para>
            Tekla Structures prefixes the given prompt with "prompt_" and
            looks for a translation in the <c>prompts.ail</c> file. If the translation
            (e.g. "prompt_Pick_first_position") is not found in the <c>prompts.ail</c>
            file, the prompt string is displayed as such. This feature can be used to
            give already translated strings to the picker.
            </para>
            </remarks>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickPointEnum">
            <summary>
            The possible point pick types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_ONE_POINT">
            <summary>
            Pick one point (x,y,z).
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_TWO_POINTS">
            <summary>
            Pick two points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_POLYGON">
            <summary>
            Pick multiple points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_LINE">
            <summary>
            Pick one line.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickPointEnum.PICK_FACE">
            <summary>
            Pick one face.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickObjectEnum">
            <summary>
            The possible model object pick types for a single object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_OBJECT">
            <summary>
            Pick one model object of any type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_PART">
            <summary>
            Pick one part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_WELD">
            <summary>
            Pick one welding.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_BOLTGROUP">
            <summary>
            Pick one bolt group.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectEnum.PICK_ONE_REINFORCEMENT">
            <summary>
            Pick one reinforcement.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.Picker.PickObjectsEnum">
            <summary>
            The possible model object pick types for many objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_OBJECTS">
            <summary>
            Pick multiple model objects of any type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_PARTS">
            <summary>
            Pick multiple parts.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_WELDS">
            <summary>
            Pick multiple welds.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_BOLTGROUPS">
            <summary>
            Pick multiple bolt groups.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.Picker.PickObjectsEnum.PICK_N_REINFORCEMENTS">
            <summary>
            Pick multiple reinforcements.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.#ctor">
            <summary>
            Creates a new picker instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint">
            <summary>
            Queries the user to pick a point from the model. 
            </summary>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint(System.String)">
            <summary>
            Queries the user to pick a point from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Queries the user to pick a point from the model with reference to the given point.
            </summary>
            <param name="ReferencePoint">The point to be used as reference.</param>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoint(System.String,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Queries the user to pick point with given prompt and reference to another point.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <param name="ReferencePoint">The point to be used as reference.</param>
            <returns>The point the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoints(Tekla.Structures.Model.UI.Picker.PickPointEnum)">
            <summary>
            Queries the user to pick points from the model.
            </summary>
            <param name="Enum">Indicates how many points the user must pick.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickPoints(Tekla.Structures.Model.UI.Picker.PickPointEnum,System.String)">
            <summary>
            Queries the user to pick points from the model with the given prompt and reference to another point.
            </summary>
            <param name="Enum">Indicates how many points the user must pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickLine">
            <summary>
            Queries the user to pick a line from the model.
            </summary>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickLine(System.String)">
            <summary>
            Queries the user to pick a line from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of points the user picked.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickFace">
            <summary>
            Queries the user to pick a face from the model.
            </summary>
            <returns>A list of the vertices of the face and the object the user picked as one PickInput instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickFace(System.String)">
            <summary>
            Queries the user to pick a face from the model with the given prompt.
            </summary>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>A list of the vertices of the face and the object the user picked as one PickInput instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObject(Tekla.Structures.Model.UI.Picker.PickObjectEnum)">
            <summary>
            Queries the user to pick one model object from the model.
            </summary>
            <param name="Enum">Indicates the type of objects to pick.</param>
            <returns>One model object instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObject(Tekla.Structures.Model.UI.Picker.PickObjectEnum,System.String)">
            <summary>
            Queries the user to pick one model object from the model with the given prompt.
            </summary>
            <param name="Enum">Indicates the type of objects to pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>One model object instance.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObjects(Tekla.Structures.Model.UI.Picker.PickObjectsEnum)">
            <summary>
            Queries the user to pick model objects from the model.
            </summary>
            <param name="Enum">Indicates the type and amount of objects to pick.</param>
            <returns>An enumerator of model object instances.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.Picker.PickObjects(Tekla.Structures.Model.UI.Picker.PickObjectsEnum,System.String)">
            <summary>
            Queries the user to pick model objects from the model with the given prompt.
            </summary>
            <param name="Enum">Indicates the type and amount of objects to pick.</param>
            <param name="Prompt">The string to display as user guidance.</param>
            <returns>An enumerator of model object instances.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.PickInput">
            <summary>
            The PickInput class handles the input of picked objects and positions. 
            </summary>
            <example>
            The following example asks the user to pick a face and then shows the input for the plug-in:
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            using TSG = Tekla.Structures.Geometry3d;
            
            using System;
            using System.Collections;
            using System.Windows.Forms;
            
            public class Example
            {
                public void Example1()
                {
                    Picker Picker = new Picker();
                    try
                    {
                        PickInput Input = Picker.PickFace("");
                        IEnumerator MyEnum = Input.GetEnumerator();
                        while (MyEnum.MoveNext())
                        {
                            InputItem Item = MyEnum.Current as InputItem;
                            if (Item.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                            {
                                ModelObject M = Item.GetData() as ModelObject;
                                MessageBox.Show(M.Identifier.ToString());
                            }
                            if (Item.GetInputType() == InputItem.InputTypeEnum.INPUT_POLYGON)
                            {
                                ArrayList Points = Item.GetData() as ArrayList;
                                MessageBox.Show((Points[0] as TSG.Point).ToString());
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.ToString());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.UI.PickInput._InputItems">
            <summary>
            Contains all the Inputs, in the same order as they were entered
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.#ctor">
            <summary>
            Creates a new component input object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputPositions(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds an input positions to the pick input. 1-n Positions 
            </summary>
            <param name="P">The position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddTwoInputPositions(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds two input positions to the pick input.
            </summary>
            <param name="Position1">The first position to be added.</param>
            <param name="Position2">The second position to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Adds a polygon to the pick input.
            </summary>
            <param name="P">The polygon to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputObject(Tekla.Structures.Model.ModelObject)">
            <summary>
            Adds a model object to the pick input.
            </summary>
            <param name="M">The model object to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.AddInputObjects(System.Collections.ArrayList)">
            <summary>
            Adds an array list of  model objects to the pick input.
            </summary>
            <param name="PickObjects">A list of model objects in the correct order.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to
            an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            The array is multidimensional, or the index is equal to or greater than the length of the array, or the number of elements
            in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from the index to
            the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of
            the destination array.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tekla.Structures.Model.UI.PickInput.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tekla.Structures.Model.UI.PickInput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            using System;
            using System.Collections;
            
            public class Example
            {
                public void Example1()
                {
                    Beam B = new Beam(new Point(12000, 0, 0), new Point(12000, 0, 6000));
                    B.Profile.ProfileString = "380*380";
                    B.Material.MaterialString = "K40-1";
                    if (B.Insert())
                    {
                        Component C = new Component();
                        C.Name = "Component Test";
                        C.Number = 30000063;
            
                        ComponentInput CI = new ComponentInput();
                        CI.AddInputObject(B);
            
                        C.SetComponentInput(CI);
            
                        C.LoadAttributesFromFile("standard");
            
                        C.SetAttribute("side_bar_space", 333.0);
            
                        if (!C.Insert())
                        {
                            Console.WriteLine("Component Insert failed");
                        }
                        else
                        {
                            // test fetching component input
                            ComponentInput ComponentSel = C.GetComponentInput();
                            IEnumerator Enumerator = ComponentSel.GetEnumerator();
                            while (Enumerator.MoveNext())
                            {
                                InputItem ObjectInput = Enumerator.Current as InputItem;
                                if (ObjectInput.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                                {
                                    Beam BeamInput = ObjectInput.GetData() as Beam;
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View">
            <summary>
            The View class contains methods related to views.
            </summary>
            <example>
            An example of using the View and ViewHandler classes:
            <code>
            using System;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class ViewExample
            {
                   public void ViewExample1()
                   {
                       View View = new View();
                       View.Name = "Example View";
                       View.ViewCoordinateSystem.AxisX = new Vector(1, 0, 0);
                       View.ViewCoordinateSystem.AxisY = new Vector(0, 1, 0);
                       // Work area has to be set for new views
                       View.WorkArea.MinPoint = new Point(-3000, -3000, -3000);
                       View.WorkArea.MaxPoint = new Point(15000, 33000, 12000);
                       View.ViewDepthUp = 10000;
                       View.ViewDepthDown = 2000;
                       View.Insert();
                       View.WorkArea.MinPoint = new Point(-3000, -3000, -3000);
                       View.WorkArea.MaxPoint = new Point(5000, 3000, 2000);
                       View.Modify();
                   }
            }
            </code>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       ModelViewEnumerator ViewEnum = ViewHandler.GetAllViews();
                       while(ViewEnum.MoveNext())
                       {
                           View View = ViewEnum.Current;
                           ViewHandler.HideView(View);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewModifyType">
            <summary> The view modification types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_MODIFY_VIEW_PROPERTIES">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_DELETE_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_OPEN_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_CLOSE_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_REDRAW_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewModifyType.DOT_ZOOM_VIEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewProjectionType">
            <summary>
            The view projection types.
            The projection type can be read but not changed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewProjectionType.ORTHOGONAL_PROJECTION">
            <summary>
            The orthogonal view projection type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewProjectionType.PERSPECTIVE_PROJECTION">
            <summary>
            The perspective view projection type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.DisplayOrientationType">
            <summary>
            The view plane types.
            The plane type can be changed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.DisplayOrientationType.DISPLAY_VIEW_PLANE">
            <summary>
            The display orientation is in the view plane defined by the view coordinate system.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.DisplayOrientationType.DISPLAY_3D">
            <summary>
            The display orientation is in 3D defined by the display coordinate system.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.View.ViewRenderingType">
            <summary>
            The view rendering types.
            Only rendered views can be modified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewRenderingType.WIREFRAME_VIEW">
            <summary>
            The wireframe view type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.View.ViewRenderingType.RENDERED_VIEW">
            <summary>
            The rendered view type.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.CurrentRepresentation">
            <summary>
            Gets or sets the current representation.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.Identifier">
            <summary>The view identifier.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewCoordinateSystem">
            <summary>
            The local coordinate system for the view.
            Can be set when creating a view.
            The origin is always set to zero.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.DisplayCoordinateSystem">
            <summary>The local coordinate system for the display.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.Name">
            <summary>The name of the view. 84 characters at most.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.WorkArea">
            <summary>The view working area.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewDepthUp">
            <summary>The view depth up.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewDepthDown">
            <summary>The view depth down.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewProjection">
            <summary>The view projection type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.DisplayType">
            <summary>The display plane type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewRendering">
            <summary>The view rendering type.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.ViewFilter">
            <summary>The name of the view filter. 256 characters at most.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.SharedView">
            <summary>
            The property which tells if the view is shared.
            The value is meaningful only when the model is shared.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.View.VisibilitySettings">
            <summary>
            The property which tells the view visibility settings for objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Insert">
            <summary>Inserts a new view to the model.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Modify">
            <summary>Modifies the view parameters.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Select">
            <summary>Selects the view.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Delete">
            <summary>Deletes the view.</summary>
            <returns>True if the operation was successful.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.IsPerspectiveViewProjection">
            <summary>Tells whether the view projection is a perspective projection.</summary>
            <returns>True if the view projection type is perspective projection.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.IsVisible">
            <summary>Tells whether the view is currently visible.</summary>
            <returns>True if the view is visible.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.GetClipPlanes">
            <summary>Returns all the clip planes of the view.</summary>
            <returns>The clip planes of the view.</returns>
            <example>
            The following example shows how all ClipPlanes are deleted from the first visible view:
            <code>
            using System;
            using System.Collections;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class GetClipPlanesExample
            {
                public void GetClipPlanesExample1()
                {
                    ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                    ViewEnum.MoveNext();
                    View ActiveView = ViewEnum.Current;
                    ClipPlaneCollection ClipPlanes = ActiveView.GetClipPlanes();
                    if (ClipPlanes.Count > 0)
                    {
                        IEnumerator PlaneEnum = ClipPlanes.GetEnumerator();
                        while (PlaneEnum.MoveNext())
                        {
                            ClipPlane CPlane = PlaneEnum.Current as ClipPlane;
                            if (CPlane != null)
                                CPlane.Delete();
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.Insert(System.Boolean,System.Boolean)">
            <summary>
            Inserts a new view to the model.
            </summary>
            <param name="openView">A value indicating whether to open the inserted view</param>
            <param name="useAppliedValues">A value indicating whether to use applied values.</param>
            <returns>
            True if the operation was successful.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.InsertInstance(System.Boolean,System.Boolean)">
            <summary>
            Inserts view instance to model
            </summary>
            <param name="openView">A value indicating whether to open the inserted view</param>
            <param name="useAppliedValues">A value indicating whether to use applied values.</param>
            <returns>
            true if new view was inserted
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.ModifyInstance">
            <summary> Modifies selected view </summary>
            <returns> true if view was succesfully updated</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.DeleteInstance">
            <summary> Deletes selected view from database </summary>
            <returns> true if view was deleted</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.View.SelectInstance">
            <summary> Selects view from model </summary>
            <returns> true if given view was selected</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ViewCamera">
             <summary>
             The ViewCamera class defines a camera which can be used together with a visible view.
             Always supply a properly orthogonalized camera up vector when rotating the camera.
             </summary>
             <example>
             The following example shows how the ViewCamera class can be used:
             <code>
             using System;
             using Tekla.Structures.Model.UI;
             using Tekla.Structures.Geometry3d;
             
             public class ViewCameraExample
             {
                 public void ViewCameraExample1()
                 {
                     ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
                     ViewEnum.MoveNext();
                     View CurrentView = ViewEnum.Current;
                     ViewCamera Camera = new ViewCamera();
            
                     // Set the view to the camera
                     Camera.View = CurrentView;
                     if(CurrentView.IsVisible() &amp;&amp; CurrentView.IsPerspectiveViewProjection())
                     {
                         // Query camera settings from the application
                         Camera.Select();
             
                         // Tilt the camera
                         Vector DirectionVector = Camera.DirectionVector;
                         Vector UpVector = Camera.UpVector;
                         Vector CrossVector = DirectionVector.Cross(UpVector);
                         Matrix RotationMatrix = new Matrix();
                         RotationMatrix = MatrixFactory.Rotate(Math.PI/20.0, CrossVector);
                         Tekla.Structures.Geometry3d.Point RotPoint = RotationMatrix * (Tekla.Structures.Geometry3d.Point)Camera.DirectionVector;
                         DirectionVector = new Vector(RotPoint);
                         DirectionVector.Normalize();
                         Camera.DirectionVector = DirectionVector; 
             
                         // Orthogonalize the camera UpVector
                         UpVector = CrossVector.Cross(DirectionVector);
                         UpVector.Normalize();
                         Camera.UpVector = UpVector;
             
                         // Modify the camera settings in the application
                         Camera.Modify();
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.Location">
            <summary>The camera location in global coordinates (XYZ).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.DirectionVector">
            <summary>The camera direction (controls the camera pan and tilt).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.UpVector">
            <summary>The camera up vector (controls the camera roll).</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.FieldOfView">
            <summary>The camera field of view as an angle (degrees) in the perspective view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.ZoomFactor">
            <summary>The camera zoom factor (meter/pixel) in the orthogonal view.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewCamera.View">
            <summary>The view where the camera belongs to.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.Select">
            <summary>Updates the camera parameters from the application view.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.Modify">
            <summary>Updates the camera to the application view.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewCamera.#ctor">
            <summary>Instantiates a new view camera instance with zero length vectors.</summary>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ViewHandler">
            <summary>
            The ViewHandler class contains methods for handling views.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model.UI;
            
            public class Example
            {
                   public void Example1()
                   {
                       ViewHandler.SetRepresentation("standard");
                       ModelViewEnumerator ViewEnum = ViewHandler.GetAllViews();
            
                       while (ViewEnum.MoveNext())
                       {
                           View ViewSel = ViewEnum.Current;
                           ViewHandler.ShowView(ViewSel);
                           ViewHandler.RedrawView(ViewSel);
                           ViewHandler.HideView(ViewSel);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetAllViews">
            <summary>Fetches all the views from the model.</summary>
            <returns>A model view enumerator with all the views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetVisibleViews">
            <summary>Returns the visible views.</summary>
            <returns>A model view enumerator with the visible views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetPermanentViews">
            <summary>Returns the permanent views.</summary>
            <returns>A model view enumerator with the permanent views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetTemporaryViews">
            <summary>Returns the temporary views.</summary>
            <returns>A model view enumerator with the temporary views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.GetSelectedViews">
            <summary>Returns the views the user has selected.</summary>
            <returns>A model view enumerator with the selected views.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ShowView(Tekla.Structures.Model.UI.View)">
            <summary>Opens a model view.</summary>
            <param name="view">The view that is to be shown.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.HideView(Tekla.Structures.Model.UI.View)">
            <summary>Closes a model view.</summary>
            <param name="view">The view that is to be closed.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.RedrawView(Tekla.Structures.Model.UI.View)">
            <summary>Redraws a model view.</summary>
            <param name="view">The view that is to be redrawn.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ZoomToBoundingBox(Tekla.Structures.Model.UI.View,Tekla.Structures.Geometry3d.AABB)">
            <summary>Zooms a model view.</summary>
            <param name="view">The view that is to be zoomed.</param>
            <param name="B">The bounding box the view is zoomed to.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.ZoomToBoundingBox(Tekla.Structures.Geometry3d.AABB)">
            <summary>Zooms the current model view.</summary>
            <param name="box">The bounding box the current view is zoomed to.</param>
            <returns>True on success.</returns>
            <example>
            In the following example a part is picked and all the visible views are zoomed
            using the part's bounding box as a parameter.
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Model.UI;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Picker MyPicker = new Picker();
                       Part PickPart = MyPicker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART) as Part;
                       AABB PartBoundingBox = new AABB();
            
                       if (PickPart != null)
                       {
                           Solid PartSolid = PickPart.GetSolid();
                           PartBoundingBox.MaxPoint = PartSolid.MaximumPoint;
                           PartBoundingBox.MinPoint = PartSolid.MinimumPoint;
                       }
            
                       ModelViewEnumerator ViewEnum = ViewHandler.GetVisibleViews();
            
                       while (ViewEnum.MoveNext())
                       {
                           View ViewSel = ViewEnum.Current;
                           ViewHandler.ZoomToBoundingBox(ViewSel, PartBoundingBox);
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.SetRepresentation(System.String)">
            <summary>Sets the object representation.</summary>
            <param name="Representation">The representation that is to be used. 257 characters at most.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.UI.ViewHandler.RedrawWorkplane">
            <summary>Sets the workplane to current transformation plane and redraws it.</summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.UI.ViewVisibilitySettings">
            <summary>
            The View visibility settings class contains object visibility information related to view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.pointsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.partsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.boltsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.boltHolesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.weldsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.constructionPlanesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.rebarsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.surfaceTreatmentsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.poursVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.pourBreaksVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.loadsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.cutsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.fittingsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.componentsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.gridsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.constructionLinesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.referenceObjectsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.pointsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.partsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.boltsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.boltHolesVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.weldsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.constructionPlanesVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.rebarsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.cutsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.fittingsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.Model.UI.ViewVisibilitySettings.componentsVisibleInComponents">
            <exclude/>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PointsVisible">
            <summary>
            Gets or sets the point visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PartsVisible">
            <summary>
            Gets or sets the part visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.BoltsVisible">
            <summary>
            Gets or sets the bolt visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.BoltHolesVisible">
            <summary>
            Gets or sets the bolt hole visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.WeldsVisible">
            <summary>
            Gets or sets the weld visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ConstructionPlanesVisible">
            <summary>
            Gets or sets the construction plane visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.RebarsVisible">
            <summary>
            Gets or sets the reinforcement visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.SurfaceTreatmentsVisible">
            <summary>
            Gets or sets the surface treatment visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PoursVisible">
            <summary>
            Gets or sets the pour visibility.
            NOTE! this setting requires that XS_ENABLE_POUR_MANAGEMENT is set to true.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PourBreaksVisible">
            <summary>
            Gets or sets the pour break visibility.
            NOTE! this setting requires that XS_ENABLE_POUR_MANAGEMENT is set to true.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.LoadsVisible">
            <summary>
            Gets or sets the load visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.CutsVisible">
            <summary>
            Gets or sets the cut or union visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.FittingsVisible">
            <summary>
            Gets or sets the fitting visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ComponentsVisible">
            <summary>
            Gets or sets the component symbol visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.GridsVisible">
            <summary>
            Gets or sets the grid visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ConstructionLinesVisible">
            <summary>
            Gets or sets the construction line visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ReferenceObjectsVisible">
            <summary>
            Gets or sets the reference object visibility.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PointsVisibleInComponents">
            <summary>
            Gets or sets the point visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.PartsVisibleInComponents">
            <summary>
            Gets or sets the part visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.BoltsVisibleInComponents">
            <summary>
            Gets or sets the bolt visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.BoltHolesVisibleInComponents">
            <summary>
            Gets or sets the bolt hole visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.WeldsVisibleInComponents">
            <summary>
            Gets or sets the weld visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ConstructionPlanesVisibleInComponents">
            <summary>
            Gets or sets the construction plane visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.RebarsVisibleInComponents">
            <summary>
            Gets or sets the reinforcement visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.CutsVisibleInComponents">
            <summary>
            Gets or sets the cut visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.FittingsVisibleInComponents">
            <summary>
            Gets or sets the fitting visibility inside components.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.UI.ViewVisibilitySettings.ComponentsVisibleInComponents">
            <summary>
            Gets or sets the component symbol visibility inside components.
            </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld">
            <summary> The BaseWeld abstract class defines a weld between two model objects. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.referenceText">
            <summary> Private member to hold the reference text. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.prefixAboveLine">
            <summary> Private member to hold the prefix above the line information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.prefixBelowLine">
            <summary> Private member to hold the prefix below the line information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.standard">
            <summary> Private member to hold the weld detail/standard infromation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.weldNumberPrefix">
            <summary> Private member to hold the weld number prefix information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.intermittentType">
            <summary> Private member to hold weld intermittent type information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.placement">
            <summary> Private member to hold weld placement information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.preparation">
            <summary> Private member to hold weld preaparation information. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.logicalWeldId">
            <summary> Defines the Logical Weld ID. Is equal to 0 if Weld is not Child. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Tekla.Structures.Model.BaseWeld"/> class. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldTypeEnum">
            <summary> The weld types. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_NONE">
            <summary> No weld type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_EDGE_FLANGE">
            <summary> The edge-flange weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT">
            <summary> The square-groove (square butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_V_BUTT">
            <summary> The bevel-groove (single-V butt) weld.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_GROOVE_SINGLE_BEVEL_BUTT">
            <summary> The bevel-groove (single-bevel butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SINGLE_V_BUTT_WITH_BROAD_ROOT_FACE">
            <summary> The single-V butt weld with broad root face. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SINGLE_BEVEL_BUTT_WITH_BROAD_ROOT_FACE">
            <summary> The single-bevel butt weld with broad root face. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_U_GROOVE_SINGLE_U_BUTT">
            <summary> The U-groove (single U-butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_J_GROOVE_J_BUTT">
            <summary> The J-groove (single J-butt) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_BEVEL_BACKING">
            <summary> The bevel backing weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FILLET">
            <summary> The fillet weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PLUG">
            <summary> The plug weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SPOT">
            <summary> The spot weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SEAM">
            <summary> The seam weld.  </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_SLOT">
            <summary> The slot weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FLARE_BEVEL_GROOVE">
            <summary> The flare-bevel-groove weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FLARE_V_GROOVE">
            <summary> The flare V-groove weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_CORNER_FLANGE">
            <summary> The corner-flange weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SINGLE_BEVEL_BUTT_PLUS_FILLET">
            <summary> The partial penetration (single-bevel butt + fillet) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_PARTIAL_PENETRATION_SQUARE_GROOVE_PLUS_FILLET">
            <summary> The partial penetration (square groove + fillet) weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_MELT_THROUGH">
            <summary> The melt-through weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_V_BUTT">
            <summary> The steep flanked bevel groove single-V butt weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.STEEP_FLANKED_BEVEL_GROOVE_SINGLE_BEVEL_BUTT">
            <summary> The steep flanked bevel groove single-bevel butt weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_EDGE">
            <summary> The edge weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_ISO_SURFACING">
            <summary> The ISO surfacing weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_FOLD">
            <summary> The fold weld. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldTypeEnum.WELD_TYPE_INCLINED">
            <summary> The inclined weld. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldContourEnum">
            <summary> The weld contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_NONE">
            <summary> No contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_FLUSH">
            <summary> The flush contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_CONVEX">
            <summary> The convex contour. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldContourEnum.WELD_CONTOUR_CONCAVE">
            <summary> The concave contour. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldFinishEnum">
            <summary> The weld finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_NONE">
            <summary> No weld finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_GRIND">
            <summary> The grind finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_MACHINE">
            <summary> The machine finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_CHIP">
            <summary> The chip finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELD_FINISH_FINISHED_WELD">
            <summary> The normally treated finish. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldFinishEnum.WELS_FINISH_SMOOTH_TRANSITION">
            <summary> The smooth transition finish. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum">
            <summary> The weld electrode classification. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_NONE">
            <summary> No electrode classification. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_35">
            <summary> The electrode classification 35. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_42">
            <summary> The electrode classification 42. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_50">
            <summary> The electrode classification 50. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E60XX">
            <summary> The electrode classification E60XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E70XX">
            <summary> The electrode classification E70XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E80XX">
            <summary> The electrode classification E80XX. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldElectrodeClassificationEnum.WELD_ELECTRODE_CLASSIFICATION_E90XX">
            <summary> The electrode classification E90XX. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum">
            <summary> The weld process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_NONE">
            <summary> No process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_SMAW">
            <summary> The shielded metal arc (SMAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_SAW">
            <summary> The submerged arc (SAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_GMAW">
            <summary> The gas metal arc (GMAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_FCAW">
            <summary> The flux cored arc (FCAW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_ESW">
            <summary> The electroslag (ESW) process type. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldProcessTypeEnum.WELD_PROCESS_EGW">
            <summary> The electrogas (EGW) process type. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum">
            <summary> The weld NDT inspection level. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_NONE">
            <summary> No NDT inspection level. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_A">
            <summary> The NDT inspection level A. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_B">
            <summary> The NDT inspection level B. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_C">
            <summary> The NDT inspection level C. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_D">
            <summary> The NDT inspection level D. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldNDTInspectionEnum.WELD_NDT_INSPECTION_E">
            <summary> The NDT inspection level E. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum">
            <summary>
            Weld intermittent types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.CONTINUOUS">
            <summary> Continuous. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.CHAIN_INTERMITTENT">
            <summary> Chain intermittent. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldIntermittentTypeEnum.STAGGERED_INTERMITTENT">
            <summary> Staggered intermittent. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum">
            <summary>
            Weld placement types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_AUTO">
            <summary> Auto placement. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_MAIN">
            <summary> Main part placement. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPlacementTypeEnum.PLACEMENT_SECONDARY">
            <summary> Secondary part placement. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum">
            <summary>
            Weld preparation types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_NONE">
            <summary> No preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_AUTO">
            <summary> Auto preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_MAIN">
            <summary> Main part preparation. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.BaseWeld.WeldPreparationTypeEnum.PREPARATION_SECONDARY">
            <summary> Secondary part preparation. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.MainObject">
            <summary> Gets or sets the main part of the weld. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SecondaryObject">
            <summary> Gets or sets the secondary part of the weld. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SizeAbove">
            <summary> Gets or sets the size above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AdditionalSizeAbove">
            <summary> Gets or sets the additional size above for combination welds. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.TypeAbove">
            <summary> Gets or sets the type above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AngleAbove">
            <summary> Gets or sets the angle above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.LengthAbove">
            <summary> Gets or sets the length above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ContourAbove">
            <summary> Gets or sets the contour above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.FinishAbove">
            <summary> Gets or sets the finish above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PitchAbove">
            <summary> Gets or sets the pitch above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.SizeBelow">
            <summary> Gets or sets the size below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AdditionalSizeBelow">
            <summary> Gets or sets the additional size below for combination welds. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.TypeBelow">
            <summary> Gets or sets the type below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AngleBelow">
            <summary> Gets or sets the angle below.  </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.LengthBelow">
            <summary> Gets or sets the length below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ContourBelow">
            <summary> Gets or sets the contour below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.FinishBelow">
            <summary> Gets or sets the finish below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PitchBelow">
            <summary> Gets or sets the pitch below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ShopWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is a shop weld (true) or a site weld (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.AroundWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is an around weld (true) or an edge weld (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.StitchWeld">
            <summary>
            Gets or sets a value indicating whether
            the weld is stitched (true) or not stitched (false).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootOpeningAbove">
            <summary> Gets or sets the root opening above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootFaceAbove">
            <summary> Gets or sets the root face above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.EffectiveThroatAbove">
            <summary> Gets or sets the effective throat above. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IncrementAmountAbove">
            <summary>
            Gets or sets the increment amount above.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootOpeningBelow">
            <summary> Gets or sets the root opening below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.RootFaceBelow">
            <summary> Gets or sets the root face below. </summary>        
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.EffectiveThroatBelow">
            <summary> Gets or sets the effective throat below. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IncrementAmountBelow">
            <summary>
            Gets or sets the increment amount below.
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeClassification">
            <summary> Gets or sets the weld electrode classification. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeStrength">
            <summary> Gets or sets the electrode strength. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ElectrodeCoefficient">
            <summary> Gets or sets the electrode strength coefficient. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ProcessType">
            <summary> Gets or sets the process type. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.NDTInspection">
            <summary> Gets or sets the NDT inspection level. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ConnectAssemblies">
            <summary>
            Gets or sets a value indicating whether
            to connect a part or an assembly as a secondary part (false)
            or as a sub-assembly (true).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.ReferenceText">
            <summary> Gets or sets the reference text. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PrefixAboveLine">
            <summary> Gets or sets the size prefix above the line. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.PrefixBelowLine">
            <summary> Gets or sets the size prefix below the line. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Standard">
            <summary> Gets or sets the weld detail/standard. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.WeldNumber">
            <summary> Gets the weld number. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.WeldNumberPrefix">
            <summary> Gets or sets the weld number prefix. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.IntermittentType">
            <summary>
            Gets or sets the weld intermittent type.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldIntermittentTypeEnum.</exception>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Placement">
            <summary>
            Gets or sets the weld placement.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldPlacementTypeEnum.</exception>
        </member>
        <member name="P:Tekla.Structures.Model.BaseWeld.Preparation">
            <summary>
            Gets or sets the weld preparation.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when provided value is not defined in the WeldPreparationTypeEnum.</exception>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetWeldGeometries">
            <summary>
            Method for getting weld seam geometries.
            Every result represents one individual seam geometry in current weld.
            </summary>
            <returns>An array list that contains weld seam specific WeldGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetSolid">
            <summary>
            Method for getting the weld solid.
            </summary>
            <returns>Weld solid.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.GetLogicalWeldID">
            <summary>
            Method for getting the logical weld id.
            </summary>
            <returns>Logical weld id.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.SetLogicalWeldID(System.Int32)">
            <summary>
            Method for setting the logical weld id.
            </summary>
            <param name="weldId">Logical weld id.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.ToStruct(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            Method for populating dotWeld_t struct from the BaseWeld object.
            </summary>
            <param name="p">Reference to the dotWeld_t struct to be populated.</param>
        </member>
        <member name="M:Tekla.Structures.Model.BaseWeld.FromStruct(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            Method for populating the BaseWeld object data from the dotWeld_t struct.
            </summary>
            <param name="p">Reference to the dotWeld_t struct to be used in populating the BaseWeld data.</param>
        </member>
        <member name="T:Tekla.Structures.Model.LogicalWeld">
            <summary>
            The LogicalWeld class represents a group of welds in the model.
            A logical weld contains a list of children welds. 
            The primary properties need to be the same in all the children welds.
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            
            public class Example
            {
                   public void Example1()
                   {
                       Weld Weld1 = new Weld();
                       Weld Weld2 = new Weld();
                       Weld1.TypeBelow = Weld.WeldTypeEnum.WELD_TYPE_SLOT;
                       Weld2.TypeBelow = Weld.WeldTypeEnum.WELD_TYPE_SEAM;
            
                       LogicalWeld LogicalWeld = new LogicalWeld(Weld1);
                       LogicalWeld.AddWeld(Weld2);
            
                       LogicalWeld.Insert();
            
                       LogicalWeld.SetMainWeld(Weld2);
                       LogicalWeld.RemoveWeld(Weld1);
            
                       LogicalWeld.Modify();
            
                       LogicalWeld.Explode();
                   }
            }
            </code>
            </example>
        </member>
        <member name="F:Tekla.Structures.Model.LogicalWeld._LogicalWeldList">
            <summary>
            List of children welds of this Logical Weld.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.#ctor(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Creates a new logical weld instance.
            </summary>
            <param name="MainWeld">The main weld for the logical weld.</param>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.AddWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Adds a weld to the logical weld.
            </summary>
            <param name="Weld">The weld to be added.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.GetMainWeld">
            <summary>
            Returns the main weld of the logical weld.
            </summary>
            <returns>The main weld of the logical weld.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.SetMainWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Sets the main weld for the logical weld.
            </summary>
            <param name="Weld">The weld to be set as the main weld.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.RemoveWeld(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Removes a weld from the logical weld.
            </summary>
            <param name="Weld">The weld to be removed.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Explode">
            <summary>
            Removes the logical weld from the model but not the children welds.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Insert">
            <summary>
            Inserts the logical weld into the model database. All the attributes must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Select">
            <summary>
            Selects a logical weld from the model database. The logical weld identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Select(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Selects the logical weld that a child weld belongs to.
            </summary>
            <param name="ChildWeld">A child weld whose logical weld we want to select.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Modify">
            <summary>
            Modifies the existing logical weld in the model database to match the current one.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.Delete">
            <summary>
            Deletes the logical weld instance with the given identifier
            from the model database and also the children welds.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.ToStruct(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            converts to struct a weld
            </summary>
            <param name="p">weld</param>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.AddWeldCheck(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Checks that Weld can be added to the Logical Weld.
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.GetMainWeldId">
            <summary>
            Returns the Main Weld Identifier of this Logical Weld.
            </summary>
            <returns>
            Returns the Main Weld Identifier of this Logical Weld. 
            Returns 0 if there are no welds in this Logical Weld.
            </returns>
        </member>
        <member name="M:Tekla.Structures.Model.LogicalWeld.CopyPrimaryProperties(Tekla.Structures.Model.BaseWeld)">
            <summary>
            Copies the attributes of the Main Weld to the 
            attributes of the Logical Weld (Logical Weld 
            attributes = Main Weld attributes).
            </summary>
            <returns>Returns true on success.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.PolygonWeld">
            <summary>
            The PolygonWeld class represents a polygon weld in the model.
            A polygon weld has a main part and a secondary part. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Beam1P1 = new Point(6000, 12000, 0);
                       Point Beam1P2 = new Point(9000, 12000, 0);
            
                       Point Beam2P1 = new Point(9000, 12000, 0);
                       Point Beam2P2 = new Point(9000, 18000, 0);
            
                       Beam Beam1 = new Beam(Beam1P1, Beam1P2);
                       Beam Beam2 = new Beam(Beam2P1, Beam2P2);
            
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Name = "Beam 1";
                       Beam2.Name = "Beam 2";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       PolygonWeld PolygonWeld = new PolygonWeld();
                       PolygonWeld.MainObject = Beam1;
                       PolygonWeld.SecondaryObject = Beam2;
                       Point WeldP1 = new Point(9000, 11850, 0);
                       Point WeldP2 = new Point(9000, 12000, 0);
                       Point WeldP3 = new Point(9150, 12000, 0);
                       PolygonWeld.Polygon.Points.Add(WeldP1);
                       PolygonWeld.Polygon.Points.Add(WeldP2);
                       PolygonWeld.Polygon.Points.Add(WeldP3);
                       PolygonWeld.TypeAbove = PolygonWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT;
            
                       PolygonWeld.Insert();
            
                       PolygonWeld.TypeBelow = PolygonWeld.WeldTypeEnum.WELD_TYPE_SLOT;
            
                       PolygonWeld.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.Model.PolygonWeld.Polygon">
            <summary> The polygon for the polygon weld. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.#ctor">
            <summary> Creates a new polygon weld instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Insert">
            <summary> Inserts the polygon weld into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Select">
            <summary> Selects a polygon weld from the model database. The polygon weld identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Modify">
            <summary>
            Modifies the existing polygon weld in the model database to match the current one.
            The modification cannot be done if the polygon weld is a part of a logical weld.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.Delete">
            <summary> Deletes the polygon weld instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.PolygonWeld.GetLogicalWeld(Tekla.Structures.Model.LogicalWeld@)">
            <summary>
            Gets the logical weld where the weld belongs. Returns false if 
            the weld does not belong to any logical weld.
            </summary>
            <param name="LogicalWeld">An initialized logical weld object.</param>
            <returns>True if the logical weld was selected correctly; false otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Weld">
            <summary>
            The Weld class represents a normal weld in the model.
            A normal weld has a main part and a secondary part. 
            </summary>
            <example>
            <code>
            using Tekla.Structures.Model;
            using Tekla.Structures.Geometry3d;
            
            public class Example
            {
                   public void Example1()
                   {
                       Point Beam1P1 = new Point(   0, 12000, 0);
                       Point Beam1P2 = new Point(3000, 12000, 0);
            
                       Point Beam2P1 = new Point(3000, 12000, 0);
                       Point Beam2P2 = new Point(3000, 18000, 0);
            
                       Beam Beam1 = new Beam(Beam1P1, Beam1P2);
                       Beam Beam2 = new Beam(Beam2P1, Beam2P2);
            
                       Beam1.Profile.ProfileString = "HEA400";
                       Beam1.Finish = "PAINT";
                       Beam1.Name = "Beam 1";
                       Beam2.Name = "Beam 2";
            
                       Beam1.Insert();
                       Beam2.Insert();
            
                       Weld Weld = new Weld();
                       Weld.MainObject = Beam1;
                       Weld.SecondaryObject = Beam2;
                       Weld.TypeAbove = BaseWeld.WeldTypeEnum.WELD_TYPE_SQUARE_GROOVE_SQUARE_BUTT;
            
                       Weld.Insert();
            
                       Weld.LengthAbove = 12;
                       Weld.TypeBelow = BaseWeld.WeldTypeEnum.WELD_TYPE_SLOT;
            
                       Weld.Modify();
                   }
            }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.Model.Weld.WeldPositionEnum">
            <summary> The weld position. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_X">
            <summary> The position +x. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_X">
            <summary> The position -x. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_Y">
            <summary> The position +y. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_Y">
            <summary> The position -y. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_PLUS_Z">
            <summary> The position +z. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Weld.WeldPositionEnum.WELD_POSITION_MINUS_Z">
            <summary> The position -z. </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Weld.Position">
            <summary> Defines the position. Use of Direction is preferred over this.</summary>
        </member>
        <member name="P:Tekla.Structures.Model.Weld.Direction">
            <summary> Defines the Weld edge search direction normalized to length 1000.0. Overrides Position if set.</summary>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.#ctor">
            <summary> Creates a new weld instance. </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Insert">
            <summary> Inserts the weld into the model database. All the attributes must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Select">
            <summary> Selects a weld from the model database. The weld identifier must be set. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Modify">
            <summary>
            Modifies the existing weld in the model database to match the current one.
            The modification cannot be done if the weld is a part of a logical weld.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.Delete">
            <summary> Deletes the weld instance with the given identifier from the model database. </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Weld.GetLogicalWeld(Tekla.Structures.Model.LogicalWeld@)">
            <summary>
            Gets the logical weld where the weld belongs. Returns false if
            the weld does not belong to any logical weld.
            </summary>
            <param name="LogicalWeld">An initialized logical weld object.</param>
            <returns>True if the logical weld was selected correctly; false otherwise.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.Welding.WeldSeamPositionEnum">
            <summary>
            Weld seam position types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldSeamPositionEnum.SEAM_ABOVE">
            <summary> Seam above. </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldSeamPositionEnum.SEAM_BELOW">
            <summary> Seam below. </summary>
        </member>
        <member name="T:Tekla.Structures.Model.Welding.WeldGeometry">
             <summary>
             Class that represents weld seam specific geometry.
             </summary>
             <example>
             <code>
             
             using System.Collections;
             using System.Text;
             using Tekla.Structures.Geometry3d;
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.Welding;
             
             public class Example
             {
                private static Model _teklaModel;
             
                private Model TeklaModel
                {
                     get
                     {
                         if (_teklaModel == null)
                         {
                             _teklaModel = new Model();
                         }
            
                         return _teklaModel;
                     }
                }
             
                public void Example1()
                {
                     ModelObjectEnumerator weldEnumerator =
                      TeklaModel.GetModelObjectSelector().GetAllObjectsWithType(ModelObject.ModelObjectEnum.WELD);
                     
                     Weld weld = null;
                     
                     while (weldEnumerator.MoveNext())
                     {
                         weld = weldEnumerator.Current as Weld;
            
                         if (weld != null)
                         {
                             break;
                         }
                     }
            
                     if (weld != null)
                     {
                         ArrayList weldGeometries = weld.GetWeldGeometries();
                         StringBuilder sb = new StringBuilder();
            
                         foreach (WeldGeometry weldGeometry in weldGeometries)
                         {
                             if (weldGeometry != null)
                             {
                                 int polygonIndex = 1;
            
                                 sb.AppendLine(weldGeometry.Position.ToString());
             
                                 foreach (Polygon polygon in weldGeometry.Polygons)
                                 {
                                     if (polygon != null)
                                     {
                                        sb.AppendLine("Polygon: " + polygonIndex);
            
                                        if (polygon.Points != null)
                                        {
                                            foreach (Point point in polygon.Points)
                                            {
                                                if (point != null)
                                                { 
                                                    sb.AppendLine(point.ToString());
                                                }
                                            }                                    
                                        }
                                     }
             
                                     polygonIndex++;
                                 }
                             }
                             
                             sb.AppendLine();
                             sb.AppendLine();
                         }
                         // Print the string builder content to the desired place by calling sb.ToString();
                     }
                }
             }
             </code>
             </example>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldGeometry.position">
            <summary>
            Weld seam position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.Model.Welding.WeldGeometry.polygons">
            <summary>
            Weld seam polygons.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.#ctor(Tekla.Structures.Model.Welding.WeldSeamPositionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.
            </summary>
            <param name="position">Weld seam position (above or below).</param> 
        </member>
        <member name="P:Tekla.Structures.Model.Welding.WeldGeometry.Position">
            <summary>
            Gets the weld seam position (above or below).
            </summary>
        </member>
        <member name="P:Tekla.Structures.Model.Welding.WeldGeometry.Polygons">
            <summary>
            Gets the weld seam specific ArrayList of <see cref="T:Tekla.Structures.Model.Polygon"/> objects.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.GetWeldGeometries(Tekla.Structures.Identifier)">
            <summary>
            Method for getting weld geometries.
            Every result represents one individual seam geometry in current weld.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <returns>An array list that contains weld specific WeldGeometry objects.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.GetWeldGeometry(Tekla.Structures.Identifier,Tekla.Structures.Model.Welding.WeldSeamPositionEnum)">
            <summary>
            Method for getting weld seam specific geometry.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <param name="seamPosition">Weld seam position (above or below).</param>
            <returns>An instance of the <see cref="T:Tekla.Structures.Model.Welding.WeldGeometry"/> class.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.Welding.WeldGeometry.CreateWeldGeometryPolygon(System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotWeldGeometry_t})">
            <summary>
            Method for creating weld geometry polygon out of weld geometry structs. 
            </summary>
            <param name="weldGeometryStructs">Seam specific list of weld geometry structs.</param>
            <returns>An instance of the <see cref="T:Tekla.Structures.Model.Polygon"/> class.</returns>
        </member>
        <member name="T:Tekla.Structures.Model.WorkPlaneHandler">
            <summary>
            The WorkPlaneHandler class contains methods for getting and setting
            the current transformation plane.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.#ctor">
            <summary>
            Internal constructor for WorkPlaneHander.
            Should be instantiated only from Model.
            </summary>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.GetCurrentTransformationPlane">
            <summary>
            Gets the current transformation plane.
            </summary>
            <returns>The current transformation plane.</returns>
        </member>
        <member name="M:Tekla.Structures.Model.WorkPlaneHandler.SetCurrentTransformationPlane(Tekla.Structures.Model.TransformationPlane)">
            <summary>
            Sets the current transformation plane.
            </summary>
            <remarks>
            Please note that in order to see workplane change visible in the model, 
            use the <see cref="M:Tekla.Structures.Model.UI.ViewHandler.RedrawWorkplane"/> method of
            the <see cref="T:Tekla.Structures.Model.UI.ViewHandler"/> class.
            </remarks>
            <param name="TransformationPlane">The transformation plane to be set as the current transformation plane.</param>
            <returns>False on failure.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotAssembly_t">
            <summary>
            Struct for the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.AssemblableId">
            <summary>
            The Identifier for the Assemblable we wish to find out the Assembly for (or 0 if none)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.MainPart">
            <summary>
            The Main Part of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.Type">
            <summary>
            The type of the Assembly.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.nAssemblyOtherParts">
            <summary>
            The number of secondary assemblables in the Assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.nAssemblySubAssemblies">
            <summary>
            Number of subassmblies.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.MainAssembly">
            <summary>
            The main assembly ID (if any) for this assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.NumberingSeries">
            <summary>
            Numbering of assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.aName">
            <summary>
            Name of the assembly
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAssembly_t.ClientID">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e.BatchEditor_CopyAssemblies">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e.BatchEditor_StoreAssemblyPositions">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e.BatchEditor_GetMappingOfAssemblies">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e.BatchEditor_StoreAssemblyPositionsAddTargets">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BatchEditorHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BatchEditorHandler.DbOperation(Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BatchEditorHandler.RunCommand(Tekla.Structures.ModelInternal.dotBatchEditorCommandEnum_e,System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBatchEditorHandler_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorHandler_t.Command">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorHandler_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorHandler_t.InputParameter">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBatchEditorHandler_t.OutputParameter">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoltGroup_t">
            <summary>
            Serialization structure for BoltGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BoltSize">
            <summary>
            Bolt Size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.aBoltStandard">
            <summary>
            Bolt Standard.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BoltType">
            <summary>
            Bolt Type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ThreadInMaterial">
            <summary>
            Thread In Material.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Length">
            <summary>
            Length, Used for Nelson Standards.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.CutLength">
            <summary>
            Cut Length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ExtraLength">
            <summary>
            Extra Length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Shape">
            <summary>
            _Shape.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Tolerance">
            <summary>
            Tolerance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.HoleType">
            <summary>
            HoleType.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.PlainHoleType">
            <summary>
            PlainHoleType.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.BlindHoleDepth">
            <summary>
            Blind hole depth.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SlottedHoleX">
            <summary>
            Slotted Hole X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SlottedHoleY">
            <summary>
            Slotted Hole Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.RotateSlots">
            <summary>
            Rotate Slots.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.StartPointOffset">
            <summary>
            Defines the bolt group start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.EndPointOffset">
            <summary>
            Defines the bolt group end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer1">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer2">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Washer3">
            <summary>
            Washers, 1-3
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Nut1">
            <summary>
            Nuts, 1-2
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Nut2">
            <summary>
            Nuts, 1-2
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Bolt">
            <summary>
            Bolt
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole1">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole2">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole3">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole4">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.Hole5">
            <summary>
            Holes, 1-5
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.PartToBoltToId">
            <summary>
            Part to bolt to
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.PartToBeBoltedId">
            <summary>
            Part to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.nOtherPartsToBolt">
            <summary>
            How many other parts to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.aOtherPartsToBolt">
            <summary>
            Ids of the other parts to be bolted
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.FirstPosition">
            <summary>
            First position point
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.SecondPosition">
            <summary>
            Second position point
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoltGroup_t.ConnectAssemblies">
            <summary> 
            Defines connect as secondary part (false) or as sub-assembly (true). 
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBoolean_t">
            <summary>
            Boolean class serialization structure
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoolean_t.ModelObject">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBoolean_t.Father">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBooleanPart_t">
            <summary>
            Boolean part serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.Boolean">
            <summary>
            Base class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.Type">
            <summary>
            BooleanTypeEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBooleanPart_t.OperativePart">
            <summary>
            Cutting/Adding part
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEdgeChamfer_t">
            <summary>
            Serialization structure for EdgeChamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.Boolean">
            <summary>
            Boolean is the base class for operation. It defines e.g. the father part of the operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.Chamfer">
            <summary>
            Chamfer values for edge chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstEnd">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondEnd">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstChamferEndType">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.FirstBevelDimension">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondChamferEndType">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.SecondBevelDimension">
            <summary>
            The first input point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdgeChamfer_t.aName">
            <summary>
            The name of the edge chamfer.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t">
            <summary>
            Serialization structure for Fitting and CutPlane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Boolean">
            <summary>
            Boolean is the base class for operation. It defines e.g. the father part of the operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Plane">
            <summary>
            The plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t.Type">
            <summary>
            Type of the operation.
            <list type="bullet"> 
            <listheader><description> Options are: </description></listheader>
            <item><description>FITTING</description></item> 
            <item><description>CUTPLANE</description></item> 
            </list>
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Building">
            <summary>
            Class for Building Hierarchy Building
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.Description">
            <summary>
            Gets or sets the Description of the Building.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Building" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.GetStoreys">
            <summary>
            Gets all storeys belonging to this site.
            </summary>
            <returns>All storeys belonging to this site.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.Insert">
            <summary>
            Inserts this Building Hierarchy object into model database. All the attributes must be set.
            </summary>
            <returns>True if the object was successfully inserted.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.Select">
            <summary>
            Selects the Building Hierarchy object from model database. The object identifier must be set.
            </summary>
            <returns>True if the object was successfully selected.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.Modify">
            <summary>
            Modifies the existing Building Hierarchy object in the model database to match the current one.
            </summary>
            <returns>True if the object was successfully modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Building.Delete">
            <summary>
            Deletes the Building Hierarchy object instance with the given identifier from the model database.
            </summary>
            <returns>True if the object was successfully deleted.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem">
            <summary>
            Base class for all Building Hierarchy object types.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.Name">
            <summary>
            Gets or sets the Name of the hierarchic object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.SetGuid(System.Guid)">
            <summary>
            Sets Guid for Building Hierarchy object. To be used when selecting object.
            </summary>
            <param name="guid">Guid of the Building Hierarchy object.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.GetGuid">
            <summary>
            Gets Guid of Building Hierarchy object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.FromStruct(Tekla.Structures.ModelInternal.dotBuildingHierarchyItem_t@)">
            <summary>
            Method for transforming the struct data to corresponding BuildingHierarchyItem data.
            </summary>
            <param name="bhItem">Reference to the struct which will be used to populate the BuildingHierarchyItem's data.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.BuildingHierarchyItem.ToStruct(Tekla.Structures.ModelInternal.dotBuildingHierarchyItem_t@)">
            <summary>
            Method for transforming the BuildingHierarchyItem's data into corresponding struct.
            </summary>
            <param name="bhItem">Reference to the struct which will be populated.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Site">
            <summary>
            Class for Building Hierarchy Site
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.Description">
            <summary>
            Gets or sets the Description of the Site.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Site" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.GetBuildings">
            <summary>
            Gets all buildings belonging to this site.
            </summary>
            <returns>All buildings belonging to this site.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.Insert">
            <summary>
            Inserts this Building Hierarchy object into model database. All the attributes must be set.
            </summary>
            <returns>True if the object was successfully inserted.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.Select">
            <summary>
            Selects the Building Hierarchy object from model database. The object identifier must be set.
            </summary>
            <returns>True if the object was successfully selected.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.Modify">
            <summary>
            Modifies the existing Building Hierarchy object in the model database to match the current one.
            </summary>
            <returns>True if the object was successfully modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Site.Delete">
            <summary>
            Deletes the Building Hierarchy object instance with the given identifier from the model database.
            </summary>
            <returns>True if the object was successfully deleted.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey">
            <summary>
            Class for Building Hierarchy Storey
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.parent">
            <summary>
            Backing field for the parent building of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Elevation">
            <summary>
            Gets or sets the Elevation of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.LevelOffset">
            <summary>
            Gets or sets the Level Offset of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Description">
            <summary>
            Gets or sets the Description of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.BottomOffset">
            <summary>
            Gets or sets the Bottom offset of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.LevelInfo">
            <summary>
            Gets or sets the Information of the storey.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Parent">
            <summary>
            Gets or sets the parent building of the storey.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey" /> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Insert">
            <summary>
            Inserts this Building Hierarchy object into model database. All the attributes must be set.
            </summary>
            <returns>True if the object was successfully inserted.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Select">
            <summary>
            Selects the Building Hierarchy object from model database. The object identifier must be set.
            </summary>
            <returns>True if the object was successfully selected.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Modify">
            <summary>
            Modifies the existing Building Hierarchy object in the model database to match the current one.
            </summary>
            <returns>True if the object was successfully modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.Delete">
            <summary>
            Deletes the Building Hierarchy object instance with the given identifier from the model database.
            TODO: TTSD-37779 Delete won't work with TeklaModel implementation because dotPluginInterface_ci::DeleteObject fails to find id.
            </summary>
            <returns>True if the object was successfully deleted.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.SetManualObjectOverrides(System.Collections.Generic.List{Tekla.Structures.Model.ModelObject})">
            <summary>
            Manually overrides grouping rules and directly assigns specified model objects to a Building Hierarchy object.
            </summary>
            <param name="overrideObjects">List of model objects to manually override to this Building Hierarchy item.</param>
            <returns>True if all object overrides were successfully set.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.GetManualObjectOverrides">
            <summary>
            Gets all manually overridden objects from this Building Hierarchy item.
            </summary>
            <returns>True if all object overrides were successfully read.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.RemoveManualObjectOverrides(System.Collections.Generic.List{Tekla.Structures.Model.ModelObject})">
            <summary>
            Removes specified manual overrides from this Building Hierarchy item.
            </summary>
            <param name="overrideObjects"></param>
            <returns>True if all object overrides were successfully removed.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BuildingHierarchy.Storey.GetObjects">
            <summary>
            Gets all ModelObjects that belong to this Storey. The objects still need to be selected separately after calling this method.
            </summary>
            <returns>List of unselected ModelObjects that belong to this Storey, either by calculation or manual override.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t">
            <summary>
            Serialization structure for building hierarchy building operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t.aGuid">
            <summary>
            The guid of the building hierarchy building.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t.aName">
            <summary>
            Name of the building hierarchy building.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t.OperationType">
            <summary>
            Defines if this is a create, read, update, or delete operation.
            <seealso cref="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum"/>
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t.aDescription">
            <summary>
            The description of the building hierarchy building.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyItem_t">
            <summary>
            Serialization structure for building hierarchy item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItem_t.aGuid">
            <summary>
            The guid of the building hierarchy item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItem_t.aName">
            <summary>
            Name of the building hierarchy item.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e">
            <summary>
            Enumeration for all possible BuildingHierarchy object types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_ITEM">
            <summary>
            Any building hierarchy item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_PROJECT">
            <summary>
            The building hierarchy project.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_SITE">
            <summary>
            The building hierarchy site.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_BUILDING">
            <summary>
            The building hierarchy building.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_PARTIALBUILDING">
            <summary>
            The building hierarchy partial building.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyItemType_e.DOT_BUILDINGHIERARCHY_STOREY">
            <summary>
            The building hierarchy storey.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t">
            <summary>
            Data structure for Building Hierarchy data retrieval operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t.ClientId">
            <summary>
            Client id for data retrieval operation (used for getting string lists).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t.aParentGuid">
            <summary>
            Guid of the Building Hierarchy parent object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t.ParentType">
            <summary>
            Item type of the Building Hierarchy parent object.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperationType_e">
            <summary>
            Enumeration for BuildingHierarchy override operation types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperationType_e.DOT_BH_OVERRIDE_CREATE">
            <summary>
            Add an object override.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperationType_e.DOT_BH_OVERRIDE_READ">
            <summary>
            Get all object overrides for parent object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperationType_e.DOT_BH_OVERRIDE_UPDATE">
            <summary>
            Modify an object override.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperationType_e.DOT_BH_OVERRIDE_DELETE">
            <summary>
            Remove an object override.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t">
            <summary>
            Data structure for Building Hierarchy data retrieval operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t.ClientId">
            <summary>
            Client id for data retrieval operation (used for getting string lists).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t.aParentGuid">
            <summary>
            Guid of the Building Hierarchy parent object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t.OverrideObjectId">
            <summary>
            Id of the overridden model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t.OperationType">
            <summary>
            Type of the override operation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t">
            <summary>
            Data structure for Building Hierarchy data retrieval operations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t.ClientId">
            <summary>
            Client id for data retrieval operation (used for getting string lists).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t.aParentGuid">
            <summary>
            Guid of the Building Hierarchy parent object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t.ParentType">
            <summary>
            Item type of the Building Hierarchy parent object.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t">
            <summary>
            Serialization structure for building hierarchy site.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t.aGuid">
            <summary>
            The guid of the building hierarchy site.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t.aName">
            <summary>
            Name of the building hierarchy site.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t.OperationType">
            <summary>
            Defines if this is a create, read, update, or delete operation.
            <seealso cref="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum"/>
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t.aDescription">
            <summary>
            The description of the building hierarchy site.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t">
            <summary>
            Serialization structure for building hierarchy storey operation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.id">
            <summary>
            The object id.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.aGuid">
            <summary>
            The guid of the building hierarchy item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.aParentGuid">
            <summary>
            The guid of the building hierarchy parent item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.aName">
            <summary>
            Name of the building hierarchy item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.OperationType">
            <summary>
            Defines if this is a create, read, update, or delete operation.
            <seealso cref="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum"/>
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.aDescription">
            <summary>
            The description of the building hierarchy storey.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.aLevelInfo">
            <summary>
            The level information of the building hierarchy storey.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.Elevation">
            <summary>
            Elevation of the storey.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.LevelOffset">
            <summary>
            Level Offset of the storey.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t.BottomOffset">
            <summary>
            Bottom offset of the storey.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBaseComponent_t">
            <summary>
            Serialization structure for BaseComponent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.ModelObject">
            <summary>
            Base class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aName">
            <summary>
            Name of the component
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.Number">
            <summary>
            Number of the component
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aAttributeFilename">
            <summary>
            Name of the attribute file we wish to load
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aConnectionCode">
            <summary>
            Connection code
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.UpVector">
            <summary>
            UpVector
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.AutoDirectionType">
            <summary>
            Auto direction type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.PositionType">
            <summary>
            Position type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.DetailType">
            <summary>
            Detail type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.AutoPosition">
            <summary>
            Auto position type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.ErrorStatus">
            <summary>
            Error status for connection, seam or detail.
            Visible in symbol color.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.Class">
            <summary>
            Class of connection/detail/seam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.PrimaryObjectId">
            <summary>
            Primary object id
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.nSecondaryObjectIds">
            <summary>
            Number of secondary object ids
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aSecondaryObjectIds">
            <summary>
            Secondary object ids
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.nPositions">
            <summary>
            Number of polygon positions
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aX">
            <summary>
            polygon x coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aY">
            <summary>
            polygon y coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.aZ">
            <summary>
            polygon z coordinates
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBaseComponent_t.CustomPartPosition">
            <summary>
            The way the custom part is positioned in the model.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotComponentAttribute_t">
            <summary>
            Struct for the ComponentAttribute.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.aName">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.AttributeType">
            <summary>
            Type of the attribute, int, double or string
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.IValue">
            <summary>
            int value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.DValue">
            <summary>
            double value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentAttribute_t.aStrValue">
            <summary>
            string value
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotComponentInputObject_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.InputType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.nPoints">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aX">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aY">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aZ">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.nObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.aObjects">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.ComponentId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotComponentInputObject_t.InputNumber">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ConversionLink">
            <summary>
            Class representing link between reference model object and native part
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum">
            <summary>
            Enum contains the all possible approval statuses.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum.UNKNOWN">
            <summary>
            Approval status is Unknown.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum.PENDING">
            <summary>
            Approval status is Pending.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum.ACCEPTED">
            <summary>
            Approval status us Accepted.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum.REJECTED">
            <summary>
            Approval status is Rejected.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatusEnum.IGNORED">
            <summary>
            Approval status is Ignored.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum">
            <summary>
            Enum contains the all possible conversion statuses.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum.UNKNOWN">
            <summary>
            Conversion status is unknown
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum.NOT_CONVERT">
            <summary>
            No conversion.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum.CONVERT">
            <summary>
            Convert.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum.CONVERT_TO_BREP">
            <summary>
            Convert to BREP.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatusEnum.CONVERT_TO_EXTRUSION">
            <summary>
            Convert to extrusion object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ConversionLink.PartId">
            <summary>
            Linked part ID.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ConversionLink.RefModelId">
            <summary>
            Reference model ID.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ConversionLink.RefModelObjectId">
            <summary>
            Reference model object ID.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ConversionLink.ApprovalStatus">
            <summary>
            Approval status for conversion.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ConversionLink.ConversionStatus">
            <summary>
            Conversion status.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ConversionLink.#ctor(System.Int32)">
            <summary>
            Creates a new conversion link instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ConversionLink.Insert">
            <summary>
            Inserts the conversion link instance in the model.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ConversionLink.Select">
            <summary>
            Selects the conversion link instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ConversionLink.Modify">
            <summary>
            Modifies the existing conversion link in the model database to match the current one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ConversionLink.Delete">
            <summary>
            Deletes the conversion link instance from the model. The identifier must be set.
            </summary>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotConversionLink_t">
            <summary>
            Serialization structure for conversion link.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotConversionLink_t.PartId">
            <summary>
            Linked part ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotConversionLink_t.RefModelId">
            <summary>
            Reference model ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotConversionLink_t.RefModelObjectId">
            <summary>
            Reference model object ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotConversionLink_t.ApprovalStatus">
            <summary>
            Approval status for conversion.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotConversionLink_t.ConversionStatus">
            <summary>
            Conversion status.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvHeader">
            <summary>
            Serialization structure for DstvHeader.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.Filename">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.ProjectNumber">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.PhaseNumber">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.PartMark">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.DrawingMark">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.Material">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.Quantity">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.Profile">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.ProfileType">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.NetLength">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.GrossLength">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.ProfileHeight">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.FlangeHeight">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.FlangeThickness">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.WebThickness">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.Radius">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.MeterWeight">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.FinishArea">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.WebAngleFront">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.WebAngleBack">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.FlangeAngleFront">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.FlangeAngleBack">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.InfoText1">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.InfoText2">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.InfoText3">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHeader.InfoText4">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvContourLine">
            <summary>
            Serialization structure for DstvContourLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.IsInitialized">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.IsBlockEnd">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.IsExternalContour">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Side">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.X">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Reference">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Y">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.NotchType">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Radius">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Angle1">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Offset1">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Angle2">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContourLine.Offset2">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvHoleLine">
            <summary>
            Serialization structure for DstvHoleLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.IsInitialized">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.IsBlockEnd">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Side">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.X">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Reference">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Y">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.HoleType">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Diameter">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Thickness">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.IsSlottedHole">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Width">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Height">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoleLine.Angle">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvBentLine">
            <summary>
            Serialization structure for DstvBentLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.IsInitialized">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.IsBlockEnd">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.StartX">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.StartY">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.EndX">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.EndY">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.Angle">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLine.Radius">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvMarkLine">
            <summary>
            Serialization structure for DstvMarkLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.IsInitialized">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.IsBlockEnd">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.IsPunch">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.Side">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.X">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.Reference">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.Y">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.Radius">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarkLine.HasNumeration">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvNumerationLine">
            <summary>
            Serialization structure for DstvNumerationLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.IsInitialized">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.IsBlockEnd">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.Side">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.X">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.Reference">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.Y">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.Angle">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.TextHeight">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerationLine.Text">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvContours">
            <summary>
            Serialization structure for DstvContours.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvContours.DstvContourLines">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvHoles">
            <summary>
            Serialization structure for DstvHoles.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvHoles.DstvHoleLines">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvBentLines">
            <summary>
            Serialization structure for DstvBentLines.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvBentLines.DstvBentLines">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvMarks">
            <summary>
            Serialization structure for DstvMarks.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvMarks.DstvMarkLines">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDstvNumerations">
            <summary>
            Serialization structure for DstvNumerations.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDstvNumerations.DstvNumerationLines">
            <summary> DO NOT USE! For internal usage only! </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo">
            <summary> The dstv bent line block information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo.#ctor">
            <summary> Creates a new DstvBendInfo instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo.FirstPoint">
            <summary> First point of the bent line. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo.SecondPoint">
            <summary> Second point of the bent line. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo.Angle">
            <summary> The angle of the bend. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvBendInfo.Radius">
            <summary> The radius of the bent. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvContour">
            <summary> The dstv contour block information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvContour.#ctor">
            <summary> Creates a new DstvContour instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContour.ContourType">
            <summary> Contour type: interval or external. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContour.ContourRows">
            <summary> The list with dstv contour points and their information. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvContourRow">
            <summary> The information about a dstv contour point. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.#ctor">
            <summary> Creates a new DstvContourRow instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.DstvView">
            <summary> The dstv view type: front, top, back or below </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.Position">
            <summary> The dstv contour point position. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.NotchType">
            <summary> The notch type. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.Radius">
            <summary> The radius. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.WeldPrepTop">
            <summary> The top weld preparation information. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvContourRow.WeldPrepBottom">
            <summary> The bottom weld preparation information. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvViewType">
            <summary> The dstv view type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvViewType.v">
            <summary> Front view </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvViewType.o">
            <summary> Top view </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvViewType.u">
            <summary> Bottom view </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvViewType.h">
            <summary> Behind view </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvViewType.CUSTOM_VIEW">
            <summary> Other types of view </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvReferenceType">
            <summary>
            Dimension reference type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvReferenceType.NO_VALUE">
            <summary> Same as previous reference </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvReferenceType.o">
            <summary> Top edge </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvReferenceType.s">
            <summary> Reference axis </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvReferenceType.u">
            <summary> Bottom edge </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvNotchType">
            <summary>
            Notch type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvNotchType.NO_VALUE">
            <summary> Other type </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvNotchType.t">
            <summary> Tangential </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvNotchType.w">
            <summary> Hole </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvContourType">
            <summary>
            Dstv contour type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvContourType.AK">
            <summary> External contour </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvContourType.IK">
            <summary> Internal contour </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvMarkType">
            <summary>
            Contour marking type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvMarkType.PU">
            <summary> Punch </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvMarkType.KO">
            <summary> Powder </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvHoleType">
            <summary>
            Hole type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvHoleType.NO_VALUE">
            <summary> Same as previous reference </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvHoleType.g">
            <summary> Thread </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvHoleType.l">
            <summary> Left threaded </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvHoleType.m">
            <summary> Mark, Trace </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.DstvHoleType.s">
            <summary> Counter </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvHeader">
            <summary> The dstv header information. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Filename">
            <summary> The filename. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.ProjectNumber">
            <summary> The project number. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.PhaseNumber">
            <summary> The phase number. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.PartMark">
            <summary> The part mark. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.DrawingMark">
            <summary> The drawing mark. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Material">
            <summary> The material. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Quantity">
            <summary> The quantity. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Profile">
            <summary> The profile. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.ProfileType">
            <summary> The Profile type. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.NetLength">
            <summary> The net length. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.GrossLength">
            <summary> The gross length. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.ProfileHeight">
            <summary> The profile height. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.FlangeHeight">
            <summary> The flange height. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.FlangeThickness">
            <summary> The flange thickness. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.WebThickness">
            <summary> The web thickness. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Radius">
            <summary> The radius. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.MeterWeight">
            <summary> The weight by meter. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.FinishArea">
            <summary> The painting surface by meter. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.WebAngleFront">
            <summary> The skew angle for web's front. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.WebAngleBack">
            <summary> The skew angle for web's back. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.FlangeAngleFront">
            <summary> The skew angle for flange's front. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.FlangeAngleBack">
            <summary> The skew angle for flange's back. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.InfoText1">
            <summary> The information text 1. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.InfoText2">
            <summary> The information text 2. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.InfoText3">
            <summary> The information text 3. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.InfoText4">
            <summary> The information text 4. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHeader.Comments">
            <summary> The list of comments. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvHole">
            <summary> The dstv bolt hole block information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvHole.#ctor">
            <summary> Creates a new DstvHole instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHole.HoleRows">
            <summary> The list with holes. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow">
            <summary> The dstv hole information </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.#ctor">
            <summary> Creates a new DstvHoleRow instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.DstvView">
            <summary> The dstv view type: front, top, back or below </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Position">
            <summary> The position of the hole. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.HoleType">
            <summary> The hole type. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Diameter">
            <summary> The diameter of the hole. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Thickness">
            <summary> The thread in material value. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Slotted">
            <summary> True if slotted, otherwise false. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Width">
            <summary> The width of the slotted hole. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Height">
            <summary> The height. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvHoleRow.Angle">
            <summary> The angle. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvMark">
            <summary> The dstv contour marking block information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvMark.#ctor">
            <summary> Creates a new DstvMark instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMark.MarkType">
            <summary> The contour marking type. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMark.MarkRows">
            <summary> The list with contour marking points. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMark.HardStamp">
            <summary> The hardstamp information for the connecting part. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvMarkRow">
            <summary> The contour marking point information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvMarkRow.#ctor">
            <summary> Creates a new DstvMarkRow instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMarkRow.DstvView">
            <summary> The dstv view type: front, top, back or below </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMarkRow.Position">
            <summary> The contour marking point position. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvMarkRow.Radius">
            <summary> The radius. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvNumeration">
            <summary> The dstv numeration block information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.#ctor">
            <summary> Creates a new DstvNumeration instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.DstvView">
            <summary> The dstv view type: front, top, back or below </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.Position">
            <summary> The insertion point position. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.Angle">
            <summary> The angle. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.TextHeight">
            <summary> The height of the text. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvNumeration.Text">
            <summary> The text. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvPoint">
            <summary> The dstv point information. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvPoint.#ctor">
            <summary> Creates a new DstvPoint instance. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvPoint.X">
            <summary> The x coordinate value. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvPoint.Y">
            <summary> The y coordinate value. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvPoint.Reference">
            <summary> The dimension reference. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvStructure">
            <summary> The dstv class which contains all the dstv information about a part. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.Header">
            <summary> The dstv header. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.HeaderOrder">
            <summary> The order for dstv header . </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.Holes">
            <summary> The list with dstv hole blocks. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.Contours">
            <summary> The list with internal and external contour blocks. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.ContourMarks">
            <summary> The list with contour mark blocks </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.HardStamp">
            <summary> The hard stamp information. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.BentLines">
            <summary> The list with bent line blocks. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.Filename">
            <summary> The name of the file where the dstv output will be saved. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.FilePath">
            <summary> The path where to save the output file of the dstv. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.FileExtension">
            <summary> The file extension for dstv. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvStructure.Precision">
            <summary> The precision used to round the double values. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.#ctor">
            <summary> Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.Dstv.DstvStructure" /> class with default values. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.#ctor(Tekla.Structures.ModelInternal.Dstv.DstvStructure)">
            <summary> Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.Dstv.DstvStructure" /> class using another DstvStructure as an input. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteHeader(System.IO.StreamWriter@)">
            <summary> Used to write the header to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteContours(System.IO.StreamWriter@)">
            <summary> Used to write the contours to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteHardStamp(Tekla.Structures.ModelInternal.Dstv.DstvNumeration,System.IO.StreamWriter@)">
            <summary> Used to write the hardstamp to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteBentLines(System.IO.StreamWriter@)">
            <summary> Used to write the bent line information to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteBoltHoles(System.IO.StreamWriter@)">
            <summary> Used to write the holes to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteContourMarks(System.IO.StreamWriter@)">
            <summary> Used to write the contour marks to the NC file. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.DstvStructure.WriteOutput">
            <summary> Used to write the DstvStructure to the NC file. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.DstvWeldingPreparation">
            <summary> The dstv weld preparation information. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvWeldingPreparation.Angle">
            <summary> The angle. </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Dstv.DstvWeldingPreparation.Offset">
            <summary> The offset. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.HeaderFields">
            <summary> The header fields available in Dstv. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Filename">
            <summary> The filename. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.ProjectNumber">
            <summary> The project number. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.PhaseNumber">
            <summary> The phase number. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.PartMark">
            <summary> The part mark. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.DrawingMark">
            <summary> The drawing mark. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Material">
            <summary> The material. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Quantity">
            <summary> The quantity. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Profile">
            <summary> The profile. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.ProfileType">
            <summary> The Profile type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.NetLength">
            <summary> The net length. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.GrossLength">
            <summary> The gross length. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.ProfileHeight">
            <summary> The profile height. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.FlangeHeight">
            <summary> The flange height. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.FlangeThickness">
            <summary> The flange thickness. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.WebThickness">
            <summary> The web thickness. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Radius">
            <summary> The radius. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.MeterWeight">
            <summary> The weight by meter. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.FinishArea">
            <summary> The painting surface by meter. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.WebAngleFront">
            <summary> The skew angle for web's front. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.WebAngleBack">
            <summary> The skew angle for web's back. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.FlangeAngleFront">
            <summary> The skew angle for flange's front. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.FlangeAngleBack">
            <summary> The skew angle for flange's back. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.InfoText1">
            <summary> The information text 1. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.InfoText2">
            <summary> The information text 2. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.InfoText3">
            <summary> The information text 3. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.InfoText4">
            <summary> The information text 4. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderFields.Comments">
            <summary> The list of comments. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderFields.IsValid(System.String)">
            <summary> Checks if the field name is a valid dstv header field. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderFields.ApplyPrecision(System.String)">
            <summary> Check if the header field needs precision when is formatted. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.HeaderOrder">
            <summary> 
            The class used to define the order for Dstv Header using HeaderFields. 
            If the header is not initialized, it will use the DSTV standard.
            </summary>
            <example>
            <code> 
            HeaderOrder headerOrder = new HeaderOrder();
            headerOrder.AddRow(new HeaderRow(HeaderFields.ProjectNumber));
            headerOrder.AddRow(new HeaderRow(HeaderFields.DrawingMark));
            headerOrder.AddRow(new HeaderRow(HeaderFields.PhaseNumber));
            .
            .
            .
            headerOrder.AddRow(new HeaderRow(HeaderFields.InfoText4));
            
            DstvStructure myDstvStructure = new DstvStructure();
            myDstvStructure.HeaderOrder = headerOrder;
            
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.#ctor">
            <summary> Creates a new HeaderOrder instance. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.#ctor(System.Collections.Generic.List{Tekla.Structures.ModelInternal.Dstv.HeaderRow})">
            <summary> Creates a new HeaderOrder instance using a list of rows as input. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.AddRow(Tekla.Structures.ModelInternal.Dstv.HeaderRow)">
            <summary> Adds the row to the header order list. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.DeleteRow(Tekla.Structures.ModelInternal.Dstv.HeaderRow)">
            <summary> Deletes the row from the header order list. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.DeleteAt(System.Int32)">
            <summary> Deletes a row from the header order list at a specified index. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderOrder.GetRows">
            <summary> Returns the header order list. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Dstv.HeaderRow">
            <summary> The class used to create a row in header order list. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Dstv.HeaderRow.Items">
            <summary> The list of items. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.#ctor">
            <summary> Creates a new HeaderRow instance. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.#ctor(System.String)">
            <summary> Creates a new HeaderRow instance using an item as input. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.#ctor(System.Collections.Generic.List{System.String})">
            <summary> Creates a new HeaderRow instance using a list of items as input. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.AddItem(System.String)">
            <summary> Adds an item to the header row. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.Add(System.Collections.Generic.List{System.String})">
            <summary> Adds a list of items to the header row. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.Add(System.String[])">
            <summary> Adds an array of items to the header row. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.HeaderRow.GetRowItems">
            <summary> Returns the list of items from the header row. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.ObjectExtension.ToDstvString(Tekla.Structures.ModelInternal.Dstv.DstvViewType)">
            <summary> Returns the dstv string value for DstvViewType. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.ObjectExtension.ToDstvString(Tekla.Structures.ModelInternal.Dstv.DstvReferenceType)">
            <summary> Returns the dstv string value for DstvReferenceType. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.ObjectExtension.ToDstvString(Tekla.Structures.ModelInternal.Dstv.DstvNotchType)">
            <summary> Returns the dstv string value for DstvNotchType. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Dstv.ObjectExtension.ToDstvString(Tekla.Structures.ModelInternal.Dstv.DstvHoleType)">
            <summary> Returns the dstv string value for DstvHoleType. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotContour_t">
            <summary>
            Serialization structure for Contour
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.nContourPoints">
            <summary>
            How many ContourPoints the Contour has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aX">
            <summary>
            Array that contains the X coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aY">
            <summary>
            Array that contains the Y coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aZ">
            <summary>
            Array that contains the Z coordinates for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferType">
            <summary>
            Array that contains the Chamfer Types for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferX">
            <summary>
            Array that contains the Chamfer X-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferY">
            <summary>
            Array that contains the Chamfer Y-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferDZ1">
            <summary>
            Array that contains the Chamfer DZ1-Values for the ContourPoints
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContour_t.aChamferDZ2">
            <summary>
            Array that contains the Chamfer DZ2-Values for the ContourPoints
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotContour_t.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Size">How big we wish the struct to be</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotContourPoint_t">
            <summary>
            Struct for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContourPoint_t.Point">
            <summary>
            The point for the ContourPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotContourPoint_t.Chamfer">
            <summary>
            The Chamfer for the ContourPoint
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GeometryTree">
            <summary>
            The GeometryTree class represents the geometry tree object has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryTree.InvalidGeometryNodeId">
            <summary>
            An invalid geometry node id. This value is used e.g. as the parent index for the root node.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.#ctor(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Initializes a new instance of the GeometryTree class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryTree.Root">
            <summary>
            Gets or sets this geometry root.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryTree.NodesById">
            <summary>
            Gets the list of nodes indexes in this geometry and the corresponding nodes
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryTree.Edges">
            <summary>
            Gets for a given node whose index is the key the indexes of the nodes which are its children in the Geometry
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryTree.NodesId">
            <summary>
            Gets or sets the list of nodes and their corresponding index.
            Provided for convenience - Do not expose to prevent inconsistency with NodesById!
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryTree.NodeIdToParentId">
            <summary>
            Gets or sets the parent index in this geometry of the corresponding node.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryTree._NodesById">
            <summary>the list of nodes indexes in this geometry and the corresponding nodes</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryTree._NodesId">
            <summary>the list of nodes and their corresponding index</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.Clone">
            <summary>
            Creates a copy of this GeometryTree. Edges are new objects but Nodes are shared with the initial GeometryTree.
            </summary>
            <returns>A copy of this</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetNodeId(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Find the index associated to a given node.
            </summary>
            <param name="node">the node whose index is queried</param>
            <returns>the node index in case of success, -1 in case of failure</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetNodeByIndex(System.Int32)">
            <summary>
            Returns geometry node by geometry index.
            </summary>
            <param name="index">the geometry node index</param>
            <returns>geometry node or null if provided index is invalid</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.AddNode(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Adds a geometry primitive node to this GeometryTree.
            </summary>
            <param name="node">The geometry primitive node to add.</param>
            <returns>index of the added node (root index is 0), or existing index if the node is already in this GeometryTree</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.AddEdge(Tekla.Structures.Model.IGeometryNode,Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Adds a connection between two geometry nodes in this GeometryTree.
            If needed, the nodes are first added to this GeometryTree.
            </summary>
            <param name="from">the source node</param>
            <param name="to">the connected node</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds a connection between geometry primitives of this GeometryTree
            </summary>
            <param name="fromIndex">Index of source primitive</param>
            <param name="toIndex">Index of connected primitive</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.RemoveEdge(Tekla.Structures.Model.IGeometryNode,Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Removes a connection between two geometry primitives of this GeometryTree
            </summary>
            <param name="from">the source node</param>
            <param name="to">the connected node</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.RemoveEdge(System.Int32,System.Int32)">
            <summary>
            Removes a connection between geometry primitives of this GeometryTree
            </summary>
            <param name="fromIndex">Index of source primitive</param>
            <param name="toIndex">Index of connected primitive</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetBranch(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Creates a new GeometryTree that is formed by the branch in this instance that starts at node.
            </summary>
            <param name="node">the root of the branch</param>
            <returns>the branch in a new GeometryTree</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.AddBranch(Tekla.Structures.ModelInternal.GeometryTree,Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Adds to this GeometryTree the branch in branchSource that starts at branchRoot, who should be in both this and branchSource.
            </summary>
            <param name="branchSource">Source of the branch to add</param>
            <param name="branchRoot">Node in branchSource that is the root of the branch to add</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.RemoveBranch(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Removes the branch whose root is branchRoot.
            </summary>
            <param name="branchRoot">Root of the branch to remove</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.IsValidId(System.Int32)">
            <summary>
            Returns true if index is a valid node index.
            </summary>
            <param name="index">the node index</param>
            <returns>true if the index is a valid node index</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetChildren(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Retrieves the list of nodes which are directly connected to a given node
            </summary>
            <param name="node">the source of connections</param>
            <returns>The list of nodes towards which there is an edge from node in the geometry</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetParentNode(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Gets the parent node of node in the geometry tree.
            </summary>
            <param name="node">the node whose parent is queried</param>
            <returns>the parent node of node in the tree, or null if node has no parent</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.Split(System.Int32)">
            <summary>
            Returns the resulting disconnected geometries when removing from this geometry a node (of any type) and related automatic nodes.
            </summary>
            <param name="nodeIndex">Index of the node to remove.</param>
            <returns>The resulting geometries once the node and related automatic nodes are removed.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the supplied nodeIndex is invalid.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.IsTransitivelyConnectedTo(System.Int32,System.Int32)">
            <summary>
            Searches for a connected path between two nodes.
            </summary>
            <param name="fromIndex">index of source node</param>
            <param name="toIndex">index of destination node</param>
            <returns>true if there is a connected path from fromIndex node to toIndex node, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetGeometryTreeLeafSections">
            <summary>
            Gets end GeometrySections of the geometry which are possible to remove.
            </summary>
            <returns>Returns list of leaf GeometrySections possible to remove.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.IsValidLeafToRemove(Tekla.Structures.Model.GeometrySection)">
            <summary>
            Returns true if its possible to remove geometrySection from geometry.
            </summary>
            <param name="geometrySection">GeometrySection to remove.</param>
            <returns>True if its possible to remove, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.IsUserDefinedPolygonNode(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Returns whether node is a user defined polygon node
            </summary>
            <param name="node">the queried node</param>
            <returns>true if node is a user defined polygon node</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.RemoveNode(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Removes node from the geometry.
            </summary>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.RemoveNode(System.Int32)">
            <summary>
            Removes node from the geometry.
            </summary>
            <param name="nodeId">Node id to remove.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.FindFirstUserPolygonsChildren(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Returns the first user-defined polygon node that is found in each branch when traversing the tree down from node,
            ignoring node if it's a user-defined polygon itself
            </summary>
            <param name="node">the node where to start searching for user defined polygon node(s)</param>
            <returns>the user-defined polygon node or nodes if several branches were found</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.FindBendNodeConnection(Tekla.Structures.Model.IGeometryNode,Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Finds common line segments between bend surface node and polygon node.
            </summary>
            <param name="node1">The first node is BendSurfaceNode.</param>
            <param name="node2">The second node is PolygonNode.</param>
            <returns>Line segments connecting bend and polygon nodes.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.findPolygonNodeConnection(Tekla.Structures.Model.PolygonNode,Tekla.Structures.Model.PolygonNode)">
            <summary>
            Finds common side boundaries between 2 polygon nodes.
            </summary>
            <param name="node1">The first node.</param>
            <param name="node2">The second node.</param>
            <returns>Line segments connecting both polygon nodes.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetNeighborSections(System.Int32)">
            <summary>
            Gets neighbor sections of the node with nodeIndex index.
            </summary>
            <param name="nodeIndex">Index of the node used to get its neighbors.</param>
            <returns>List of neighbor geometry sections of the given node index.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryTree.GetConnection(System.Int32,System.Int32)">
            <summary>
            Returns 2 connecting line segments between node1Index and node2Index indexes, if nodes are connected, otherwise returns empty list.
            </summary>
            <param name="node1Index">The first node index.</param>
            <param name="node2Index">The second node index.</param>
            <returns>2 connecting line segments if nodes are connected, otherwise returns empty list.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPlane_t">
            <summary>
            Serialization structure for Plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.Origin">
            <summary>
            Origin of the plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.AxisX">
            <summary>
            The x-axis of the plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPlane_t.AxisY">
            <summary>
            The y-axis of the plane.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolygon_t">
            <summary>
            Serialization structure for Polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.nPoints">
            <summary>
            Number of cornerpoints in polygon.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolygon_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotPolygon_t.#ctor(System.Int32)">
            <summary>
            Instantiates a polygon structure with given arguments.
            </summary>
            <param name="Size">Number of points in polygon.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotPolygon_t.GetPoints">
            <summary>
            Get polygon points in ArrayList.
            </summary>
            <returns>ArrayList of polygon Points</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PolygonExtensions">
            <summary>
            The <see cref="T:Tekla.Structures.ModelInternal.PolygonExtensions"/> class provides a set of Tekla-internal extension methods
            for <see cref="T:Tekla.Structures.Model.Polygon"/> related types.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolygonExtensions.ToPolygon(Tekla.Structures.ModelInternal.dotPolygon_t)">
            <summary>
            Converts the <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value to a <see cref="T:Tekla.Structures.Model.Polygon"/> instance.
            </summary>
            <param name="dotPolygon">The <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value to convert.</param>
            <returns>The converted <see cref="T:Tekla.Structures.Model.Polygon"/> instance.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolygonExtensions.ToDotPolygon(Tekla.Structures.Model.Polygon)">
            <summary>
            Converts the given <see cref="T:Tekla.Structures.Model.Polygon"/> instance to a value of <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the instance to convert from is null.</exception>
            <param name="polygon">The <see cref="T:Tekla.Structures.Model.Polygon"/> to convert.</param>
            <returns>The converted <see cref="T:Tekla.Structures.ModelInternal.dotPolygon_t"/> value.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t">
            <summary>
            Struct for the result of validating polymesh
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t.nInvalidFaces">
            <summary>
            Number of invalid faces
            Indicates the amount of face indices and error codes in the integer list
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t.ClientId">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.SpiralNode">
            <summary>
            The SpiralNode class represents a spiral surface node in geometry tree.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SpiralNode.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the SpiralNode class.
            </summary>
            <param name="startPoint">The starting point of the spiral.</param>
            <param name="rotationAxisBasePoint">The first definition point of the spiral rotation axis.</param>
            <param name="rotationAxisUpPoint">The second definition point of the spiral rotation axis.</param>
            <param name="totalRise">Difference in rotation axis direction between the start and end point of the spiral.</param>
            <param name="rotationAngle">Rotation angle of the spiral, in degrees.</param>
            <param name="twistAngleStart">Twist angle angle at the spiral start, in degrees.</param>
            <param name="twistAngleEnd">Twist angle at the spiral end, in degrees.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SpiralNode.#ctor(Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the SpiralNode class.
            </summary>
            <param name="rotationAxisPoint">A point on the spiral rotation axis.</param>
            <param name="startPoint">The starting point of the spiral.</param>
            <param name="rotationAxis">The rotation axis of the spiral.</param>
            <param name="totalRise">Difference in <paramref name="rotationAxis"/> direction between the start and end point of the spiral.</param>
            <param name="rotationAngle">Rotation angle of the spiral, in degrees.</param>
            <param name="twistAngleStart">Twist angle angle at the spiral start, in degrees.</param>
            <param name="twistAngleEnd">Twist angle at the spiral end, in degrees.</param>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.IsAutomatic">
            <summary>
            Gets a value indicating whether this geometry node was automatically generated (returns false if it was originally a user-defined part)
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.CenterPoint">
            <summary>
            Gets the center point of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.StartPoint">
            <summary>
            Gets the starting point of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.RotationAxisBasePoint">
            <summary>
            Gets the first user-defined point on the rotation axis of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.RotationAxisUpPoint">
            <summary>
            Gets the second user-defined point on the rotation axis of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.RotationAxis">
            <summary>
            Gets the rotation axis direction of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.Radius">
            <summary>
            Gets the radius of the spiral geometry node.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.TotalRise">
            <summary>
            Gets the difference between the spiral start and end points in the rotation axis direction.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.RotationAngle">
            <summary>
            Gets the cumulative rotation angle of the spiral node, in degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.TwistAngleStart">
            <summary>
            Gets the twist angle at the helix start, in degrees.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.SpiralNode.TwistAngleEnd">
            <summary>
            Gets the twist angle at the helix end, in degrees.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SpiralNode.AcceptVisitor(Tekla.Structures.Model.IGeometryNodeVisitor)">
            <summary>
            Entry method for the visitor pattern.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SpiralNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of the current instance.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTransformationPlane_t">
            <summary>
            Serialization structure for Plane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.MatrixToLocal">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.MatrixToGlobal">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTransformationPlane_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTransformationPlane_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotControlObject_t">
            <summary>
            Struct for the ControlPlane.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Plane">
            <summary>
            The Plane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Color">
            <summary>
            The Color
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.IsMagnetic">
            <summary>
            Determines if the Plane is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.Extension">
            <summary>
            The line extension
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.aName">
            <summary>
            The Name of the ControlPlane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotControlObject_t.LineType">
            <summary>
            The line type
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolycurvePoint_t">
            <summary>
            Struct for the serialized polycurve point type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolycurvePoint_t.Point">
            <summary>
            Point on the polycurve
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolycurvePoint_t.Type">
            <summary>
            Type of the point. Must be in the range of <see cref="T:Tekla.Structures.ModelInternal.PolycurveSerialization.SerializedPointType"/>
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PolycurveSerialization">
            <summary>
            This class contains methods to serialize/deserialize polycurves
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PolycurveSerialization.SerializedPointType">
            <summary>
            Enumeration to indicate the point type in the serialized point list. Must be in sync with
            the enum dotControlPolycurvePointType_e in Core side.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.DeserializeGeometries(System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotPolycurvePoint_t})">
            <summary>
            Deserializes the geometry list from core
            </summary>
            <param name="pointList">Serialized point list from Core</param>
            <returns>Deserialized curve list</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.SerializeGeometries(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Serializes the points of the polycurve to transmit them to Core
            </summary>
            <returns>Serialized points with tags</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.DeserializeOneGeometry(System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotPolycurvePoint_t},System.Int32)">
            <summary>
            Gets the geometry that corresponds to the points in the serialized point list
            </summary>
            <param name="geometryPoints">Points of the geometry</param>
            <param name="index">Index where geometry starts</param>
            <returns>Geometry primitive</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.ToPolycurvePoint(Tekla.Structures.Geometry3d.Point,Tekla.Structures.ModelInternal.PolycurveSerialization.SerializedPointType)">
            <summary>
            Converts a point into a dotPolycurvePoint_t with the correct point type
            </summary>
            <param name="point">Point to convert</param>
            <param name="pointType">Type of the point</param>
            <returns>Converted point with the correct tag</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.ToNewPointType(Tekla.Structures.ModelInternal.dotPolycurvePoint_t,Tekla.Structures.ModelInternal.PolycurveSerialization.SerializedPointType)">
            <summary>
            Converts a dotPolycurvePoint_t to another dotPolycurvePoint_t with a different tag
            </summary>
            <param name="dotPoint">Point whose tag will be changed</param>
            <param name="newType">New tag</param>
            <returns>New tagged point</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.AppendLinePoints(Tekla.Structures.Geometry3d.LineSegment,System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotPolycurvePoint_t})">
            <summary>
            Appends the points of a line segment geometry to the serialized point list
            </summary>
            <param name="segment">Line geometry</param>
            <param name="pointList">List where to append</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.AppendArcPoints(Tekla.Structures.Geometry3d.Arc,System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotPolycurvePoint_t})">
            <summary>
            Appends the points of an arc geometry to the serialized point list
            </summary>
            <param name="arc">Arc geometry</param>
            <param name="pointList">List where to append</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.GetCirclePoint(Tekla.Structures.Geometry3d.Arc,System.Double)">
            <summary>
            Gets the point of the given circle at the given angle
            </summary>
            <param name="circle">Input circle</param>
            <param name="angle">Input angle</param>
            <returns>Point on the circle at the given angle</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PolycurveSerialization.AppendCirclePoints(Tekla.Structures.Geometry3d.Arc,System.Collections.Generic.IList{Tekla.Structures.ModelInternal.dotPolycurvePoint_t})">
            <summary>
            Appends the points of a circle geometry to the serialized point list
            </summary>
            <param name="circle">Circle geometry</param>
            <param name="pointList">List where to append</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ControlSpline">
            <summary>
            The ControlSpline class defines a user defined spline helping in modeling work.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ControlSpline.InconsistentSplineMessage">
            <summary>
            Message that will be given as a descriptor of the exceptions thrown by this object
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.#ctor">
            <summary>
            Creates a new empty control spline instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.#ctor(System.Collections.Generic.IEnumerable{Tekla.Structures.Geometry3d.Point},System.Collections.Generic.IEnumerable{Tekla.Structures.Geometry3d.Vector})">
            <summary>
            Creates a new control spline instance with the given images and slopes. The slope list may be empty.
            </summary>
            <param name="imagePoints">Collection of points to fit the spline to</param>
            <param name="slopes">Collection of slopes to be applied at the image points. Must have the same size
            as the point collection or be empty (which applies the default slopes)</param>
            <exception cref="T:System.ArgumentException">Throws when the slopes are inconsistent with the amount of points</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.#ctor(System.Collections.Generic.IEnumerable{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Creates a new control spline instance with the given images and default slopes.
            </summary>
            <param name="imagePoints">Collection of points to fit the spline to</param>
            <exception cref="T:System.ArgumentException">Throws when the slopes are inconsistent with the amount of points</exception>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ControlSpline.Color">
            <summary>
            Gets or sets color of the control spline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ControlSpline.LineType">
            <summary>
            Gets or sets the line type of the control spline.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ControlSpline.ImagePoints">
            <summary>
            Gets or sets the image points of the spline (i.e. the points picked by the user)
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.ControlSpline.Slopes">
            <summary>
            Gets or sets the slopes at the corresponding image points. If empty, they will be automatically computed upon insertion.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.Delete">
            <summary>
            Deletes the control spline with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.Insert">
            <summary>
            Inserts the control spline into the model.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.Modify">
            <summary>
            Modifies the control spline with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.Select">
            <summary>
            Selects the control spline with the given Identifier.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.ToStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from dotNet to core.
            </summary>
            <param name="SplineStruct">Struct containing the spline data</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.FromStruct(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            Method for object conversion from core to dotNet.
            </summary>
            <param name="SplineStruct">Struct containing the spline data</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.CreateInstance">
            <summary>
            Method for creation of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.SelectInstance">
            <summary>
            Method for selection of the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.ModifyInstance">
            <summary>
            Method for modifying the object.
            </summary>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ControlSpline.IsSplineConsistent">
            <summary>
            Checks whether or not the amount of slopes given is consistent with the number of points, and whether
            there are points in the spline
            </summary>
            <returns>True if the spline is consistent, false otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGrid_t">
            <summary>
            Struct for the Grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateX">
            <summary>
            Coordinates for the X-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateY">
            <summary>
            Coordinates for the Y-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aCoordinateZ">
            <summary>
            Coordinates for the Z-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelX">
            <summary>
            Labels for the X-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelY">
            <summary>
            Labels for the Y-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.aLabelZ">
            <summary>
            Labels for the Z-axes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftX">
            <summary>
            Extension to left X-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftY">
            <summary>
            Extension to left Y-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionLeftZ">
            <summary>
            Extension to left Z-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightX">
            <summary>
            Extension to right X-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightY">
            <summary>
            Extension to right Y-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionRightZ">
            <summary>
            Extension to right Z-axis
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.IsMagnetic">
            <summary>
            Determines if the Grid is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.ExtensionForMagneticArea">
            <summary>
            Extension for magnetic area
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.Color">
            <summary>
            Determines the Color of the Grid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.FontSize">
            <summary>
            Font size of the labels
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.FontColor">
            <summary>
            Font color of the labels
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGrid_t.Origin">
            <summary>
            Origin of the grid
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GridSurfaceExtensions">
            <summary>
            Contains extension methods that are intended for internal use
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GridSurfaceExtensions.SetIsManual(Tekla.Structures.Model.GridSurface,System.Boolean)">
            <summary>
            Sets the flag that indicates whether the grid surface is manual
            </summary>
            <param name="surface">Surface to set the value to</param>
            <param name="value">Value to be set</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGridPlane_t">
            <summary>
            Struct for the GridSurface
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Plane">
            <summary>
            The plane
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.FatherId">
            <summary>
            ID of the father grid
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.aLabel">
            <summary>
            The Label of the GridSurface
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Color">
            <summary>
            Determines the Color of the GridSurface. This works only in wireframe views.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.IsMagnetic">
            <summary>
            Determines if the Plane is Magnetic or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionForMagneticArea">
            <summary>
            Extension for magnetic area
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionLeft">
            <summary>
            Line extension left
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionRight">
            <summary>
            Line extension right
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionBelow">
            <summary>
            Line extension below
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.ExtensionAbove">
            <summary>
            Line extension above
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Radius">
            <summary>
            Radius of the cylindrical surface
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.Angle">
            <summary>
            Angle subtended by the cylindrical section
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.DrawingVisibility">
            <summary>
            Determines if the GridSurface is visible in drawings or not
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGridPlane_t.IsManual">
            <summary>
            Determines if the plane was manually created.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t">
            <summary>
            Serialization structure for hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.OperationType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aName">
            <summary>
            Name of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aCustomType">
            <summary>
            Custom type of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aHierarchyIdentifier">
            <summary>
            Guid of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.HierarchyType">
            <summary>
            Definition type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.Drawable">
            <summary>
            Defines if the definition is a drawable area in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.ObjectParent">
            <summary>
            Id of the Father object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.nSubHierarchyIds">
            <summary>
            How many objects the hierarchical definition has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicDefinition_t.aSubHierarchyIds">
            <summary>
            Array that contains object ids of the hierarchical definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicObject_t">
            <summary>
            Serialization structure for hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.OperationType">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.aName">
            <summary>
            Name of the hierarchical definition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Type">
            <summary>
            Type of the hierarchical object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Definition">
            <summary>
            The hierarchical definition that this object is an instance of.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.Parent">
            <summary>
            Id of the Father object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.nSubHierarchyIds">
            <summary>
            How many objects the hierarchical definition has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicObject_t.aSubHierarchyIds">
            <summary>
            Array that contains object ids of the hierarchical definition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotHierarchicList_t">
            <summary>
            Serialization structure for adding and removing relations between model objects and hierarchic objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.ModelFatherObject">
            <summary>
            The father (hierarchic) object of this operation
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.OperationType">
            <summary>
            Defines if this is an add or delete operation
            <seealso cref="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum"/>
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.ObjectsLeftToGet">
            <summary>
            How many objects left to get on next command
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.nObjects">
            <summary>
            Number of objects in this struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotHierarchicList_t.aObjects">
            <summary>
            Object ids
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotObjectOperationsEnum">
            <summary>
            Defines operations done on Tekla Structures core side
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_CREATE_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_MODIFY_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_SELECT_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObjectOperationsEnum.DOT_DELETE_OBJECT">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModStampCompare_t">
            <summary>
            Struct for the modstamp comparison
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.Type">
            <summary>Comparison type</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.ObjectGuid">
            <summary>The object Guid (used when type is OBJECT_MOD)</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.ModStamp">
            <summary>The ModStamp</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum">
            <summary>Modstamp comparison type</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.OBJECT_MOD">
            <summary>Compare object mod (ObjectGuid used)</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.MODEL_OPTIONS_MOD">
            <summary>Compare model options mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.DRAWING_OPTIONS_MOD">
            <summary>Compare drawing options mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.MATERIAL_CATALOG_MOD">
            <summary>Compare material catalog mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.PROFILE_CATALOG_MOD">
            <summary>Compare profile catalog mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.CUSTOM_PROPERTIES_MOD">
            <summary>Compare custom properties mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.BOLT_CATALOG_MOD">
            <summary>Compare bolt catalog mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.BOLT_ASSEMBLY_CATALOG_MOD">
            <summary>Compare bolt assemlby catalog mod</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStampCompare_t.TypeEnum.DRAWINGS_MOD">
            <summary>Compare bolt assemlby catalog mod</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModificationStamp_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModificationStamp_t.CurrentModStamp">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModificationStamp_t.CurrentSaveStamp">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotModificationStamp_t.ToStruct(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="I"></param>
            <param name="S"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotModificationStamp_t.FromStruct(Tekla.Structures.Model.History.ModificationStamp)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="I"></param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ExternalDraw">
            <summary>
            External draw
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDraw.MODEL2_SCHEMA">
            <summary>
            Model2 schema (the only schema which can be used now).
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.DrawObject(System.Guid,System.String,Tekla.Structures.Model.UI.Color,System.Int32)">
            <summary>
            Draw object.
            </summary>
            <param name="modelObjectGuid">The model object GUID.</param>
            <param name="schema">
            The schema. MODEL2_SCHEMA is the only option currently and Model2 needs be loaded before drawing.
            DrawObject need NOT to be done within Operation.Model2.
            </param>
            <param name="color">The color for the object.</param>
            <param name="viewId">The view ID (0 if current view).</param>
            <returns>The external draw identifier of the object.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.RemoveObject(System.Guid)">
            <summary>
            Remove object from all views.
            </summary>
            <param name="guid">The external draw identifier of the object.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.RemoveSchemaObjects(System.String)">
            <summary>
            Removes all schema objects from all views.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.GetGuidByModelObjectGuid(System.Guid,System.String)">
            <summary>
            Get the external draw identifier of the object.
            </summary>
            <param name="modelObjectGuid">The model object GUID.</param>
            <param name="schema">The schema. MODEL2_SCHEMA is the only option currently.</param>
            <returns>The external draw identifier of the object, empty guid if failed.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.UiSelect(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="guids">The external draw identifiers.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ExternalDraw.GetReturnedGuid(Tekla.Structures.ModelInternal.dotExternalDrawOperation_t)">
            <summary>
            Get the guid from operation struct.
            </summary>
            <param name="operation">The operation struct.</param>
            <returns>The guid from operation struct.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum">
            <summary>ExternalDraw operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum.DRAW_OBJECT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum.REMOVE_OBJECT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum.REMOVE_SCHEMA_OBJECTS">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum.GET_GUID_BY_MODELOBJECT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.ExternalDrawOperationEnum.UI_SELECT">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.aGUID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.aSchema">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.ModelObjectId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.Color">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.ViewId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalDrawOperation_t.Success">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.HistoryItem">
            <summary>Stores info about history change.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Id">
            <summary>Object identifier. Must be unique.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Guid">
            <summary>ModelObject guid, if applicable.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Action">
            <summary>What happened to the object.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Name">
            <summary>Object name.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Type">
            <summary>Object type.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.User">
            <summary>User who changed last.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.InternalName">
            <summary>Internal name for some tabs (UDA)</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.DrawingMark">
            <summary>For drawings: drawing mark</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.ObjectInstance">
            <summary>For access to model object</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.HistoryItem.Time">
            <summary>
            The time when change was made.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotManipulateObject_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Identifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Identifier2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Result">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.ManipulationType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Point3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint1">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint2">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.EndPoint3">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.Polygon">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotManipulateObject_t.ClientID">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.NumberingQueryModeEnum">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.NumberingQueryModeEnum.SINGLE_ID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.NumberingQueryModeEnum.ALL_PARTS_REBARS_ASSEMBLIES">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotNumberingQuery_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingQuery_t.QueryMode">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingQuery_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUseTql_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUseTql_t.TqlQueryString">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUseTql_t.TqlResult">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aNCFileSettingsName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.CreatePopMarks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aPopMarkSettingsName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.CreateContourMarking">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aContourMarkingSettingsName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.ExportType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aFileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.aDestinationFolderName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.FileOutput">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.PartId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateNCFromModel_t.SkipCreateFile">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.aFileAndPath">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.aBasePointGuid">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.OriginX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.OriginY">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.OriginZ">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisXX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisXY">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisXZ">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisYX">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisYY">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.AxisYZ">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.Scale">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModel_t.ClientID">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.OnlySelected">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.aModelName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.aFileFullName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.aFilterName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.ViewType">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.UseTimer">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.CreateReport">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.BasePoint">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.ExportLayersAs">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.ObjectColoring">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.IsFlatBeamsAsPlates">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.IsLocationFromOrganizer">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.IsLocationFromBuildingHierarchy">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.IsPoursEnabled">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.ExportRebarSetGroupAsIndividualBars">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.BasePointGuid">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.ClientID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t.Result">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.OnlySelected">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.UpdateSelected">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.aFileName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.aFolder">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.BasePoint">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.BasePointGuid">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.ClientID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.Result">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.ExportObjectsPassed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.ExportObjectsFailed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t.UserName">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.OnlySelected">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.aFileName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.aFolder">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.BasePoint">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.BasePointGuid">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.ObjectColoring">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.ExportLayersAs">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.ClientID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.Result">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.ExportObjectsPassed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.ExportObjectsFailed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t.UserName">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.OnlySelected">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.aFileName">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.aFolder">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.BasePoint">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.BasePointGuid">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.ObjectColoring">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.ExportLayersAs">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.ClientID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.Result">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.ExportObjectsPassed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.ExportObjectsFailed">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t.UserName">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGetAttributeFiles_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetAttributeFiles_t.Prefix">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetAttributeFiles_t.Suffix">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetAttributeFiles_t.ClientId">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t.Prefix">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t.Suffix">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t.SubDirectory">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation">
            <summary>
            Internal operations
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.OperationsMaxMessageLength">
            <summary>
            The operations max message length.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum">
            <summary>Save operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.SAVE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.SAVEAS_WITH_PATH">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.AUTOSAVE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SaveOperationEnum.QUIT_PROGRAM_WITHOUT_SAVE">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.UndoOperationEnum">
            <summary>Undo operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.UndoOperationEnum.UNDO">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.UndoOperationEnum.REDO">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.UndoOperationEnum.CLEAR_UNDO_LOG">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.Model2OperationEnum">
            <summary>Model2 operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.Model2OperationEnum.LOAD_UNLOAD_MODEL2">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.Model2OperationEnum.SET_UNSET_MODEL2">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum">
            <summary>Sharing operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.MAKE_MODEL_SHAREABLE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.WRITEOUT_PACKET">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.WRITEOUT_COMMIT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_STARTING">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_PACKET">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_COMMIT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.READIN_CHANGES">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.MODULE_BASELINES">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.UI_SET_MENU">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.SAVE_VERSION_GUID">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.GET_VERSION_GUID">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.GET_VERSION_PACKET">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_BASIC">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_INFORMATION">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_WARNING">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LOG_ERROR">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.COMMAND_RESULT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.REGISTER_MODELSHARING_PLUGIN">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.CREATE_STARTSHARING_BACKUP">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.RESTORE_STARTSHARING_BACKUP">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.IS_SHARING_ENABLED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.IS_MODEL_IMPORT_ENABLED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.LICENCE_INFO">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.SET_USER_MODEL_ROLE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.JOIN_OPEN_MODEL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.JOIN_FINISHED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.PUSH_MODULE_BASELINE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.START_SHARING_COMMIT">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.CHECK_READIN_FILE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.HISTORY_WRITE_LOCAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.IS_PRIVILEGES_INP_OWNER">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.RESTORE_PRIVILEGES_INP">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.SharingOperationEnum.GET_MODEL_LOCAL_HISTORY_FOLDER">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.DotSharingWriteOutModeEnum">
            <summary>Write out mode.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingWriteOutModeEnum.FIRST_FULL">
            <summary>First packet, always full.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingWriteOutModeEnum.FULL">
            <summary>Full packet (not first).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingWriteOutModeEnum.INCREMENTAL">
            <summary>Incremental packet.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum">
            <summary>Sharing operations.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.BASIC">
            <summary>Basic information (always added to log).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.INFORMATION">
            <summary>Optional information (added to log depending on user settings).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.WARNING">
            <summary>Warning (added to log depending on user settings).</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum.ERROR">
            <summary>Error (always added to log).</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum">
            <summary>Detailed error code for sharing operation</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.NO_ERROR">
            <summary>No error, operation completed successfully</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.DISK_FULL">
            <summary>Operation failed because of disk full error</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.FILE_BUSY">
            <summary>Operation failed because a file is busy</summary>
            dotSharingOperation_t.aErrorDetail should contain the file path
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.FILE_PATH_TOO_LONG">
            <summary>Operation failed because a file path is too long</summary>
            dotSharingOperation_t.aErrorDetail should contain the file path
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.FILE_COPY_ERROR">
            <summary>Operation failed because file copy failed</summary>
            dotSharingOperation_t.aErrorDetail should contain the file path
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.FOLDER_CREATION_ERROR">
            <summary>Operation failed because folder creation failed</summary>
            dotSharingOperation_t.aErrorDetail should contain the folder path
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.DATABASE_ERROR">
            <summary>Database integrity error detected during operation</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.UNKNOWN_ERROR">
            <summary>Operation failed, no specific error information available</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum.UNPERMITTED_WRITE_OUT_CHANGES">
            <summary>Unpermitted write out changes</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum">
            <summary>Sharing privilege.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.NONE">
            <summary>No privilege.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.VIEWER">
            <summary>Read privilege.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.EDITOR">
            <summary>Read and write privileges.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.OWNER">
            <summary>Read, write and owner privileges.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.NOT_AUTHORIZED">
            <summary>Sharing feature not enabled for current user.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum.PROJECT_VIEWER">
            <summary>Read and project viewer write privileges.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.MacroLocationEnum">
            <summary>
            The macro location.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.MacroLocationEnum.GLOBAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.MacroLocationEnum.LOCAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.MacroLocationEnum.ABSOLUTE">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.SetAdvancedOptionTypeEnum">
            <summary>
            Set advanced option type
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum">
            <summary>
            View configuration type for IFC export
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum.UNDEFINED">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum.REFERENCE_VIEW">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum.DESIGN_TRANSFER_VIEW">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum.PRECAST_VIEW">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.ExportBasePoint">
            <summary>
            Export base point
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.ExportBasePoint.GLOBAL">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.ExportBasePoint.WORK_PLANE">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.ExportBasePoint.BASE_POINT">
            <exclude />
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.dotBeamPositioningBox">
            <summary>
            Beam (section) positioning box.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.dotBeamPositioningBox.Height">
            <summary>
            Box height (section size in beam local Y)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.dotBeamPositioningBox.Width">
            <summary>
            Box width (section size in beam local Z)
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.IFCExportFlags">
            <summary>
            Boolean flags for IFC 4 export.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportFlags.IsFlatBeamsAsPlates">
            <summary>
            Export flat beams as plates.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportFlags.IsLocationFromOrganizer">
            <summary>
            Get locations from organizer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportFlags.IsLocationFromBuildingHierarchy">
            <summary>
            Get locations from Building Hierarchy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportFlags.IsPoursEnabled">
            <summary>
            Pours export is enabled.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.Operation.IFCExportFlags.ExportRebarSetGroupAsIndividualBars">
            <summary>
            Rebar set group individual bars export is enabled.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.Operation.RemotePrintingController">
            <summary>
            Gets or sets the remote printing controller.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ImportExternalReferenceModel(System.String,System.String,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Geometry3d.Point,System.Double)">
            <summary>
            Imports external reference model.
            </summary>
            <param name="fileAndPath">Full file name and path.</param>
            <param name="basePointGuid">The base point guid. Leave empty for location by model origin. Use 49C25886-7FA7-4F2E-84E1-84ED231A22B5 for auto-created base point.</param>
            <param name="origin">The origin.</param>
            <param name="axisX">The axis X.</param>
            <param name="axisY">The axis Y.</param>
            <param name="scale">The scale.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetImportedExternalReferenceModels">
            <summary>
            Gets the paths of the imported external reference models. The paths match with the paths
            given when model was imported using ImportExternalReferenceModel().
            </summary>
            <returns>The currently imported external reference models paths.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.RemoveExternalReferenceModels(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the given external reference models defined by the given full file names and paths.
            </summary>
            <param name="paths">The full file names and paths.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ShowExternalReferenceModels(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Sets the given external reference models visible.
            </summary>
            <param name="paths">The full file names and paths.</param>
            <param name="restrictToWorkArea">Boolean indicating whether the drawing shoudl be retricted to work area only.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.HideExternalReferenceModels(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the given external reference models hidden.
            </summary>
            <param name="paths">The full file names and paths.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetExternalReferenceModelObjectVisibilities(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Sets the given external reference model objects visibilities. For all objects, give null/empty container.
            </summary>
            <param name="path">The full file name and path of the model.</param>
            <param name="objectGuids">The object guids to be hidden. If null/empty container given, all objects are affected.</param>
            <param name="isVisible">True for visible, false for hidden.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ZoomToExternalReferenceModel(System.String)">
            <summary>
            Zooms to the external reference models area.
            </summary>
            <param name="path">The full file name and path.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ZoomViewToExternalReferenceModel(System.String,Tekla.Structures.Model.UI.View)">
            <summary>
            Zooms a view to the external reference models area.
            </summary>
            <param name="path">The full file name and path.</param>
            <param name="view">The view to zoom.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetSelectedExternalReferenceModel(System.String)">
            <summary>
            Set external reference model as selected in model views.
            </summary>
            <param name="path">The full file name and path.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelLayers(System.String)">
            <summary>
            Get external reference model layers.
            </summary>
            <param name="path">The full file name and path of the external reference model.</param>
            <returns>The layers.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetExternalReferenceModelLayerVisibilities(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.ModelInternal.dotExternalReferenceModelLayer_t})">
            <summary>
            Sets the external reference model layer visibilities.
            </summary>
            <param name="path">The full file name and path of the external reference model.</param>
            <param name="layers">The layers with new visibilities.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetExternalReferenceModelLayerVisibility(System.String,System.Int32,Tekla.Structures.Model.ReferenceModel.VisibilityEnum)">
            <summary>
            Sets the external reference model layers visibility.
            </summary>
            <param name="path">The full file name and path of the external reference model.</param>
            <param name="index">The layer index, which visibility is changed.</param>
            <param name="visibility"> The new visibility.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetExternalReferenceModelObjectColoring(System.String,System.Collections.Generic.IEnumerable{System.String},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the given external reference models objects coloring. For all objects, give null/empty container.
            </summary>
            <param name="path">The models path.</param>
            <param name="objectGuids">The object guids to be colored. If null/empty container given, all objects are affected.</param>
            <param name="red">The red value between 0-255.</param>
            <param name="green">The green value between 0-255.</param>
            <param name="blue">The blue value between 0-255.</param>
            <param name="alpha">The alpha value between 0-255.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ResetExternalReferenceModelColoring(System.String)">
            <summary>
            Resets the given external reference models objects coloring back to default.
            </summary>
            <param name="path">The models path.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.StartExternalReferenceModelChangeDetection(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Starts the external reference model change detection between the given TrimBim file paths.
            NOTE: The current version needs to be imported first using ImportExternalReferenceModel()
            before executing change detection.
            </summary>
            <param name="currentVersion">The full file name and path of the current version.</param>
            <param name="newVersion">The full file name and path of the new version.</param>
            <param name="changed">Include changed entities.</param>
            <param name="inserted">Include inserted entities.</param>
            <param name="deleted">Include deleted entities.</param>
            <param name="unchanged">Include unchanged entities.</param>
            <param name="comparisonSetTitle">The title of the comparison set to be used. If left empty, default will be used.</param>
            <param name="tolerancesTitle">The title of the tolerances item to be used. If left empty, default will be used.</param>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.StopExternalReferenceModelChangeDetection">
            <summary>
            Stops any external reference model change detection operation.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelSelections">
            <summary>
            Gets the external reference model selections.
            </summary>
            <returns>The external reference model selections guids.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SelectObjectsFromModel(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Selects the given objects from model. Also zooms to those objects, if boolean
            set to true.
            </summary>
            <param name="guids">The guids of the objects to be selected.</param>
            <param name="zoomTo">True, if objects should be also zoomed to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.LaunchExternalReferenceModelComparisonTolerancesDialog">
            <summary>
            Launches the comparison tolerances dialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.LaunchExternalReferenceModelComparisonSetsDialog">
            <summary>
            Launches the comparison sets dialog.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelComparisonTolerances">
            <summary>
            Gets the available comparison tolerance items titles.
            </summary>
            <returns>The titles of the available tolerance items.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelComparisonSets">
            <summary>
            Gets the available comparison sets titles.
            </summary>
            <returns>The titles of the available comparison sets.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ChangeDetectionInitInProgress">
            <summary>
            Checks if change detection initialization is still in progress.
            </summary>
            <returns>True if still in progress.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.CancelChangeDetectionInit">
            <summary>
            Cancels the change detection initialization, if in progress.
            </summary>
            <returns>True if cancellation request successful. False, if there was nothing to cancel.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelPath(System.String)">
            <summary>
            Gets the external reference models path.
            </summary>
            <param name="modelTsGuid">The models TS generated guid, which path is to be retrieved.</param>
            <returns>The models path, if found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetExternalReferenceModelEntitiesCount(System.String)">
            <summary>
            Get external reference model entities count.
            </summary>
            <param name="path">The full file name and path.</param>
            <returns>Entities count.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportIFCFromAll(System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum,System.Collections.Generic.List{System.String},Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportFlags,System.Boolean,System.Boolean,System.String)">
            <summary>
            IFC export from all objects
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="ViewType"> Configuration view type of the export.</param>
            <param name="PropertySets"> List of property sets to be exported.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="Flags">Boolean flags for IFC 4 export.</param>
            <param name="UseTimer"> Export with timer information.</param>
            <param name="CreateReport"> Create report from export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <returns>
            Returns false if the export fails for some reason
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.TqlExecute(System.String,System.String@)">
            <summary>
            TQL execute.
            </summary>
            <param name="TqlQuery"> The TQL query</param>
            <param name="TqlResult"> The string result</param>
            <returns>string, containing the selected ids</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ImportSemantic(System.String,System.String)">
            <summary>
            Import semantic file. Creates native objects to TS model based on the file.
            </summary>
            <param name="FileNameAndPath"> The semantic file name and path.</param>
            <param name="BasePointGuid">The base point guid if base point used, otherwise empty string.</param>
            <returns>True, if success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportModel(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Exports TS model to file.
            </summary>
            <param name="outPath">Output file name and path.</param>
            <param name="basePointGuid"></param>
            <param name="basePointExportType"></param>
            <param name="exportType"></param>
            <param name="propertiesPath"></param>
            <param name="selectedOnly"></param>
            <param name="assemblies"></param>
            <param name="allAssemblyParts"></param>
            <param name="parts"></param>
            <param name="rebars"></param>
            <param name="bolts"></param>
            <param name="welds"></param>
            <param name="surfaces"></param>
            <param name="surfaceTreatments"></param>
            <param name="grids"></param>
            <param name="spatialHierarchy"></param>
            <param name="pours"></param>
            <returns>True, if success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportIFCFromSelected(System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum,System.Collections.Generic.List{System.String},Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportFlags,System.Boolean,System.Boolean,System.String)">
            <summary>
            IFC export from selected objects
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="ViewType"> Configuration view type of the export.</param>
            <param name="PropertySets"> List of property sets to be exported.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="Flags">Boolean flags for IFC 4 export.</param>
            <param name="UseTimer"> Export with timer information.</param>
            <param name="CreateReport"> Create report from export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <returns>
            Returns false if the export fails for some reason
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportIFCFromObjects(System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Tekla.Structures.Model.ModelObject},Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportFlags,System.Boolean,System.Boolean,System.String)">
            <summary>
            IFC export from given objects
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="ViewType"> Configuration view type of the export.</param>
            <param name="PropertySets"> List of property sets to be exported.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="ModelObjects"> List of model objects to export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="Flags">Boolean flags for IFC 4 export.</param>
            <param name="UseTimer"> Export with timer information.</param>
            <param name="CreateReport"> Create report from export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <returns>
            Returns false if the export fails for some reason
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportIFCFromFilteredObjects(System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum,System.Collections.Generic.List{System.String},System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportFlags,System.Boolean,System.Boolean,System.String)">
            <summary>
            IFC export from filtered objects
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="ViewType"> Configuration view type of the export.</param>
            <param name="PropertySets"> List of property sets to be exported.</param>
            <param name="FilterName"> Filter file name for model objects to export.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="Flags">Boolean flags for IFC 4 export.</param>
            <param name="UseTimer"> Export with timer information.</param>
            <param name="CreateReport"> Create report from export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <returns>
            Returns false if the export fails for some reason
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportDgnFromAll(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Dgn export from all objects.
            </summary>
            <param name="FileName"> The file name.</param>
            <param name="Folder"> The folder.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export.</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportDgnFromSelected(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Dgn export from selected objects.
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportDwgFromAll(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Dwg export from all objects.
            </summary>
            <param name="FileName"> The file name.</param>
            <param name="Folder"> The folder.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportDwgFromSelected(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Dwg export from selected objects.
            </summary>
            <param name="ModelName"> The name of the model in the export file.</param>
            <param name="FullFileName"> The name of the export file with file path.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="ObjectColoring">Defines which object coloring filter is to be used in export.</param>
            <param name="ExportLayersAs">Defines which report field to use for layers export.</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportRevitFromAll(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.Boolean,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Revit export from all objects.
            </summary>
            <param name="FileName"> The name of the rvt export file.</param>
            <param name="Folder"> The export folder.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="UpdateSelected">Update the existing file</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportRevitFromSelected(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.Boolean,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Revit export from selected objects.
            </summary>
            <param name="FileName"> The name of the export rvt file.</param>
            <param name="Folder"> The export folder.</param>
            <param name="BasePoint">Defines which base point is used in export.</param>
            <param name="BasePointGuid">Base point guid if BasePoint parameter is set to BASE_POINT.</param>
            <param name="UpdateSelected">Update the existing file</param>
            <param name="exportedObjects">Number of objects successfully exported.</param>
            <param name="exportFailedObjects">Number of objects that failed to export</param>
            <param name="userName">Current user user name</param>
            <returns>int, defines the final run state</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.HandlePdfReport(System.String)">
            <summary>
            Handle Pdf Report.
            </summary>
            <param name="ReportPath">The report path.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ExportIFC(System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportViewTypeEnum,System.Collections.Generic.List{System.String},System.String,System.Boolean,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,Tekla.Structures.ModelInternal.Operation.IFCExportFlags,System.Boolean,System.Boolean,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DoExportDgn(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Boolean,System.Int32@,System.Int32@,System.String@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DoExportDwg(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.String,System.String,System.Boolean,System.Int32@,System.Int32@,System.String@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DoExportRevit(System.String,System.String,Tekla.Structures.ModelInternal.Operation.ExportBasePoint,System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@,System.String@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetTestSavePoint">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.RollbackToTestSavePoint">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.RollbackToTestSavePoint(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.Select(System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Selects a list of objects from the user interface.
            </summary>
            <param name="ModelObjects">The list of model objects to select.</param>
            <param name="ShowDimensions">Defines whether to show dimensions of the parts in the selection.</param>
            <param name="SuppressCallbacks">if set to <c>true</c>, suppress callbacks.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DeleteMacro(System.String,Tekla.Structures.ModelInternal.Operation.MacroLocationEnum)">
            <summary>
            Delete the specified macro and associated files
            </summary>
            <param name="fileName">
            The file name. fileName is relative to either the XS_MACRO_DIRECTORY global or local directories or is the absolute
            path to the macro .cs file
            </param>
            <param name="macroLocation">
            The macro Location enumeration.
            </param>
            <returns>
            Returns false if the .cs file does not exist or cannot be deleted
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.Interrupt">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartCommand(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartAction(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSaveModel(System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSaveAsModel(System.String,System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotAutoSaveModel(System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotQuitProgram(System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotUndo">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotRedo">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotClearUndoLog">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetDataBaseVersionInfoFromModel(System.String,System.String,System.Int32@,System.Int32@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetDatabaseVersion">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotRunDataRetrieverCommand(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotIsModelSaved(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ConstructMultiUserServerName(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotConnectToNewMultiUserServerAndOpenModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotConvertAndOpenAsSingleUserModel(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotConvertAndOpenAsMultiUserModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotConvertAndOpenAsMultiOrSingleUser(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExcludeFromSharingAndOpen(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCreateNewSingleUserModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCreateNewSingleUserModelFromTemplate(System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCreateNewSharedModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCreateNewMultiUserModel(System.String,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSetUserModelRole(System.Guid,System.String,System.Guid,Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingIsEnabled">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotModelImportIsEnabled">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingLogPrint(Tekla.Structures.ModelInternal.Operation.DotSharingLogTypeEnum,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingRegisterPlugin(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCreateStartSharingBackup(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingRestoreStartSharingBackup(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingMakeModelShareable(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartSharingCommit">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingSaveVersionGuid(System.Guid,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingGetVersionGuid(System.Guid@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingGetVersionPacket(System.Int32@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingWriteOut(Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum,System.String,Tekla.Structures.ModelInternal.Operation.DotSharingWriteOutModeEnum,System.String,Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String}}@,System.Boolean@)">
            <summary>The dot sharing write out.</summary>
            <param name="permission">User permission.</param>
            <param name="packetFolder">Full path to the folder that contains all the files that will be included in the write out file.</param>
            <param name="mode">The write out mode.</param>
            <param name="revisionInfo">
            The revision information as xml.
            <revision>
              <Code>My comment</Code>
              <Comment>My code</Comment>
              <user>
                <id>myemail@tekla.com</id>
                <name>My Name</name>
              </user>
            </revision>
            </param>
            <param name="errorCode">The Error Code in case the write-out failed.</param>
            <param name="errorDetail">Detail for the error</param>
            <param name="moduleBaselines">The module baselines, tuples of old baseline and new baseline.</param>
            <param name="isRevertPossible">Performed model changes can be reverted without reopenign in case of failure.</param>
            <returns>The System.Boolean.</returns>
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingWriteOutCommit(System.Boolean,System.Boolean,System.String,System.Int32,Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String}}@)">
            <summary>The dot sharing write out commit.</summary>
            <param name="success">True if write out was successful so commit to be done, if false uncommit to be done.</param>
            <param name="isRevertPossible">True if changes to database can be reverted in case of failure, false otherwise.</param>
            <param name="packetFolder">Full path to the folder that contains all the files that will be included in the write out file.</param>
            <param name="packetNumber">The packet number.</param>
            <param name="errorCode">The Error Code in case the write-out failed.</param>
            <param name="errorDetail">Detail for the error</param>
            <param name="moduleBaselines">The module baselines, tuples of old baseline and new baseline.</param>
            <returns>Commit/uncommit result.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingOpenModelForJoin(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingJoinFinished">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadInStarting(System.Boolean,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadIn(System.String,System.Int32,Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum@,System.String@,System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String}}@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingReadInCommit(System.Boolean,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingShowReadInChanges">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCommandResult(System.Int32,System.Boolean,Tekla.Structures.ModelInternal.Operation.DotSharingErrorCodeEnum,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCreateNewModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCreateEmptyModel(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingSetMenu(Tekla.Structures.ModelInternal.Operation.DotSharingPrivilegeEnum)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotModelSharingLicenseInfo(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingCheckFileToReadIn(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingHistoryWriteLocal(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingIsPrivilegesInpOwner">
            <summary>Check if user is privileges.inp owner.</summary>
            <returns>True if user is privileges.inp owner.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingRestorePrivilegesInp">
            <summary>Restore privileges.inp file.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSharingGetModelLocalHistoryFolder(System.Int32,System.Boolean)">
            <summary>Get folder for model local history.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotLoadModel2(System.String,System.String)">
            <summary>
            Load model2 from folder.
            dotUnloadModel2 MUST be called to release.
            </summary>
            <param name="folder">The model folder. The name of .db1 file must match folder name.</param>
            <param name="modelName">The model name (.db1, without extension). Can be empty if name is the same as folder name.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotLoadModel2FromLocalHistoryBySharingPacket(System.Int32)">
            <summary>
            Load model2 from local history, by sharing packet number.
            dotUnloadModel2 MUST be called to release.
            </summary>
            <param name="packetNumber">The sharing packet number (as it was before for the model before read in).</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotUnloadModel2">
            <summary>Unload model2 manager.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetSharingLocalChangesAsync">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.InsertView(Tekla.Structures.Model.UI.View,System.Boolean,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetCurrentView(Tekla.Structures.Model.UI.View@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetViewRotationPointFromCurrentView(Tekla.Structures.Geometry3d.Point@)">
            <summary>
            Get view rotation point in global coordinates from current view.
            </summary>
            <param name="viewPoint">The view rotation point.</param>
            <returns>True if current view and rotation point exists, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.FetchModelObjects(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Takes a guid list of object as input, checks if guid is native or external, and
            instantiates and optionally selects objects before returning them.
            </summary>
            <param name="guids">The GUID list to look for in the model.</param>
            <param name="SelectInstances">Optional parameter whether object is selected, default = true.</param>
            <returns>The model objects with the given guids,
            or empty list if any of the objects do not exists or object data loading failed for some reason.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotTranslateLabel(System.String)">
            <summary>
            Get translation in current language from loaded ail files.
            </summary>
            <param name="label">The label.</param>
            <returns>The translation, if not found returns the label.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportGetAttributeFiles(System.String)">
            <summary>
            Gets attribute files with specified suffix.
            </summary>
            <param name="suffix">The filename suffix.</param>
            <returns>Attribute files found, or null if no files were found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportGetAttributeFilesWithPrefix(System.String,System.String)">
            <summary>
            Gets attribute files with specified prefix and suffix.
            </summary>
            <param name="prefix">The filename prefix.</param>
            <param name="suffix">The filename suffix.</param>
            <returns>Attribute files found, or null if no files were found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotTryGetSubdirectoryFromFilePrefixAndSuffix(System.String,System.String,System.String@)">
            <summary>Searches for subdirectory for the file.</summary>
            <param name="prefix">The filename prefix.</param>
            <param name="suffix">The filename suffix.</param>
            <param name="subdirectory">Returns the resolved subdirectory.</param>
            <returns>True if file is found, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotTryGetSubdirectoryFromFileName(System.String,System.String@)">
            <summary>Searches for subdirectory for the file.</summary>
            <param name="filename">The filename.</param>
            <param name="subdirectory">Returns the resolved subdirectory.</param>
            <returns>True if file is found, false otherwise.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotWriteToSessionLog(System.String)">
            <summary> Writes a message in the TeklaStructures Session Log file.</summary>
            <param name="Message">Message to be written in Session Log.</param>
            <returns>True if operation is correct, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Message cannot be null.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotWriteErrorToSessionLog(System.String)">
            <summary> Writes a message in the TeklaStructures Error Log file.</summary>
            <param name="Message">Message to be written in Error Log.</param>
            <returns>True if operation is correct, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Message cannot be null.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportShadowRegion(System.Collections.ArrayList)">
            <summary> Gets a Shadow (Projection) Area for list of parts.</summary>
            <param name="PartIdentifiers">List of part's ids.</param>
            <returns>List of Shadow (Projection) areas for list of parts.</returns>
            <exception cref="T:System.ArgumentException">Too many parts in the list.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportShadowRegionComplement(System.Collections.ArrayList)">
            <summary> Gets a Shadow Complement to the Extrma Area for list of parts.</summary>
            <param name="PartIdentifiers">List of part's Identifiers.</param>
            <returns>List of Shadow Complement to the Extrma Area areas for list of parts.</returns>
            <exception cref="T:System.ArgumentException">Too many parts in the list.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotDisplayComponentHelp(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotDisplayAutoDefaultSettings(Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32,System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartCustomComponentCreation(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotStartPluginCreation(System.String)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ComponentGetAppliedAttributes(Tekla.Structures.Model.BaseComponent)">
            <summary>
            Gets the applied attributes of given component type.
            </summary>
            <param name="baseComponent">The component type.</param>
            <returns>A dictionary of applied attribute names/values.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ComponentGetAppliedAttributes(Tekla.Structures.Model.BaseComponent,System.Boolean)">
            <summary>
            Gets the applied attributes of given component type.
            </summary>
            <param name="baseComponent">The component type.</param>
            <param name="ignoreDefaultValues">Defines if attributes with default values are also fetched.</param>
            <returns>A dictionary of applied attribute names/values.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ComponentSetAppliedAttributes(Tekla.Structures.Model.BaseComponent,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            Sets the applied attributes for a given component type.
            </summary>
            <param name="baseComponent">The component type.</param>
            <param name="appliedAttributes">A dictionary of applied attribute names/values.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ComponentSetAppliedAttributes(Tekla.Structures.Model.BaseComponent,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Boolean)">
            <summary>
            Sets the applied attributes for a given component type.
            </summary>
            <param name="baseComponent">The component type.</param>
            <param name="appliedAttributes">A dictionary of applied attribute names/values.</param>
            <param name="addNewAttributes">Are new attributes registered to internal component data storage.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotExportGetColorRepresentationForObject(System.Int32,Tekla.Structures.Model.UI.Color@)">
            <summary> Gets the objects representation color seen currently on UI</summary>
            <param name="ID">Object identifier, which color is fetched</param>
            <param name="color">Fetched color as return value</param>
            <returns>Color of the fectehd part, is successful</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when a parameter is null.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSetAdvancedOption(System.String,System.Boolean)">
            <summary>Sets boolean advanced option value.</summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">if set to <c>true</c> [value].</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSetAdvancedOption(System.String,System.Int32)">
            <summary>Sets integer advanced option value.</summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">The value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSetAdvancedOption(System.String,System.String)">
            <summary>Sets string advanced option value.</summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">The value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotResetUserOptionToDefaultValue(System.String)">
            <summary>Resets advanced user option to its default value.</summary>
            <param name="VariableName">Name of the user option.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotSetAdvancedOption(System.String,System.Double)">
            <summary>Sets double dvanced option.</summary>
            <param name="VariableName">Name of the variable.</param>
            <param name="Value">The value.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t)">
            <summary>Sets the advanced option.</summary>
            <param name="advancedOption">The advanced option.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotDaoFindObject(System.Int32,System.String,System.String,System.Int32)">
            <summary>Find akit object.</summary>
            <param name="parentId">The parent ID (1 for root).</param>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <returns>The object ID (0 if not found).</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCleanDrawingFiles(System.Boolean,System.String)">
            <summary>Cleans drawing files.</summary>
            <param name="Silent">Clean silenty. No confirmation dialogs shown.</param>
            <param name="BackupPath">Path to backup cleaned drawing files.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetCurrentModificationStampGuid">
            <summary>Gets the current modification stamp from the model, in form of Guid.</summary>
            <returns>The current modification stamp Guid.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetModifications(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.Boolean)">
            <summary>
            Get modifications by selected object types.
            </summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="returnAlsoIfObjectIsCreatedAndDeletedAfterEvent">if set to <c>true</c> returns object as deleted also if object is created and deleted after event.</param>
            <returns>
            All modifications compared to the modification stamp.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetObjectsWithAnyModification(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum})">
            <summary>
            Get objects with any modifications after the stamp by selected object types. Does not include deleted objects.
            </summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <returns>
            Objects with any modifications after the stamp.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotMarkObjectModifiedForOrganizer(System.Int32)">
            <summary>
            Mark object modfied with updating MOD_UDA_CHANGED without any other actions related to UDA insert/update.
            </summary>
            <param name="objectId">The object id.</param>
            <returns>
            True if successful.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetMainPart(Tekla.Structures.Model.Assembly)">
            <summary>
            Returns the main part of the assembly or null if none. Does not select main part.
            </summary>
            <returns>The main part of the assembly or null.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetSubAssemblies(Tekla.Structures.Model.Assembly)">
            <summary>
            Selects and returns a list of subassemblies belonging to the assembly. Does not select subassemblies
            </summary>
            <returns>A list of subassemblies.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetAssemblyId(Tekla.Structures.Model.Assembly)">
            <summary>
            Returns the assembly identifier the assembly belongs to (null if none). Assembly must be selected before calling.
            </summary>
            <returns>The assembly identifier or null.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetSecondaries(Tekla.Structures.Model.Assembly)">
            <summary>
            Returns all the secondary assemblables belonging to the assembly. 
            </summary>
            <returns>An array list containing all the secondary assemblables belonging to the assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetDeletedObjecs(System.String,System.Collections.Generic.IEnumerable{Tekla.Structures.Model.ModelObject.ModelObjectEnum},System.Boolean)">
            <summary>
            Gets a list of the objects that have been deleted after the modification stamp.
            </summary>
            <param name="ModStamp">The modification stamp, as returned by GetCurrentModificationStampGuid().</param>
            <param name="ObjectTypes">Types of object to select. Empty or null selects all types.</param>
            <param name="returnAlsoIfObjectIsCreatedAndDeletedAfterEvent">if set to <c>true</c> returns also the objects that are both created and deleted after event.</param>
            <returns>
            A list of the objects that have been deleted after the given modification stamp.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetModificationsByFilter(System.String,System.String)">
            <summary>Get modifications by filter name.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <param name="FilterName">The filter name.</param>
            <returns>Modifications compared to the modification stamp by filter.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetParentId(System.Int32,System.Int32@)">
            <summary>Get parent id according Organizer logic..</summary>
            <param name="identifier">The object identifier.</param>
            <param name="rootAssemblyIdentifier">Returns root assembly identifier. 0 if object is root assembly.</param>
            <returns>Parent identifier id. 0 if object is root assembly.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckModelOptionsModified(System.String)">
            <summary>Check if model options have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if model options have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckDrawingOptionsModified(System.String)">
            <summary>Check if drawing options have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if drawing options have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckMaterialDefinitionsModified(System.String)">
            <summary>Check if material definitions been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if material definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckProfileDefinitionsModified(System.String)">
            <summary>Check if profile definitions been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if profile definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckCustomPropertiesModified(System.String)">
            <summary>Check if any custom property plugins have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if custom property plugins have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckBoltDefinitionsModified(System.String)">
            <summary>Check if bolt definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if bolt definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckBoltAssemblyDefinitionsModified(System.String)">
            <summary>Check if bolt assembly definitions have been modified after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if bolt assembly definitions have been modified.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckDrawingsModified(System.String)">
            <summary>Check if any drawings have been created, modified or deleted after modification stamp.</summary>
            <param name="ModStamp">The modification stamp guid.</param>
            <returns>True if drawings have been modified.</returns>returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotCheckObjectModifiedAfterStamp(System.Guid,System.String)">
            <summary>Check if object has been modified after modification stamp.</summary>
            <param name="objectGuid">The object unique identifier.</param>
            <param name="ModStamp">The mod stamp.</param>
            <returns>True if object has been modified after modification stamp.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetBeamPositioningBox(Tekla.Structures.Model.Beam)">
            <summary>
            Get the (section) box according to which beam positioning is done in non-middle positioning.
            </summary>
            <param name="beam">The beam.</param>
            <returns>The (section) box according to which beam positioning is done. Null if fails.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotShowPreviewDrawing(System.Int32)">
            <summary>
            dot Show This Preview Drawing
            </summary>
            <param name="DrawingId">Id of the drawing</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.dotGetAllowedReferenceModelFileExtensions">
            <summary>
            Gets list of allowed reference model extensions.
            </summary>
            <returns>The allowed extensions.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetReferenceModelObjectFaces(Tekla.Structures.Identifier)">
            <summary>
            Gets the faces of the given reference model object.
            </summary>
            <param name="referenceObjectIdentifier">The reference model object identifier.</param>
            <returns>The reference model object faces.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.AbsoluteFilePath(System.String,Tekla.Structures.ModelInternal.Operation.MacroLocationEnum)">
            <summary>
            The file path.
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <param name="macroLocation">
            The macro Location.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetLocalAndGlobalMacroDirectories(System.String,Tekla.Structures.ModelInternal.Operation.MacroLocationEnum)">
            <summary>
            The get local and global macro directories.
            </summary>
            <param name="fileName">
            The file Name.
            </param>
            <param name="macroLocation">
            The macro Location.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DirectoryExists(System.String,Tekla.Structures.ModelInternal.Operation.MacroLocationEnum)">
            <summary>
            The file exists.
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <param name="macroLocation">
            The macro Location.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.CreateDstvStructure(Tekla.Structures.Identifier,System.String,Tekla.Structures.ModelInternal.Dstv.DstvStructure@,System.Boolean,System.String,System.Boolean,System.String)">
             <summary>
             Creates NC structure from the selected parts using the given NC template name.
             <para>See Tekla Structures Help for more information about NC files.</para>
             </summary>
             <param name="PartID">The identifier of the part.</param>
             <param name="NCFileSettings">The name of the NC setting template to be used in creation.</param>
             <param name="CreatePopMarks">Create pop-marks during export.</param>
             <param name="PopMarkSettingsFileName">The name of the pop-mark setting file to be used in creation.</param>
             <param name="CreateContourMarking">Create contour marking during export.</param>
             <param name="ContourMarkingSettingsFileName">The name of the contour marking setting file to be used in creation.</param>
             <param name="DstvOutput">The DSTV output as structure.</param>
             <returns>True if the NC structure is created, false if the numbering is not up-to-date or the used configuration is wrong.</returns>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Model.UI;
             using Tekla.Structures.ModelInternal;
             using Tekla.Structures.ModelInternal.Dstv;
            
             using System.Collections;
             using System.Windows.Forms;
            
             public class Example
             {
                    public void Example1()
                    {
                        Picker Picker = new Picker();
            
                        try
                        {
                            Beam Beam1 = Picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick object to Create NC for") as Beam;
            
                            Identifier BeamId = Beam1.Identifier;
            
                            DstvStructure DstvOutput;
                            if (Operation.CreateDstvStructure(BeamId, "DSTV for profiles", out DstvOutput, true, "standard", true, "standard"))
                            {
                                 //modify the dstv structure
                                 DstvOutput.WriteOutput();
                            }
                        }
                        catch { }
                    }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SwapLine(Tekla.Structures.Geometry3d.LineSegment)">
            <summary>
            Swaps a line
            </summary>
            <param name="line">Line to swap</param>
            <returns>The swapped line</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SwapArc(Tekla.Structures.Geometry3d.Arc)">
            <summary>
            Swaps an arc
            </summary>
            <param name="arc">Arc to swap</param>
            <returns>The swapped arc</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SwapPolycurve(Tekla.Structures.Geometry3d.Polycurve)">
            <summary>
            Swaps a polycurve
            </summary>
            <param name="polycurve">Polycurve to swap</param>
            <returns>The swapped polycurve</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SwapConstructionObjectOrder(Tekla.Structures.Model.ModelObject)">
            <summary>
            Swaps the order of a construction object
            </summary>
            <param name="modelObject">Construction object</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.ValidateLoftedPlateBaseCurves(System.Collections.Generic.List{Tekla.Structures.Geometry3d.ICurve})">
            <summary>
            Validates a set of base curves for a lofted plate
            </summary>
            <param name="baseCurves">Lofted plate base curves</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetBoltedPartsHoleElevations(Tekla.Structures.Model.BoltGroup)">
            <summary>
            Gets the bolt group parts hole elevations
            </summary>
            <param name="boltGroup">The bolt group</param>
            <returns>The holes elevations</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetSimilarNumberedObjectsCoordinateSystems(Tekla.Structures.Identifier,Tekla.Structures.Identifier,Tekla.Structures.Geometry3d.CoordinateSystem@,Tekla.Structures.Geometry3d.CoordinateSystem@)">
            <summary>Get similar numbered objects coordinate systems</summary>
            <param name="object1Id">The first object ID.</param>
            <param name="object2Id">The second object ID.</param>
            <param name="cs1">The coordinate system of the first object.</param>
            <param name="cs2">The coordinate system of the second object.</param>
            <returns>True if successful.</returns>
            <remarks>The IDs must be either both assembly, or both part identifiers.</remarks>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.AppendShapeMetadata(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Append the metadata defined in keyValStrings to shape identified by guid
            NOTE: Expected order of strings in the keyValStrings is:
            key, value, value type, label, description
            </summary>
            <param name="guid">The guid of the shape</param>
            <param name="keyValStrings">The key value pairs of strings that contain the metadata</param>
            <returns>True if the appending operation was successful</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.AddShapeMetadataKeyVal(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Add key-value fields to Shape Metadata.
            </summary>
            <param name="shapeGuid">This defines the unique GUID of the shape whose Metadata will be manipulated</param>
            <param name="key">A string that defines the key in the Metadata key-value pair</param>
            <param name="value">List of value fields for the key. Can be empty, but must not be null
            Value fields are in order: value, type, label, description.</param>/// 
            <returns>ShapeMetadataResult.OK if operation was successful. For more information <see cref="T:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult"/></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.UpdateShapeMetadata(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Updates the value of an existing key in the shape metadata
            </summary>
            <param name="shapeGuid">This defines the unique GUID of the shape whose Metadata will be manipulated</param>
            <param name="key">Defines the existing metadata key to search for in the shape</param>
            <param name="newValue">The new value to set for key</param>///
            <returns>ShapeMetadataResult.OK if operation was successful. For more information <see cref="T:Tekla.Structures.Model.Operations.Operation.ShapeMetadataResult"/></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetShapeMetadataVal(System.String,System.String)">
            <summary>
            Get metadata value associated with the input key
            </summary>
            <param name="key">Metadata key</param>
            <param name="guid">The guid of the shape</param>
            <returns>A string that contains the value for the specified key</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetShapeAllMetadataKeys(System.String)">
            <summary>
            Gets all metadata keys associated with the shape
            </summary>
            <param name="guid">The guid of the shape</param>
            <returns>A list of strings containing the keys</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.DeleteShapeMetadata(System.String,System.String)">
            <summary>
            Delete the metadata by key
            </summary>
            <param name="guid">The guid of the shape</param>
            <param name="metaDataKey">The meta data key</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetShapeStructuredMetadata(System.String)">
            <summary>
            Get metadata from the shape catalog for a shape specified by its GUID
            </summary>
            <param name="guid">The guid of the shape</param>
            <returns>List of tuples that contain keys and corresponding value list containing the metadata</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.SetPrintingController(Tekla.Structures.ModelInternal.PrintingController)">
            <summary>
            Set printing controller object on the TS side.
            </summary>
            <param name="PrintingController">The printing controller.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.GetPrintingController">
            <summary>
            Get printing controller object on the TS side.
            </summary>
            <returns>The printing controller.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Operation.Model2">
            <summary>
            Using model2 instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.Model2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.Operation.Model2"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Operation.Model2.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotAreaPolygons_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.aIdList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.nIdList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.nAreas">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotAreaPolygons_t.ClientID">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotAreaPolygons_t.ToStruct(System.Collections.ArrayList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProgressBar_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.SleepTime">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aMessage">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aTitle">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aCancelButtonLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.aProgressLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Progress">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProgressBar_t.Canceled">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSaveOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.aSaveAsPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.aComment">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.aID">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveOperation_t.aReason">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUndoOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUndoOperation_t.Operation">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModel2Operation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.Flag">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.aPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.aName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.PacketNumber">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModel2Operation_t.Success">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSharingOperation_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Operation">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aGuid">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aPacketPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aModuleName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aOldBaseline">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aNewBaseline">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aMessage">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aProfileId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Status">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.IsRevertPossible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.Joining">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.CommandId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.ErrorCode">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.aErrorDetail">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.IsOwner">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSharingOperation_t.PacketNumber">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBeamPositioningBox_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBeamPositioningBox_t.PartId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBeamPositioningBox_t.Height">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBeamPositioningBox_t.Width">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTranslateLabel_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTranslateLabel_t.aLabel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTranslateLabel_t.aTranslation">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotExternalReferenceModelLayer_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModelLayer_t.aName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModelLayer_t.Index">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModelLayer_t.Visibility">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotExternalReferenceModelSelection_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModelSelection_t.aTsModelGuid">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotExternalReferenceModelSelection_t.SelectedObjectGuids">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PrintingController">
            <summary>
            Printing controller.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfFunc">
            <summary>
            Print report to pdf function.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdf(Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs)">
            <summary>
            Print report to PDF.
            </summary>
            <param name="arguments">The print report to pdf arguments.</param>
            <returns>The print report to pdf results.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs">
            <summary>
            Print report to PDF arguments.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.ReportPath">
            <summary>
            Gets or sets the report path.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.SheetHeight">
            <summary>
            Gets or sets the sheet height.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.TotalHeight">
            <summary>
            Gets or sets the total height.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfArgs.DisplayReport">
            <summary>
            Gets or sets a value indicating whether to display the report.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfResult">
            <summary>
            Print report to pdf result.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PrintingController.PrintReportToPdfResult.Success">
            <summary>
            Success flag.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Rotation3DDataConversion">
            <summary>Conversion of <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> to and from tuple representation.</summary>
            <remarks>Needed for use with Contracts.</remarks>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Rotation3DDataConversion.From(System.Tuple{System.Tuple{System.Double,System.Double,System.Double},System.Tuple{System.Double,System.Double,System.Double}})">
            <summary>Converts tuple representation to <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/>.</summary>
            <param name="rotationData">The rotation data, encoded as tuples.</param>
            <returns>The <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> instance.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Rotation3DDataConversion.To(Tekla.Structures.Model.Geometry.Rotation3D)">
            <summary>Converts <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> to tuple representation.</summary>
            <param name="rotation">The <see cref="T:Tekla.Structures.Model.Geometry.Rotation3D"/> instance.</param>
            <returns>The rotation data, encoded as tuples.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.SummaryStatusEnum">
            <summary>See dbSharedObjectStatus_e</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.INSERTED">
            <summary>Object inserted remotely, no conflicts</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.UPDATED">
            <summary>Object updated remotely, no conflicts</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.DELETED">
            <summary>Object deleted remotely, no conflicts</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.MODIFIED_UPDATED">
            <summary>Object updated both remotely and locally</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.MODIFIED_DELETED">
            <summary>Object updated locally and deleted remotely</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.INSERTED_INSERTED">
            <summary>Object inserted both locally and remotely</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.LOCAL">
            <summary>Object changed only locally.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.SummaryStatusEnum.DELETED_MODIFIED">
            <summary>Object deleted locally and updated remotely</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t">
            <summary>
            Serialization structure for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.ModelObject">
            <summary>
            Base class.
            </summary>
            
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.FatherId">
            <summary>
            Id of the Father for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.Spanning">
            <summary>
            Spanning.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.PrimaryAxisDirection">
            <summary>
            Vector for the Primary Axis Direction.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.AutomaticPrimaryAxisWeight">
            <summary>
            Whether to use Automatic Primary Axis Weight or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.Weight">
            <summary>
            Weight.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadDispersionAngle">
            <summary>
            Load Dispersion Angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.CreateFixedSupportConditionsAutomatically">
            <summary>
            Whether to Create Fixed Support Conditions Automatically or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadAttachment">
            <summary>
            Attach To Member or Don't Attach
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.PartNames">
            <summary>
            Include or Exclude Parts
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.aPartFilter">
            <summary>
            Part Filter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDx">
            <summary>
            Bounding Box X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDy">
            <summary>
            Bounding Box Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.BoundingBoxDz">
            <summary>
            Bounding Box Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t.LoadGroupId">
            <summary>
            Load group attribute for loads
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t">
            <summary>
            Serialization structure for LoadPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Position">
            <summary>
            The Position for the Load. Contains 1 -> n points, depending on the type of Load
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P1">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P2">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P3">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.P4">
            <summary>
            The P Vectors for the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Moment">
            <summary>
            The Moment Vector for the Load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Torsion1">
            <summary>
            Torsion 1.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.Torsion2">
            <summary>
            Torsion 2.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.DistanceA">
            <summary>
            Distance a.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.DistanceB">
            <summary>
            Distance b.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.LoadForm">
            <summary>
            Load Form type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureChangeForAxialElongation">
            <summary>
            Temperature change for axial elongation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureDifferentialTopToBottom">
            <summary>
            Temperature differential top to bottom.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.TemperatureDifferentialSideToSide">
            <summary>
            Temperature differential side to side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadClassAttributes_t.InitialAxialElongation">
            <summary>
            Initial axial elongation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLoadGroup_t">
            <summary>
            Serialization structure for the LoadGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.ModelObject">
            <summary>
            Base class that also contains the Identifier for this object.
            </summary>
            
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.GroupName">
            <summary>
            Load group name, maximum length 126 characters.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.GroupType">
            <summary>
            Load group type 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Direction">
            <summary>
            Direction of the load.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Compatible">
            <summary>
            Identifies groups that are compatible, i.e. may be combined 
            with this one during structural analysis phase. All groups 
            that have the same Compatible tag are considered to be 
            compatible with each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Incompatible">
            <summary>
            Groups with which this group is incompatible, i.e. which cannot 
            be combined with each other during structural analysis phase.
            All groups that have the same Incompatible tag are considered to be 
            incompatible with each other.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLoadGroup_t.Color">
            <summary>
            Color with which all Loads that belong to this group are drawn in the Tekla Structures view.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotChamfer_t">
            <summary>
            Struct for the Chamfer.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.X">
            <summary>
            The X and Y values for the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.Y">
            <summary>
            The X and Y values for the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.Type">
            <summary>
            The Type of the Chamfer
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.DZ1">
            <summary>
            The Thicknes offsets for the Chamfer.
            
            Note, these do nothing when used with the PolyBeam.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotChamfer_t.DZ2">
            <summary>
            The Thicknes offsets for the Chamfer.
            
            Note, these do nothing when used with the PolyBeam.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDeformingData_t">
            <summary>
            Struct for the DeformingData.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Angle">
            <summary>
            Start angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Angle2">
            <summary>
            End angle.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Cambering">
            <summary>
            Cambering degree.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDeformingData_t.Shortening">
            <summary>
            Shortening degree.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotMaterial_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotMaterial_t.aMaterialString">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotNumberingSeries_t">
            <summary>
            Serialization structure for NumberingSeries.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingSeries_t.aPrefix">
            <summary>
            The prefix in numbering.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotNumberingSeries_t.StartNumber">
            <summary>
            The start number in numbering.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotOffset_t">
            <summary> Struct for Offsets. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dx">
            <summary> Offsets values </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dy">
            <summary> Offsets values </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotOffset_t.Dz">
            <summary> Offsets values </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPhase_t">
            <summary>
            Serialization structure for the Set phase method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseManipulationType">
            <summary>
            The phase manipulation type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.Id">
            <summary>
            ID of the part whose phase we wish to set/get
            If set to 0 struct is used to get phase information
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseNumber">
            <summary>
            The phase number
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseName">
            <summary>
            The phase name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.PhaseComment">
            <summary>
            The phase comment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.IsCurrentPhase">
            <summary>
            Tells whether the phase is current or not.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhase_t.Result">
            <summary>
            The result of the phase change (true or false).
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetGetProperty_t">
            <summary> Serialization structure for the Set property method </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.aName">
            <summary> Name of the property </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.PropertyType">
            <summary> Type of the property </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.OperationType">
            <summary> Where to get the property (UDA/Report) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.PhaseNumber">
            <summary> The phase number </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.IntValue">
            <summary> Integer return value </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.DoubleValue">
            <summary> Double return value </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetGetProperty_t.aStringValue">
            <summary> String return value </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPhaseNumbers_t">
            <summary>
            Serialization structure for the get phases method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.nPhaseNumbers">
            <summary>
            The phase count
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.aPhaseNumber">
            <summary>
            The phase numbers
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPhaseNumbers_t.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPosition_t">
            <summary>
            Struct for the Position.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.PlaneOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.DepthOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.RotationOffset">
            <summary>
            Offsets away from the value.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Plane">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Depth">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPosition_t.Rotation">
            <summary>
            Positioning in the following sense.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProfile_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProfile_t.aProfileString">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Serializer">
            <summary>Class for methods which handle serialization and deserialization of structures.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Serializer.JsonToUDAs(System.Byte[])">
            <summary>Deserializes json data produced by Model!dbHistoryJsonWriteUDAs() into dictionary of properties.</summary>
            <param name="json">The serialized data.</param>
            <returns>Properties, in form of name -> value. Type of the value corresponds to the UDA type (int, double or string).</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Serializer.JsonToUDAChanges(System.Byte[])">
            <summary>Deserializes json data produced by Model!dbHistoryJsonWriteUDAChanges.</summary>
            <param name="json">The serialized data.</param>
            <returns>The change data.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Serializer.FixTypes(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Fix attribute types.
            The deserializer makes some undesired in output type. Fix them.</summary>
            <param name="attributes">The UDA dictionary to fix. It's modified inplace.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.UDAChanges">
            <summary>UDA changes for an object.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.UDAChanges.Changed">
            <summary>Changed UDAs, in form of name -> value. The value can be on type string, int or double
            which corresponds to the UDA type.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.UDAChanges.Deleted">
            <summary>Deleted UDA names.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ChangeManager">
            <summary>
            DO NOT USE! For internal usage only!
            Contains function for the ChangeManager application.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ChangeManager.AllowSave(System.Boolean)">
            <summary>
            Sets a flag to inidcate whether the model should be saved or not.
            </summary>
            <param name="SaveFlag">True if saving should be done, otherwise false</param>
            <returns>True if flag was set successfully.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ChangeManager.AllowNumbering(System.Boolean)">
            <summary>
            Sets a flag to inidcate whether the model should be numbered or not.
            </summary>
            <param name="NumberingFlag">True if numbering should be done, otherwise false</param>
            <returns>True if flag was set successfully.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClash_t">
            <summary>
            Struct for the ClashCheck.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Id1">
            <summary>
            ID of the first clashing object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Id2">
            <summary>
            ID of the second clashing object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.Type">
            <summary>
            Type of Clash. One of ClashTypeEnum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClash_t.PenetrationDepth">
            <summary>
            Penetration depth of the clash. Min 0.2 mm = 0.0002 PenetrationDepth, Max 
            200.0 mm = 0.200 PenetrationDepth. Can be 0.0 if penetration depth could not be calculated.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.Filename">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSaveAsWebModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.OnlySelected">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTemplateName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aFileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.aTitle3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCreateReportFromModel_t.Result">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelExtensions">
            <summary>
            DO NOT USE! For internal usage only!
            The <see cref="T:Tekla.Structures.ModelInternal.ModelExtensions"/> class provides a set of extension methods for the <see cref="T:Tekla.Structures.Model.Model"/> type.
            </summary>
            <remarks>
            Used by the DM platform adapter.
            </remarks>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelExtensions.GetModelObjectType(Tekla.Structures.Model.Model,Tekla.Structures.Identifier)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>.
            </summary>
            <param name="Model">The <see cref="T:Tekla.Structures.Model.Model"/> to get the model object identified by <paramref name="ID"/> from.</param>
            <param name="ID">The identifier of the model object of which its <see cref="T:System.Type"/> needs to be returned.</param>
            <returns>The <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelExtensions.TryGetModelObjectType(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,System.Type@)">
            <summary>
            Tries to get the <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>, if any.
            </summary>
            <param name="Model">The <see cref="T:Tekla.Structures.Model.Model"/> to get the model object identified by <paramref name="ID"/> from.</param>
            <param name="ID">The identifier of the model object of which its <see cref="T:System.Type"/> needs to be returned.</param>
            <param name="ObjectType">The <see cref="T:System.Type"/> of the <see cref="T:Tekla.Structures.Model.ModelObject"/> identified by the given <paramref name="ID"/>, if any.</param>
            <returns>True if a <see cref="T:System.Type"/> can be resolved for the model object; otherwise, false.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CommitMessage">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CommitMessage.TsCommand">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CommitMessage.DmCommand">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelInfoModeEnum">
            <summary>The model info mode enum</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfoModeEnum.GetModelInfo">
            <summary>Get model info</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfoModeEnum.OpenModel">
            <summary>Open model</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfoModeEnum.CloseModel">
            <summary>Close model</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelInfo_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aModelPath">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aModelName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aServerName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.aModelTemplateName">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.NorthDirection">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.Mode">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.OpenAutoSaved">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.CurrentPhase">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.IsSharedModel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.IsSingleUserModel">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.ModelDataBaseVersion">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.CurrentDataBaseVersion">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.ConvertBetweenSingleAndMultiuser">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.ConnectToServer">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.ExcludeFromSharing">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelInfo_t.IsModelSaved">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelObject_t">
            <summary>
            ModelObject class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.Object">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.Type">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObject_t.aLabel">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelObjectType_t">
            <summary>
            ModelObject type class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.PrimaryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.SecondaryType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.BooleanPartType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelObjectType_t.IsConcreteMaterial">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotStringProperty_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotStringProperty_t.FatherId">
            <summary>
            ID of the object whose property we wish to get or set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotStringProperty_t.aName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotStringProperty_t.aValueString">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotStringProperty_t.ValueStringIteration">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetProperty_t">
            <summary>
            Serialization structure for the Set property method
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.aName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.Source">
            <summary>
            Where to get the property (UDA/Report)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.FatherId">
            <summary>
            ID of the part whose property we wish to get or set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.IntValue">
            <summary>
            Integer return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.DoubleValue">
            <summary>
            Double return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetProperty_t.aStringValue">
            <summary>
            String return value
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGetProperties_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName0">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName1">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName2">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName3">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName4">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName5">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName6">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName7">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName8">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aName9">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.Source">
            <summary>
            Where to get the property (UDA/Report/AllUDAs)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.FatherId">
            <summary>
            ID of the part whose property we wish to get or set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.InitializeTable">
            <summary>
            Used for initialization of PropertyTable 1= initialize, 0= don't
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.nProperties">
            <summary>
            Number of properties
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aSuccess">
            <summary>
            0 or 1, to determine if the value was retrieved successfully
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aIntValues">
            <summary>
            Integer return values
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aDoubleValues">
            <summary>
            Double return values
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue0">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue1">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue2">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue3">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue4">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue5">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue6">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue7">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue8">
            <summary>
            String return value
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetProperties_t.aStringValue9">
            <summary>
            String return value
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModelCommit_t">
            <summary>
            ModelCommit class serialization structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModelCommit_t.aMessage">
            <summary>
            Commit Message
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModStamp_t">
            <summary>Data structure to be used in ExportGetSetModstamp()</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStamp_t.aName">
            <summary>Name of ModStamp</summary>
            Should be set before calling ExportGetSetModstamp()
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStamp_t.aValue">
            <summary>Value of ModStamp</summary>
            Should be set before or read after calling ExportGetSetModstamp(), depending of Action
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStamp_t.Direction">
            <summary>Action to perform</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotModStamp_t.ActionEnum">
            <summary>Action to be performed by ExportGetSetModstamp</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStamp_t.ActionEnum.WRITE">
            <summary>Write ModStamp into Core from .NET</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotModStamp_t.ActionEnum.READ">
            <summary>Read ModStamp from Core into .NET</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEnumerator_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MoreObjectsLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.nObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.Filter">
            <summary>
            Enumerator type
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.SubFilter">
            <summary>
            Enumerator subtype
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.nObjectToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aObjectTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.AdditionalId">
            <summary>
            For example for getting children info
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.aFilterName">
            <summary>
            Name of the select filter to apply
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MinPoint">
            <summary>
            MinPoint of bounding box to apply.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.MaxPoint">
            <summary>
            MaxPoint of bounding box to apply.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ViewId">
            <summary>
            The view identifier to use when getting objects by bounding box and view.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ModificationStamp">
            <summary>Guid, or 2 integers encoded as Guid</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEnumerator_t.ReturnAlsoIfObjectIsCreatedAndDeletedAfterEvent">
            <summary>
            The return object as deleted if object is both created and deleted after event.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClientId_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClientId_t.ProcessId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClientId_t.ThreadId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotClientId_t.GetClientId">
            <summary>
            Get unique client id for application.
            Client id must be used with sequential queries, like
            object enumeration.
            </summary>
            <returns>Client id</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelObjectFactory">
            <summary>
            The <see cref="T:Tekla.Structures.ModelInternal.ModelObjectFactory"/> class instantiates empty object instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier)">
            <summary>
            Returns a default <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type for the given id and type without calling Select.
            </summary>
            <param name="model">The <see cref="N:Tekla.Structures.Model"/> to select the instance's type from.</param>
            <param name="identifier">Identifier of the object</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,Tekla.Structures.Model.ModelObject.ModelObjectEnum,System.Int32)">
            <summary>
            Returns a default <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type for the given id and type without calling Select.
            </summary>
            <param name="model">The <see cref="N:Tekla.Structures.Model"/> to select the instance's type from.</param>
            <param name="identifier">Identifier of the object</param>
            <param name="modelObjectType">Type of the object</param>
            <param name="modelObjectSubType">The sub-type of the object; the value's interpretation depends on <paramref name="modelObjectType"/>.</param>
            <returns>A <see cref="T:Tekla.Structures.Model.ModelObject"/> of correct type</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelObjectFactory.GetCorrectInstance(Tekla.Structures.Model.Model,Tekla.Structures.Identifier,Tekla.Structures.ModelInternal.dotModelObjectType_t)">
            <summary>
            Gets a correct <see cref="T:Tekla.Structures.Model.ModelObject"/> type instance for the given <paramref name="modelObjectType"/>.
            </summary>
            <param name="model">The <see cref="T:Tekla.Structures.Model.Model"/> to select the instance from; ignored.</param>
            <param name="identifier">The <see cref="T:Tekla.Structures.Identifier"/> to assign to the returned instance.</param>
            <param name="modelObjectType">The <see cref="T:Tekla.Structures.ModelInternal.dotModelObjectType_t"/> describing the type of <see cref="T:Tekla.Structures.Model.ModelObject"/> to get.</param>
            <returns>A correct <see cref="T:Tekla.Structures.Model.ModelObject"/> type instance for the given <paramref name="modelObjectType"/>.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPointCloud_t">
            <summary>
            Struct for the PointCloud.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.Guid">
            <summary>
            The guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.OriginalPath">
            <summary>
            The point clouds path (where it originally located).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.Url">
            <summary>
            The point clouds URL.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.Name">
            <summary>
            The point clouds name. Abbreviated from the point cloud file name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.LocationBy">
            <summary>
            The location by value: Empty for model origin, base point guid for base point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.Scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.OffsetX">
            <summary>
            The offset X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.OffsetY">
            <summary>
            The offset Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.OffsetZ">
            <summary>
            The offset Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.RotationZ">
            <summary>
            The rotation Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMinX">
            <summary>
            The bounding box min min X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMinY">
            <summary>
            The bounding box min Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMinZ">
            <summary>
            The bounding box min Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMaxX">
            <summary>
            The bounding box min max X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMaxY">
            <summary>
            The bounding box max Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPointCloud_t.BoundingBoxMaxZ">
            <summary>
            The bounding box max Z.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotProjectInfo_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aDescription">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aExtra3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aEndDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aStartDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aDesigner">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aLocation">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aAddress">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aPostalBox">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aTown">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aRegion">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aPostalCode">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aCountry">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aObject">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aBuilder">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aProjectNo">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aModelSharingLocalPath">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.aModelSharingServerPath">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotProjectInfo_t.GUID">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModel_t">
            <summary>
            Struct for the ReferenceModel
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Position">
            <summary>
            The reference models position from model origin / base point origin.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aFilename">
            <summary>
            Filename of the Reference Model
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aActiveFilePath">
            <summary>
            The path to the local copy of the current revision of the reference model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Scale">
            <summary>
            Scale of the Reference Model
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Visibility">
            <summary>
            Visibility of the Reference Model
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.UseWorkplane">
            <summary>If workplane is used.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.aBasePointGuid">
            <summary>
            The base point guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.Rotation">
            <summary>
            The rotation value in degrees.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisX_X">
            <summary>Axis vector component.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisX_Y">
            <summary>Axis vector component.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisX_Z">
            <summary>Axis vector component.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisY_X">
            <summary>Axis vector component.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisY_Y">
            <summary>Axis vector component.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModel_t.AxisY_Z">
            <summary>Axis vector component.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t">
            <summary>
            Struct for the reference model revision.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Year">
            <summary>
            Revision date: Year
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Month">
            <summary>
            Revision date: Month
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Day">
            <summary>
            Revision date: Day
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Hour">
            <summary>
            Revision date: Hour
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Minute">
            <summary>
            Revision date: Minute
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.Second">
            <summary>
            Revision date: Second
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.IsCurrentRevision">
            <summary>
            The value indicating whether this revision is the current revision.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.DbId">
            <summary>
            The database id of the revision.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.aIdentifier">
            <summary>
            The string identifier of the revision.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelRevision_t.aFileName">
            <summary>
            The file name of the revision.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObject_t">
            <summary>
            Struct for the ReferenceModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ReferenceModel">
            <summary>
            The reference model which the object is belonging to
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObject_t.ReferenceHierarchyFather">
            <summary>
            The reference model which the object is belonging to
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t">
            <summary>
            Struct for the ReferenceModelObject
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.ReferenceModelId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.ReferenceModelObjectIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.AttributeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.IFC2X3_Product">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t.IFC2X3_ParametricObject_ShapeProfile">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Origin">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.xDir">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Extrusion">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.ProfileName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double4">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double5">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double6">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double7">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double8">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_ParametricObject_ShapeProfile_t.Double9">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.IFC2X3_OwnerHistory">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.Name">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.Description">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Product_t.ObjectType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.OwningUser">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.OwningApplication">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.State">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.ChangeAction">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.CreationDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.LastModifiedDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistory_t.isSetLastModifiedDate">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t.ThePerson">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_PersonAndOrganization_t.TheOrganization">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.Version">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.ApplicationFullName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Application_t.ApplicationIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.FamilyName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.GivenName">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.MiddleNames">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Person_t.Roles">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Id">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Name">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Description">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_Organization_t.Roles">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_NOCHANGE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_MODIFIED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_ADDED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryChangeAction_t.CHANGEACTION_DELETED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_UNDEFINED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READWRITE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READONLY">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_LOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READWRITELOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIFC2X3_OwnerHistoryState_t.STATE_READONLYLOCKED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.ReferenceModelId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.ReferenceModelObjectIdentifier">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.AttributeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t.AttributeType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TypeMapper.MapTypesToIntList(System.Type[])">
            <summary>
            Convert list of model object types to list of values defined
            in enum ModelObject.ModelObjectEnum
            </summary>
            <param name="types">List of types</param>
            <see cref="T:Tekla.Structures.Model.ModelObject.ModelObjectEnum"/>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TypeMapper.GetCorrectType(System.Type)">
            <summary>
            Just returns a ModelObjectEnum of correct type for the given type.
            </summary>
            <param name="type">Type of the object</param>
            <returns>a ModelObjectEnum of correct type</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotObject_t">
            <summary>
            Object class serialization
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotObject_t.Identifier">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BentPlateTestingTool">
            <summary>
            Wrapper class for bent plate farmi tests to hide OperationStatus in different versions (was BentPlateCreationStatus in 2016i and 2016iPRx).
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BentPlateTestingTool.CreateByFaces(Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point},Tekla.Structures.Model.Part,System.Collections.Generic.IList{Tekla.Structures.Geometry3d.Point})">
            <summary>
            Creates and inserts a new <see cref="T:Tekla.Structures.Model.BentPlate" /> instance based on two parts and selected faces in each part.
            </summary>
            <param name="part1">The first part.</param>
            <param name="face1">The selected face on the first part.</param>
            <param name="part2">The second part.</param>
            <param name="face2">The selected face on the second part.</param>
            <returns>The bent plate object if successful, null otherwise</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.BentPlateTools">
            <summary>
            BentPlateTools is a utility class to handle bent plate related computations
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BentPlateTools.GetMinimumRadius(Tekla.Structures.Model.Part)">
            <summary>
            Returns the minimum radius for bend sections in a given bent plate
            </summary>
            <param name="bentPlate">the bent plate under consideration</param>
            <returns>The minimum radius for a bend sections in bentPlate</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BentPlateTools.GetMaximumRadiuses(System.Int32,Tekla.Structures.Model.ConnectiveGeometry)">
            <summary>
            Returns the maximum radius for bend section with given parameters.
            </summary>
            <param name="geometryNodeId">Bend node id in the tree</param>
            <param name="geometry">Bent plate gometry containing geometryNodeId</param>
            <returns>the maximum radius for bend section with given parameters.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BentPlateTools.ModifyCurveType(Tekla.Structures.Model.ConnectiveGeometry,System.Int32,System.Int32)">
            <summary>
            Modifies bend section curve type of the selected geometry node to Smooth, Narrow or Wide.
            </summary>
            <param name="geometry">The geometry tree containing the bend section to be modified.</param>
            <param name="geometryNodeId">The index of the geometry node, which is its rank in the breadth-first traversal of the geometry tree (root id is 0).</param>
            <param name="newCurveType">Type of the curve to be created.</param>
            <exception cref="T:Tekla.Structures.Model.ConnectiveGeometryException">Thrown if could not modify curve type of the bend surface section.</exception>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.BentPlateTools.ExtractBentPlateFromComponent(Tekla.Structures.Identifier)">
            <summary>
            If bent plate is in a component, extracts it from the component and assigns it a new Identifier.
            </summary>
            <param name="partId">Identifier of the bent plate to extract</param>
            <returns>partId or a new identifier if the bent plate was effectively extracted</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus">
            <summary>
            This enumeration represents the error codes returned by the Core transactions that have to do with base
            curve manipulation
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus.Valid">
            <summary>
            Validity code for a valid lofted plate
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus.InvalidCurveCombination">
            <summary>
            Validity code for an invalid lofted plate due to an invalid combination of base curves
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus.SomeRulingIsZero">
            <summary>
            Validity code for an invalid lofted plate due to intersecting base curves
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus.SelfIntersectingSolid">
            <summary>
            Validity code for an invalid lofted plate due to a self intersecting solid
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.LoftedPlateValidityStatus.UnknownError">
            <summary>
            Validity code for an invalid lofted plate due to an unknown reason
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPart_t">
            <summary>
            Serialization structure for Part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Position">
            <summary>
            The way the part is positioned in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Profile">
            <summary>
            The profile of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Material">
            <summary>
            The material this part is made of.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.PartNumber">
            <summary>
            Defines the numbering in part sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.AssemblyNumber">
            <summary>
            Defines the numbering in assembly sense.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.DeformingData">
            <summary>
            Defines the deforming of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aName">
            <summary>
            The name of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aClass">
            <summary>
            The class of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.aFinish">
            <summary>
            The finish of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.CastUnitType">
            <summary>
            The cast unit type of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.PourPhase">
            <summary>
            The pour phase of the part.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.StartPointOffset">
            <summary>
            Defines the part start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.EndPointOffset">
            <summary>
            Defines the part end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.Radius">
            <summary>
            Radius for curved beam. Used only internally! May be removed later when conversion from curved to polybeam exists. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.SubType">
            <summary>
            Subtype for part. Will be used for opening right object dialog.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPart_t.ClientId">
            <summary>
            Defines part client id.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPartMark_t">
            <summary>
            Serialization structure for PartMark.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartMark_t.PartID">
            <summary>
            ID of the Part whose Part Mark we wish to retrieve.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartMark_t.aPartMark">
            <summary>
            The Part Mark.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPartLine_t">
            <summary>
            Serialization structure for PartLine.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartID">
            <summary> ID of the Part whose Part Line we wish to retrieve. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartLineType">
            <summary> The Part Line type. 0 for center line, 1 for reference line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.PartLineCutted">
            <summary> Defines if Part Line is returned with cuts and fittigs. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.nPoints">
            <summary> Part Line number of points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPartLine_t.aPoints">
            <summary> The points in the Part Line. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolymesh_t">
            <summary>
            Struct for the polymesh.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymesh_t.nPolymeshes">
            <summary>
            The number of polymeshes
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymesh_t.nPolymeshFaces">
            <summary>
            The number of polymesh faces.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymesh_t.nPolymeshLoops">
            <summary>
            The number of polymesh loops.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymesh_t.ClientId">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPolymeshObject_t">
            <summary>
            Struct for the surface based model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymeshObject_t.ModelObject">
            <summary>
            The object we are extending from
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPolymeshObject_t.Polymesh">
            <summary>
            The polymesh that defines the geometry.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPourObject_t">
            <summary>
            Struct for the Pour object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.Class">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.PourNumber">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.PourType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourObject_t.ConcreteMixture">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotPourUnit_t">
            <summary>
            Struct for the Pour unit.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourUnit_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotPourUnit_t.Name">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotBasePointData_t">
            <summary>
            Struct for base point data.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.Id">
            <summary>
            Base point id.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.NorthSouth">
            <summary>
            Location in north-south.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.EastWest">
            <summary>
            Location in east-west.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.Elevation">
            <summary>
            Elevation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.Latitude">
            <summary>
            Latitude.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.Longitude">
            <summary>
            Longitude.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.LocationInModelX">
            <summary>
            Base point location in model X.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.LocationInModelY">
            <summary>
            Base point location in model Y.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.LocationInModelZ">
            <summary>
            Base point location in model Z.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.AngleToNorth">
            <summary>
            Angle to true north.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.IsProjectBasePoint">
            <summary>
            Value indicating if this base point is the project base point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.IsCurrentBasePoint">
            <summary>
            Value indicating if this base point is the current base point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.aGuid">
            <summary>
            The guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.aInitialGuid">
            <summary>
            The initial guid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.aName">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.aDescription">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotBasePointData_t.aCoordinateSystem">
            <summary>
            The name.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTask_t">
            <summary>
            Serialization structure for task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aName">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Completeness">
            <summary>
            Percentage of completeness of the task on the scale from 0 to 100.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Critical">
            <summary>
            Criticality of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Local">
            <summary>
            Locality indicates if the task was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.Scenario">
            <summary>
            The scenario which the task belongs to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aDescription">
            <summary>
            Description of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.aUrl">
            <summary>
            Link to a location or document containing information of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedStartDate">
            <summary>
            Planned start date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedEndDate">
            <summary>
            Planned end date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.PlannedWorkAmount">
            <summary>
            Planned work amount in hours
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualStartDate">
            <summary>
            Actual start date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualEndDate">
            <summary>
            Actual end date of the task.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTask_t.ActualWorkAmount">
            <summary>
            Actual work amount in hours
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t">
            <summary>
            Struct for UI selection.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.ModelObject">
            <summary>
            The object we are attaching to.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.Functionality">
            <summary>
            FunctionalityEnum.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.nObjects">
            <summary>
            Number of objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t.aObjects">
            <summary>
            Identifiers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskDependency_t">
            <summary>
            Struct for the TaskDependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.PrimaryId">
            <summary>
            Task ID of the primary task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.SecondaryId">
            <summary>
            Task ID of the secondary task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Type">
            <summary>
            The type of the task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Lag">
            <summary>
            Lag of the task dependency.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskDependency_t.Local">
            <summary>
            Locality indicates if the dependency was created in Tekla Structures and Task Manager or imported.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTaskWorktype_t">
            <summary>
            Struct for the TaskWorktype.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskWorktype_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTaskWorktype_t.aName">
            <summary>
            Name of the task worktype.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarStrip_t">
            <summary>
            Struct for the BaseRebarModifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.ModelObject">
            <summary>
            The model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.FatherId">
            <summary>
            The father ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.Curve">
            <summary>
            The curve.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.BarsAffected">
            <summary>
            The bars affected.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.FirstAffectedBar">
            <summary>
            The first affected bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.FollowEdges">
            <summary>
            The follow edges flag.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.ApplyOrderNumber">
            <summary>
            The apply order number.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrip_t.Flags">
            <summary>
            The set/unset flags.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarCranking_t">
            <summary>
            The rebar cranking struct.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankingType">
            <summary>
            The cranking type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankSide">
            <summary>
            The crank side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankRotation">
            <summary>
            The crank rotation.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankStraightLength">
            <summary>
            The crank straight length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankedLengthType">
            <summary>
            The cranked length type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankedRatio">
            <summary>
            The cranked ratio.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankedDistance">
            <summary>
            The cranked distance.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarCranking_t.CrankedOffset">
            <summary>
            The cranked offset.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t">
            <summary>
            Struct for the RebarEndDetailModifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.RebarStrip">
            <summary>
            The rebar strip.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.RebarHookData">
            <summary>
            The rebar hook data.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.RebarThreading">
            <summary>
            The rebar threading.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.RebarLengthAdjustment">
            <summary>
            The rebar length adjustment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.RebarCranking">
            <summary>
            The rebar cranking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.EndType">
            <summary>
            The end type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t.HookRotation">
            <summary>
            The hook rotation.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGuideline_t">
            <summary>
            The structure for passing guideline data between OpenAPI and core.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGuideline_t.Id">
            <summary>
            The database id.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGuideline_t.FirstPoint">
            <summary>
            The index of the first point in the rebarset's overall points list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGuideline_t.NumberOfPoints">
            <summary>
            The number of contour points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGuideline_t.FollowEdges">
            <summary>
            The follow edges flag.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGuideline_t.Spacing">
            <summary>
            The spacing.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLegFace_t">
            <summary>
            The structure for passing legface data between OpenAPI and core.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.Id">
            <summary>
            The database id.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.AdditionalOffset">
            <summary>
            The additional offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.LayerOrderNumber">
            <summary>
            The layer order number.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.Reversed">
            <summary>
            Reversed flag.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.FirstPoint">
            <summary>
            The index of the first point in the rebarset's overall points list.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegFace_t.NumberOfPoints">
            <summary>
            The number of contour points.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotLegSurfaceObject_t">
            <summary>
            The structure for passing leg surface object data between OpenAPI and core.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegSurfaceObject_t.SurfaceObject">
            <summary>
            The surface object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegSurfaceObject_t.RebarSetId">
            <summary>
            The rebar set ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegSurfaceObject_t.LayerNumber">
            <summary>
            The layer number.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotLegSurfaceObject_t.AdditionalOffset">
            <summary>
            The additional offset.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.RebarLegSurfaceObject">
             <summary>
             The RebarLegSurfaceObject class represents a polymesh surface for generating rebar legs in a <see cref="P:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.RebarSet"/>.
             </summary>
             <example>
             <code>
             using Tekla.Structures.Model;
             using Tekla.Structures.Geometry3d;
            
             public class Example
             {
                 public void Example1(Vector[] vertices, int[][] outerWires, IDictionary&lt;int, int[][]&gt; innerWires)
                 {
                     var beam = new Beam();
                     // Set Beam properties (code omitted)...
                     beam.Insert();
            
                     var rebarSet = new RebarSet();
                     // Set RebarSet properties (code omitted)...
                     rebarSet.Insert();
            
                     var legSurface = new RebarLegSurfaceObject();
                     legSurface.Polymesh = new FacetedBrep(vertices, outerWires, innerWires);
                     legSurface.Father = beam;
                     legSurface.RebarSet = rebarSet;
                     legSurface.LayerNumber = 1;
                     legSurface.AdditionalOffset = 25.0;
                     legSurface.Insert();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.RebarLegSurfaceObject"/> class.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.RebarSet">
            <summary>
            Gets or sets the <see cref="P:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.RebarSet"/> to which the leg surface object belongs.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.LayerNumber">
            <summary>
            Gets or sets the layer number of the leg surface object.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.AdditionalOffset">
            <summary>
            Gets or sets the user defined offset of the rebar legs from the leg surface object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.Insert">
            <summary>
            Inserts the leg surface object into the model database.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.Select">
            <summary>
            Selects the leg surface object from the model database. The identifier must be set.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.Modify">
            <summary>
            Modifies the existing leg surface object in the model database to match the current one.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.ToStruct(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <summary>
            Converts this instance to a struct.
            </summary>
            <param name="output">The output parameter.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.RebarLegSurfaceObject.FromStruct(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <summary>
            Sets the properties of this instance from the struct.
            </summary>
            <param name="input">The input parameter.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarLengthAdjustment_t">
            <summary>
            The rebar length adjustment struct.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarLengthAdjustment_t.AdjustmentType">
            <summary>
            The adjustment type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarLengthAdjustment_t.AdjustmentLength">
            <summary>
            The adjustment length.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarProperties_t">
            <summary>
            Struct for the RebarProperties.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.Grade">
            <summary>
            The grade.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.Class">
            <summary>
            The class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.Finish">
            <summary>
            The finish.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.NumberingSeries">
            <summary>
            Defines the rebar numbering.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.BendingRadius">
            <summary>
            Defines the bending radius.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarProperties_t.StringSize">
            <summary>
            The string size.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t">
            <summary>
            Struct for the RebarPropertyModifier.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t.RebarStrip">
            <summary>
            The rebar strip.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t.RebarProperties">
            <summary>
            The rebar properties.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t.GroupingType">
            <summary>
            The grouping type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSet_t">
            <summary>
            Struct for the Rebar set.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.RebarProperties">
            <summary>
            The default rebar properties.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.LayerOrderNumber">
            <summary>
            The layer order number.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.NumberLegFaces">
            <summary>
            The number of legfaces
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.NumberGuidelines">
            <summary>
            The number of guidelines.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.NumberContourPoints">
            <summary>
            The overall number of contour points used in the rebar set.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSet_t.NumberSpacingZones">
            <summary>
            The total number of spacing zones for all guidelines in the rebar set.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSetAddition_t">
            <summary>
            Struct for the Rebar set addition.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSetAddition_t.ModelObject">
            <summary>
            The object we are extending (Inherited from).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSetAddition_t.FatherId">
            <summary>
            ID of the father RebarSet.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSetAddition_t.NumberLegFaces">
            <summary>
            The number of legfaces
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSetAddition_t.NumberContourPoints">
            <summary>
            The overall number of contour points used in the rebar set addition.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSpacing_t">
            <summary>
            Serialization structure for RebarSpacing.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.FirstSpacingZone">
            <summary>
            The index of the first spacing zone
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.NumberSpacingZones">
            <summary>
            The number of spacing zones.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.StartOffset">
            <summary>
            The start offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.EndOffset">
            <summary>
            The end offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.StartOffsetIsFixed">
            <summary>
            Indicates whether the start offset is fixed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.EndOffsetIsFixed">
            <summary>
            Indicates whether the end offset is fixed.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.StartOffsetIsAutomatic">
            <summary>
            Indicates whether the start offset is automatic.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.EndOffsetIsAutomatic">
            <summary>
            Indicates whether the end offset is automatic.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSpacing_t.InheritFromPrimary">
            <summary>
            Indicates whether the guideline has inherited spacings from the primary guideline.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSpacingZone_t">
            <summary>
            The spacing zone structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.Number">
            <summary>The number of spaces.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.Spacing">
            <summary>The spacing value.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.Length">
            <summary>The zone length.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.NumberIsFixed">
            <summary>Indicates whether the number of spaces is fixed.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.SpacingIsFixed">
            <summary>Indicates whether the spacing value is fixed.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSpacingZone_t.LengthIsFixed">
            <summary>Indicates whether the zone length is fixed.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSplitter_t">
            <summary>
            Struct for the RebarSplitter.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.RebarStrip">
            <summary>
            The rebar strip.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.RebarCranking">
            <summary>
            The rebar cranking.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.SplitType">
            <summary>
            The split type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.LappingType">
            <summary>
            The lapping type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.LapLength">
            <summary>
            The lap length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.StaggerType">
            <summary>
            The stagger type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.StaggerOffset">
            <summary>
            The stagger offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.LapSide">
            <summary>
            The lap side.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.SplitOffset">
            <summary>
            The split offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplitter_t.LapOffsetDir">
            <summary>
            The lap offset direction.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarThreading_t">
            <summary>
            The rebar threading struct.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarThreading_t.ThreadingType">
            <summary>
            The threading type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarThreading_t.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarThreading_t.ExtraFabLength">
            <summary>
            The extra fab length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarThreading_t.StringSize">
            <summary>
            The string size.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarGroup_t">
            <summary>
            Serialization structure for RebarGroup.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.Reinforcement">
            <summary> The base class for all reinforcements. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StartHook">
            <summary> The hook at the beginning of the reinforcing bar. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.EndHook">
            <summary> The hook at the end of the reinforcing bar. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.ExcludeType">
            <summary> Defines which bars to omit from the group. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nPolygons">
            <summary> Number of polygons. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nPointsInPolygon">
            <summary> Number of points in each polygon. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aX">
            <summary> The x-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aY">
            <summary> The y-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aZ">
            <summary> The z-coordinates of all points. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.SpacingType">
            <summary> The type of spacing. </summary>        
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.nSpacingValues">
            <summary> Number of spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aSpacingMultipliers">
            <summary> Spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.aSpacings">
            <summary> Spacing value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StirrupType">
            <summary> The type of stirrup. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.StartPoint">
            <summary> The start point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.EndPoint">
            <summary> The end point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarGroup_t.SubType">
            <summary> Defines rebar group type (group, curved, circle). </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t">
            <summary>
            Serialization structure for <see cref="T:Tekla.Structures.Model.RebarComplexGeometry"/>.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.MAX_REBAR_COMPLEX_GEOMETRY_LEG_COUNT">
            <summary>
            The maximum number of legs that can be transferred using this structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.WithHooks">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.WithoutClashes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.LengthAdjustments">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.ClientIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.ReinforcementIdentifier">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.aDiametersAndBendings">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t.aLegOrigins">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWire_t">
            <summary>
            Serialization structure for RebarGroup inner rebars.
            Stores several wires at a time in order to reduce remote call overhead.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.MAX_REBAR_GEOMETRY_POLYGON_COUNT">
            <summary>
            The maximum number of polygons that can be transferred using this structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.MAX_REBAR_GEOMETRY_POINT_COUNT">
            <summary>
            The maximum number of points that can be transferred using this structure.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.GroupIdentifier">
            <summary> Identifier of the load group for which we search the inner rebars </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.ClientIdentifier">
            <summary>The client identifier.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.WithHooks">
            <summary> This variable tells whether the hooks should be included in the geometry or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.WithoutClashes">
            <summary> This variable tells whether the overlapped geometry is returned. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.LengthAdjustments">
            <summary>This variable tells whether rounding and step tapering are applied.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.UsingLists">
            <summary>This variable tells whether the data is too large to pass in one go and instead is using the ListExporter</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.nPolygons">
            <summary> The number of polygons.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.anPolygonPoints">
            <summary> Indicates the number of polygon points for each wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aDiameter">
            <summary> The diameter of the wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aPositionPoints">
            <summary> Position points for a wire. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWire_t.aBendingRadiuses">
            <summary> The bending radiuses of the wire </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarHookData_t">
            <summary> Serialization structure for RebarHookData. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Angle">
            <summary> The angle of the hook. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Radius">
            <summary> The bending radius of the hook.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Length">
            <summary> The length of the straight part of the hook.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarHookData_t.Shape">
            <summary> The shape of the hook. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarMesh_t">
            <summary> Serialization structure for Mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Reinforcement">
            <summary> The base class for all reinforcements. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.MeshType">
            <summary> The type of the mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Polygon">
            <summary> The polygon of the mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LongitudinalSpacingMethod">
            <summary> The spacing type of longitudinal bars. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.nLongitudinalDistances">
            <summary> The number of longitudinal spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aLongitudinalDistanceMultipliers">
            <summary> Longitudinal spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aLongitudinalDistances">
            <summary> The  longitudinal spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.nCrossDistances">
            <summary> The number of crossing spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aCrossDistanceMultipliers">
            <summary> Crossing spacing multiplier value(s).  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.aCrossDistances">
            <summary> The  crossing spacing values. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.StartPoint">
            <summary> The start point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.EndPoint">
            <summary> The end point of the direction in which the bars are distributed. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LeftOverhangCross">
            <summary> The secondary bar�s overhang on left. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LeftOverhangLongitudinal">
            <summary> The main bar�s overhang on left. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.RightOverhangCross">
            <summary> The secondary bar�s overhang on right. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.RightOverhangLongitudinal">
            <summary> The main bar�s overhang on right. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CrossSize">
            <summary> The crossing bar�s size. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.LongitudinalSize">
            <summary> The longitudinal bar�s size. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Width">
            <summary> The width of the rebar mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.Length">
            <summary> The length of the rebar mesh. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CatalogName">
            <summary> The name of the rebar mesh catalog </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CrossBarLocation">
            <summary> The location of the crossing bars. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.CutByFatherPartCuts">
            <summary> Defines if rebar mesh is cut by father part cuts or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.StartHook">
            <summary> The hook at the beginning of the reinforcing. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarMesh_t.EndHook">
            <summary> The hook at the end of the reinforcing. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarSplice_t">
            <summary>
            Serialization structure for RebarSplice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Reinforcement1">
            <summary>
            The first reinforcement connected to the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Reinforcement2">
            <summary>
            The second reinforcement connected to the splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Type">
            <summary>
            The type of splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.LapLength">
            <summary>
            Lap length of the lap type splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Offset">
            <summary>
            Distance from the splice definition point along bar length.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.Clearance">
            <summary>
            Clearance between joined bars in case of the lap type splice.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarSplice_t.BarPositions">
            <summary>
            Value 0: Joined bars on top of each other in case of the lap type splice.
            Value 1: Joined bars parallel to each other in case of the lap type splice. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotRebarStrand_t">
            <summary>
            Serialization structure for RebarStrand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.Reinforcement">
            <summary>
            The base class for all reinforcements.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.PullPerStrand">
            <summary>
            Pull per strand (N).
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nPatterns">
            <summary>
            The number of patterns.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nPointsInPattern">
            <summary>
            The number of points in each pattern.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.nUnbondings">
            <summary>
            The number of unbondings.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aStrandIndex">
            <summary>
            Indexes of the strands.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aFromStart">
            <summary>
            Unbondings from the start of the strand for each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aMiddleToStart">
            <summary>
            Unbondings from middle of the strand 
            to the start of the strand for each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aMiddleToEnd">
            <summary>
            Unbondings from middle of the strand to the end of the
            each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.aFromEnd">
            <summary>
            Unbondings from end of the each strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.StartPoint">
            <summary>
            Startpoint of the strand.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotRebarStrand_t.EndPoint">
            <summary>
            Endpoint of the strand.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotReinforcement_t">
            <summary>
            Serialization structure for Reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.ModelObject">
            <summary>
            Base class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.Father">
            <summary>
            The father part of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aSize">
            <summary>
            The size of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aGrade">
            <summary>
            The steel grade of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aName">
            <summary>
            Name of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.Class">
            <summary>
            Class of the reinforcement. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.NumberingSeries">
            <summary>
            Numbering series of the reinforcement.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.nOnPlaneOffsetValues">
            <summary>
            Number of offset values.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aOnPlaneOffsets">
            <summary>
            The offset value for each leg on the same plane as the bar. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartFromPlaneOffset">
            <summary>
            The start offset value from the part surface. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartPointOffsetType">
            <summary>
            The type of the start point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.StartPointOffsetValue">
            <summary>
            The concrete cover thickness or leg length at the first end of the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndPointOffsetType">
            <summary>
            The type of the end point offset.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndPointOffsetValue">
            <summary>
            The concrete cover thickness or leg length at the second end of the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.nRadiusValues">
            <summary>
            Number of the radiusvalues.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.aRadiusValues">
            <summary>
            The radius value(s) of the bends in the bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.EndFromPlaneOffset">
            <summary>
            The end offset value from the part surface. 
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotReinforcement_t.DeformingType">
            <summary>
            Deforming type of the reinforcement.
            Used to define the reinforecment deforming during insert. 
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSingleRebar_t">
            <summary>
            Serialization structure for SingleRebar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.Reinforcement">
            <summary>
            The base class for all reinforcements.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.StartHook">
            <summary>
            The hook at the beginning of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.EndHook">
            <summary>
            The hook at the end of the reinforcing bar.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSingleRebar_t.Polygon">
            <summary>
            The polygon.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.AreWeUnitTesting">
            <summary>
            This is to enable unit-testing specific features like faking TS connection.
            This class hold a flag that is set to true when user wants to prevent 
            DelegateProxy's static constructor from running and creating IPC connection.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.AreWeUnitTesting.Value">
            <summary>
            Gets or sets a value indicating whether we are running in unit testing
            environment where ICDelegate is replaced with a fake.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Synchronize">
            <summary>
            Synchronization class for .NET picking and synced commands where we
            start a command and wait for it to complete.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.Sync">
            <summary>
            Releases the sync handle. Called from TeklaStructures.exe
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.WaitForSynchronization">
            <summary>
            Waits until sync handle is released.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.Reset">
            <summary>
            Reset the sync handle
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Synchronize.GetSyncCallback">
            <summary>
            Get sync callback to Sync()
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegate">
            <summary>
            CDelegate includes all the platform invoke commands user process can call.
            It uses CDelegateSynchronized to deliver the calls to C-interface.
            </summary>
            Adding a new class to interface goes like this:
            1. Add a new delegate function type to definitions in this class.
            2. Add Create/Select/Modify functions according to examples to this class.
            3. Add Matching EndInvoke function to CDelegateSynchronized class.
            4. Add Create/Select/Modify functions according to examples to CDelegateSynchronized
            5. Add public static extern int functions for Create/Select/Modify to the end of CDelegateSynchronized.
            6. Implement the static functions to TS.
            7. Test
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegate.Singletons">
            <summary>
            Storage class for singleton instances.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegate.Singletons.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler
            not to mark type as beforefieldinit. Do not remove.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegate.#ctor">
            <summary>
            Instantiates a new CDelegate
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSurfaceObject_t">
            <summary>
            Struct for the surface based model object.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.ModelObject">
            <summary>
            The object we are extending from
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.Polymesh">
            <summary>
            The polymesh that defines the geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.Class">
            <summary>
            The class attribute.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.Name">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.Type">
            <summary>
            The type attribute.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.RelatedObjectId">
            <summary>
            The related object ID.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceObject_t.CreateHoles">
            <summary>
            The createholes attribute.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateSynchronized">
            <summary>
            CDelegateSynchronized includes all the platform invokable commands and synchronization to AKIT.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportExtractBentPlateFromComponent(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyBendSurfaceNode(System.Int32,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportComponentGetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            Gets the applied attributes for a given object type.
            </summary>
            <param name="baseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="ignoreDefaultValues">Fetch also attributes with default attribute values.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.SetStringPropertyValueToStruct(System.Int32,System.Object,Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.SetPropertyNameToStruct(System.Int32,System.Object,Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.SetPropertyNameAndValueToStruct(System.Int32,System.Object,System.Object,Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.SetPropertyStruct(System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Int32@,Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportComponentSetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            Sets the applied attributes for a given object type.
            </summary>
            <param name="baseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="addNewAttributes">Are new attributes registered to internal component data storage.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCalculateContourPolygon(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="contour">The contour.</param>
            <param name="polygon">The polygon.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetBoltedPartsHoleElevations(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Tuple{System.Double,System.Double}})">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="boltId">The bolt identifier.</param>
            <param name="holeElevations">The hole elevations.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetAttributeFiles(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            Gets all attribute files with specified suffix.
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetAttributeFilesWithPrefix(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            Gets all attribute files with specified prefix and suffix.
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetStringPropertyFromDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSetStringPropertyToDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportFetchFromDatabase(System.Collections.Generic.List{System.String}@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetSolidMerged(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetCutSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDasStartCommand(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDasStartAction(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportUndoOperation(Tekla.Structures.ModelInternal.dotUndoOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportFingerprint(Tekla.Structures.ModelInternal.dotPolymesh_t@,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateNewModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModel2Operation(Tekla.Structures.ModelInternal.dotModel2Operation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportExternalDrawOperation(Tekla.Structures.ModelInternal.dotExternalDrawOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportTranslateLabel(Tekla.Structures.ModelInternal.dotTranslateLabel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSingleRebarGetRebarSet(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="singleRebarId">The single rebar ID.</param>
            <returns>The rebar set ID if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportGetShapeMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="guid">GUID of the shape whose metadata we are getting</param>
            <param name="ClientId">Client ID to identify the communication partners.</param>
            <returns>Returns 1 if successful, 0 otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportSelectLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportModifyLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportCreateLegSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ImportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.GetRenderingColorIndex(Tekla.Structures.Model.UI.Color,System.Collections.Generic.List{Render.Color}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportRenderGraphicContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicLine}@,System.Collections.Generic.List{Tekla.Structures.Model.UI.GraphicPolyLine}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicFace}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicText}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDeleteGraphicObjectContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportDeleteAllGraphicObjectContainers(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCalculateContourPolygon(Tekla.Structures.ModelInternal.dotContourPoint_t*,System.Int32,Tekla.Structures.Internal.dotPoint_t*@,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pContour">The contour.</param>
            <param name="ContourSize">The contour size.</param>
            <param name="ppPolygon">The polygon.</param>
            <param name="pPolygonSize">The polygon size.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSetNewBentPlateRoot(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId">The node identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyBendAngle(System.Double,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="angle">The angle.</param>
            <param name="curvedNodeId">The node identifier.</param>
            <param name="movingNodeId">The direction node identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetBoltedPartsHoleElevations(System.Int32,System.Int32@,System.Int32*@,System.Double*@,System.Double*@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="boltId">The bolt identifier.</param>
            <param name="pnPoints">Number of points.</param>
            <param name="ppParts">Part list</param>
            <param name="ppFirstPoint">The first elevation point list</param>
            <param name="ppSecondPoint">the second elevation point list</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportUndoOperation(Tekla.Structures.ModelInternal.dotUndoOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotImportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,Tekla.Structures.ModelInternal.dotLegFace_t*,Tekla.Structures.ModelInternal.dotGuideline_t*,Tekla.Structures.ModelInternal.dotContourPoint_t*,Tekla.Structures.ModelInternal.dotSpacingZone_t*)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,Tekla.Structures.ModelInternal.dotLegFace_t*,Tekla.Structures.ModelInternal.dotGuideline_t*,Tekla.Structures.ModelInternal.dotContourPoint_t*,Tekla.Structures.ModelInternal.dotSpacingZone_t*)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,Tekla.Structures.ModelInternal.dotLegFace_t*@,Tekla.Structures.ModelInternal.dotGuideline_t*@,Tekla.Structures.ModelInternal.dotContourPoint_t*@,Tekla.Structures.ModelInternal.dotSpacingZone_t*@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,Tekla.Structures.ModelInternal.dotLegFace_t*,Tekla.Structures.ModelInternal.dotContourPoint_t*)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,Tekla.Structures.ModelInternal.dotLegFace_t*,Tekla.Structures.ModelInternal.dotContourPoint_t*)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,Tekla.Structures.ModelInternal.dotLegFace_t*@,Tekla.Structures.ModelInternal.dotContourPoint_t*@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetSetModstamp(Tekla.Structures.ModelInternal.dotModStamp_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModStampCompare(Tekla.Structures.ModelInternal.dotModStampCompare_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetBeamPositioningBox(Tekla.Structures.ModelInternal.dotBeamPositioningBox_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotGrdrShowPreviewDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSingleRebarGetRebarSet(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="singleRebarId">The single rebar ID.</param>
            <returns>The rebar set ID if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetShapeMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="guid">The GUID of the shape.</param>
            <param name="clientId">Calling client ID.</param>
            <returns>1 if getting the metadata was successful, 0 otherwise</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifySurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportModifyLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateSurfaceByFaceAndAttrib(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateLegSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetAssociateSurfaces(System.Int32,System.Int32*@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetParentObject(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetAssemblyId(System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetSurfaceGeometryType(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportCreateConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportSelectConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportDeleteConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetReferenceModelObjectByExternalGuid(System.Int32,Tekla.Structures.Internal.dotIdentifier_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetFirstReferenceModelObjectByExternalGuid(Tekla.Structures.Internal.dotIdentifier_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportGetDatabaseVersion(System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportRunDataRetrieverCommand(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportFingerprint(Tekla.Structures.ModelInternal.dotPolymesh_t@,System.Text.StringBuilder)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportBatchEditorHandler(Tekla.Structures.ModelInternal.dotBatchEditorHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.dotExportMarkObjectModifiedForOrganizer(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.EndInvoke(Tekla.Structures.ModelInternal.dotUIPicker_t@,System.IAsyncResult)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSynchronized.ExportBatchEditorHandler(Tekla.Structures.ModelInternal.dotBatchEditorHandler_t@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CDelegateWrapper._instance">
            <exclude />
        </member>
        <member name="F:Tekla.Structures.ModelInternal.CDelegateWrapper._functionality">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.#ctor(Tekla.Structures.ModelInternal.ICDelegate,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectSelect(Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t@)">
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportTaskObjectAttach(Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreatePart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to create.</param>
            <param name="contour">Contour points of the part.</param>
            <returns>0 in the case of failure and 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportValidateLoftedPlate(System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="baseCurves"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBentPlateByParts(System.Int32,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBentPlateByPartsAndRadius(System.Int32,System.Int32,System.Double)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateConicalBentPlateByPartsAndRadiusAperture(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="radius"></param>
            <param name="halfAperture"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateConicalBentPlateByPartsAndTwoRadiuses(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="firstRadius"></param>
            <param name="secondRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBentPlateByFaces(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBentPlateByFacesAndRadius(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateConicalBentPlateByFacesAndRadiusAperture(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double,System.Double)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="part1Id"></param>
            <param name="part2Id"></param>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="largestRadius"></param>
            <param name="halfAperture"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTrees(Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTreesWithRadius(System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="radius"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTreesWithRadiusAperture(System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="largestRadius"></param>
            <param name="halfAperture"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTreesByPoints(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTreesByPointsWithRadius(System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="radius"></param>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConnectGeometryTreesByPointsWithRadiusAperture(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="largestRadius"></param>
            <param name="halfAperture"></param>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGeometryTreeCylindricalNodeRadius(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="radius"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyConicalNodeRadiuses(System.Int32,System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="newMaxRadius"></param>
            <param name="newMinRadius"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGeometryTreeConicalNodeByScale(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="scale"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGeometryTreeCylindricalNodeCurveType(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="newCurveType"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGeometryTreePolygonNode(System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="contour"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBendSurfaceNode(System.Int32,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="firstBoundaryPoints"></param>
            <param name="secondBoundaryPoints"></param>
            <param name="surfacePoints"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetNewBentPlateRoot(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBendAngle(System.Double,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="angle"></param>
            <param name="curvedNodeId"></param>
            <param name="movingNodeId"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExplodeBentPlate(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="partId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportExtractBentPlateFromComponent(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="partId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBentPlateMinimumRadius(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="partId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBentPlateMaximumRadiuses(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSpiralBeamEndPoint(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotVector_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RotationAngle"></param>
            <param name="TotalRise"></param>
            <param name="pStartPoint"></param>
            <param name="pCenterPoint"></param>
            <param name="pRotationAxisDirection"></param>
            <param name="pEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCompareObjects(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="ObjectToCompareId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBoltGroup(System.Double,System.Double,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberOfBolts"></param>
            <param name="Diameter"></param>
            <param name="pBoltGroup"></param>
            <param name="BoltDistX"></param>
            <param name="BoltDistY"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="imagePoints"></param>
            <param name="slopes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModelObjectAttributeEnumerator(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReferenceModelObjectAttribute(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRMOAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayComponentHelp(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayAutoDefaultSettings(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportStartCustomComponentCreation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ComponentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportStartPluginCreation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ComponentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportComponentGetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="ignoreDefaultValues">Fetch also attributes with default attribute values.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportComponentSetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="addNewAttributes">Are new attributes registered to internal component data storage.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreatePourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSplitPart(System.Int32,Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="PartId"></param>/// 
            <param name="pSplit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetFatherComponent(System.Int32,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="FatherComponentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPolybeamCoordinateSystem(System.Int32,System.Int32,System.Int32,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Id"></param>
            <param name="SubId"></param>
            <param name="Chamfered"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCalculateContourPolygon(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="contour">The contour.</param>
            <param name="polygon">The polygon.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPartLine(Tekla.Structures.ModelInternal.dotPartLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartLine"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to select.</param>
            <param name="contour">Contour points of the part.</param>
            <returns>0 in the case of failure and 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportFormatProfile(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportParseProfile(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectBoltGroup(System.Double@,System.Double@,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@,System.Collections.ArrayList@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberOfBolts"></param>
            <param name="pDiameter"></param>
            <param name="pBoltGroup"></param>
            <param name="pBoltDistX"></param>
            <param name="pBoltDistY"></param>
            <param name="pBoltPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBoltedPartsHoleElevations(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Tuple{System.Double,System.Double}})">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="boltId">The bolt identifier.</param>
            <param name="holeElevations">The hole elevations.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetWeldGeometry(Tekla.Structures.ModelInternal.dotWeldGeometry_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeldGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarBars(Tekla.Structures.ModelInternal.dotWire_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWire"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetRebarComplexGeometries(Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="imagePoints"></param>
            <param name="slopes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectReferenceModelObject(Tekla.Structures.ModelInternal.dotReferenceModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The bent plate to modify</param>
            <returns>0 in the case of failure and 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to modify</param>
            <param name="contour">Contour points of the part.</param>
            <returns>0 in the case of failure and 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBoltGroup(System.Double,System.Double,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberOfBolts"></param>
            <param name="Diameter"></param>
            <param name="pBoltGroup"></param>
            <param name="pBoltDistX"></param>
            <param name="pBoltDistY"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifySurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifySingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="imagePoints"></param>
            <param name="slopes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRefreshReferenceFile(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetReferenceModelRevisionIds(Tekla.Structures.ModelInternal.dotReferenceModel_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectReferenceModelRevision(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotReferenceModelRevision_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <param name="pRevision"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRemoveReferenceModelRevision(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetAsCurrentRevision(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBasePoints(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectBasePoint(System.String,Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid"></param>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConvertToBasePoint(System.String,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="pPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportConvertFromBasePoint(System.String,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="pPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetAsCurrentBasePoint(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAttachPointCloud(Tekla.Structures.ModelInternal.dotPointCloud_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPointCloud"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDetachPointCloud(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPointClouds(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPointCloudVisibleInViews(Tekla.Structures.ModelInternal.dotClientId_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <param name="pointCloudGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectPointCloud(System.String,Tekla.Structures.ModelInternal.dotPointCloud_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <param name="pPointCloud"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetPointCloudVisibility(System.String,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <param name="viewObjectId"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDaoFindObject(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="parentId"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCleanDrawingFiles(System.Boolean,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Silent"></param>
            <param name="BackupPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicDefinition(Tekla.Structures.ModelInternal.dotHierarchicDefinition_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicObject(Tekla.Structures.ModelInternal.dotHierarchicObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportHierarchicObjectChildrenOperation(Tekla.Structures.ModelInternal.dotHierarchicList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBuildingHierarchyChildObjectGuids(Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Operation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBuildingHierarchySiteOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Site"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBuildingHierarchyBuildingOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Building"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBuildingHierarchyStoreyOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="StoreyOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBuildingHierarchyOverrideOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="OverrideOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBuildingHierarchyGetObjectsOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="OverrideOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteObject(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportEnumerateObjects(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolid(Tekla.Structures.ModelInternal.dotSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetIntersectionSolid(Tekla.Structures.ModelInternal.dotIntersectionSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetIntersectionPoints(Tekla.Structures.ModelInternal.dotIntersectionPoints_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIntersectionPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCommitChanges(Tekla.Structures.ModelInternal.dotModelCommit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelCommit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunOrStopClashCheck(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RunningClashCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunClashCheckWithOptions(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="betweenReferenceModels"></param>
            <param name="objectsInsideReferenceModels"></param>
            <param name="minDistance"></param>
            <param name="betweenParts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetIntersectionBoundingBoxes(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Identifier1"></param>
            <param name="Identifier2"></param>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDetectedClash(Tekla.Structures.ModelInternal.dotClash_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClash"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetNumberOfClashes(System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClashes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCommandStatus(System.String@,System.String@,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="TSCommand"></param>
            <param name="TSCommandParam"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetTrackEvent(System.String@,System.String@,System.String@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="category"></param>
            <param name="eventName"></param>
            <param name="eventContent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCommitData(Tekla.Structures.Internal.dotIdentifier_t@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pId"></param>
            <param name="pObjectType"></param>
            <param name="pObjectSubType"></param>
            <param name="pCommitType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDotType(Tekla.Structures.ModelInternal.dotModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPartMark(Tekla.Structures.ModelInternal.dotPartMark_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartMark"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCoordinateSystem(Tekla.Structures.ModelInternal.dotModelObject_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPointInputChangedEvent(System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportStartPolyLineInputGeometry(Tekla.Structures.ModelInternal.dotInputGeometry_t@,System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientID"></param>
            <param name="pPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetProperty(Tekla.Structures.ModelInternal.dotSetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAllReportProperties(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGetProperties_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAllProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <param name="pNames"></param>
            <param name="pValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSetModelInfo(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportInitializeComponentStacks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddComponentAttributeToStack(Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAttr"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddComponentInputToStack(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetComponentInput(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportLoadComponentAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetComponentAttribute(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetNumberingUpToDate(Tekla.Structures.ModelInternal.dotNumberingQuery_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberingQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSimilarNumberedObjects(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportNumGetObjectsTransformation(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="object1Id">Object 1 id</param>
            <param name="object2Id">Object 2 id</param>
            <param name="cs1">Cs 1</param>
            <param name="cs2">Cs 2</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateReport(Tekla.Structures.ModelInternal.dotCreateReportFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aReport"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayReport(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDisplayPrompt(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAttributeFiles(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAttributeFilesWithPrefix(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportTryGetSubdirectoryFromFileName(Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportWriteToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportWriteErrorToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateNC(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aNC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateNCStructure(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@,Tekla.Structures.ModelInternal.dotDstvHeader@,Tekla.Structures.ModelInternal.dotDstvContours@,Tekla.Structures.ModelInternal.dotDstvHoles@,Tekla.Structures.ModelInternal.dotDstvMarks@,Tekla.Structures.ModelInternal.dotDstvBentLines@,Tekla.Structures.ModelInternal.dotDstvNumerations@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDotCreateNCFromModel"></param>
            <param name="pDstvHeader"></param>
            <param name="pDstvContours"></param>
            <param name="pDstvHoles"></param>
            <param name="pDstvMarks"></param>
            <param name="pDstvBentLines"></param>
            <param name="pDstvNumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportExternalRefenceModel(Tekla.Structures.ModelInternal.dotExternalReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aExternalReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetImportedExternalReferenceModels(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.RemoveExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ShowExternalReferenceModel(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="restrictToWorkArea"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.HideExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.SetExternalReferenceModelObjectVisibilities(System.String,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="isVisible"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ZoomToExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ZoomViewToExternalReferenceModel(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="aViewId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.SetSelectedExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelLayers(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.SetExternalReferenceModelLayerVisibilities(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.SetExternalReferenceModelObjectColoring(System.String,System.Double,System.Double,System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="alpha"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ResetExternalReferenceModelColoring(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.StartExternalReferenceModelChangeDetection(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aCurrenVersion"></param>
            <param name="aNewVersion"></param>
            <param name="changed"></param>
            <param name="inserted"></param>
            <param name="deleted"></param>
            <param name="unchanged"></param>
            <param name="comparisonSetTitle"></param>
            <param name="tolerancesTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.StopExternalReferenceModelChangeDetection">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelSelections(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.SelectObjectsFromModel(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="zoomTo"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.LaunchExternalReferenceModelComparisonTolerancesDialog">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.LaunchExternalReferenceModelComparisonSetsDialog">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelComparisonTolerances(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelComparisonSets(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ChangeDetectionInitInProgress">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.CancelChangeDetectionInit">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelPath(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal testing usage only!
            </summary>
            <param name="aModelTsGuid"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetExternalReferenceModelEntitiesCount(System.String)">
            <summary>
            DO NOT USE! For internal testing usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetAllowedReferenceModelFileExtensions(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientId">Client id.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetReferenceModelObjectFaces(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceObjectIdentifier">The reference object identifier.</param>
            <param name="pClientId">Client id.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportSemantic(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="aBasePointGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModel(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aOutPath"></param>
            <param name="aBasePointGuid"></param>
            <param name="aBasePointExportType"></param>
            <param name="aExportType"></param>
            <param name="aPropertiesPath"></param>
            <param name="selectedOnly"></param>
            <param name="assemblies"></param>
            <param name="allAssemblyParts"></param>
            <param name="parts"></param>
            <param name="rebars"></param>
            <param name="bolts"></param>
            <param name="welds"></param>
            <param name="surfaces"></param>
            <param name="surfaceTreatments"></param>
            <param name="grids"></param>
            <param name="spatialHierarchy"></param>
            <param name="pours"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateIFC(Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aIFC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.RunTqlQuery(Tekla.Structures.ModelInternal.dotUseTql_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="tql"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRevit(Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aRevit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateDgn(Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDgn"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateDwg(Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDwg"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GetDSTVCoordinateSystem(Tekla.Structures.Internal.dotIdentifier_t,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="PartId"></param>
            /// <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunMacro(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.IsMacroRunning">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSaveAsWebModel(Tekla.Structures.ModelInternal.dotSaveAsWebModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSaveAsWebModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportManipulateObject(Tekla.Structures.ModelInternal.dotManipulateObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportObjectMatchesToFilter(Tekla.Structures.Internal.dotIdentifier_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportInitFilterCache">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportClearFilterCache">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportProgressBarOperation(Tekla.Structures.ModelInternal.dotProgressBar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProgressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryText(Tekla.Structures.ModelInternal.dotDrawText_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolyLine(Tekla.Structures.ModelInternal.dotDrawPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolyLineWithId(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRemoveTemporaryGraphicsObjects(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDrawTemporaryPolygonSurface(Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetGetPhaseProperty(Tekla.Structures.ModelInternal.dotSetGetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetObjectLastModified(Tekla.Structures.Internal.dotIdentifier_t@,System.Int32@,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pTime"></param>
            <param name="pLocallyModified"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPhaseNumbers(Tekla.Structures.ModelInternal.dotPhaseNumbers_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetModificationStamp(Tekla.Structures.ModelInternal.dotModificationStamp_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetModificationStampGuid(System.String@)">
            <summary>DO NOT USE! For internal usage only!</summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetWriteOutStampGuid(System.String@)">
            <summary>DO NOT USE! For internal usage only!</summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportInsertView(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="OpenView"></param>
            <param name="UseAppliedValues"></param>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetViews(Tekla.Structures.ModelInternal.dotViewSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCurrentView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetViewPointFromCurrentView(Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViewPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetRepresentation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportViewHideUnselected(System.Boolean,System.Boolean)">
            <summary>DO NOT USE! For internal usage only!</summary>
            <param name="HideCompletely"></param>
            <param name="DrawAsStick"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetClipPlanes(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotGetClipPlanes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pGetClipPlanes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTransformPlaneAsWorkFloor">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewState"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryStates(Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryStates_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier}@,Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjects"></param>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryColor(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewColor"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryColors(Tekla.Structures.ModelInternal.dotSetTemporaryColors_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryColors"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetTemporaryColors_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier}@,Tekla.Structures.ModelInternal.dotSetTemporaryColors_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjects"></param>
            <param name="pSetTemporaryColors"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportClearTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportClearAllTemporaryStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <param name="pCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDasStartCommand(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="CommandName"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDasStartAction(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ActionName"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUndoOperation(Tekla.Structures.ModelInternal.dotUndoOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDataBaseVersionInfoFromModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateNewModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModel2Operation(Tekla.Structures.ModelInternal.dotModel2Operation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportExternalDrawOperation(Tekla.Structures.ModelInternal.dotExternalDrawOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportTranslateLabel(Tekla.Structures.ModelInternal.dotTranslateLabel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTranslateLabel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ImportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportValidatePolymesh(System.Int32,Tekla.Structures.ModelInternal.dotPolymesh_t@,Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="checkCriteria">The checking criteria.</param>
            <param name="polymeshToValidate">The polymesh to be checked.</param>
            <param name="invalidInfo">The checking results.</param>
            <returns>True if valid, false if error found</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolidBrep(Tekla.Structures.ModelInternal.dotPolymesh_t@,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="polymeshToClean">The polymesh to be cleaned.</param>
            <param name="polymeshCleaned">The cleaned polymesh.</param>
            <returns>True if the polymesh can be solid, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportChangeManagerAllowSave(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="SaveFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportChangeManagerAllowNumbering(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberingFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetColorRepresentationForObject(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pColor"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetReferenceModelObjectByExternalGuid(System.Int32,Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="referenceModelId">The reference model id.</param>
            <param name="externalGuid">The external guid.</param>
            <returns>The <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetBeamPositioningBox(Tekla.Structures.ModelInternal.dotBeamPositioningBox_t@)">
            <exclude/>
            <param name="pBeamPositioningBox"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.GrdrShowPreviewDrawing(System.Int32)">
            <exclude/>
            <param name="DrawingId">id</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetStringPropertyFromDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <param name="stringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetStringPropertyToDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <param name="stringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Enumerator"></param>
            <param name="SelectInstances"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportFetchFromDatabase(System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Guids"></param>
            <param name="SelectInstances"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid"></param>
            <param name="serializedFaceList"></param>
            <param name="serializedVectorList"></param>
            <param name="serializedShellIndexList"></param>
            <param name="serializedFaceOriginIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSolidMerged(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid">The dot solid.</param>
            <param name="polymeshes">The polymeshes.</param>
            <returns>
            Result of task
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetCutSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid1"></param>
            <param name="dotSolid2"></param>
            <param name="serializedFaceList"></param>
            <param name="serializedVectorList"></param>
            <param name="serializedFaceOriginPartIdList"></param>
            <param name="serializedShellIndexList"></param>
            <param name="serializedEdgeVertexList"></param>
            <param name="serializedEdgeTypeList"></param>
            <param name="serializedEdgeShellIndexList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSetModstamp(Tekla.Structures.ModelInternal.dotModStamp_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ModStampData"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModStampCompare(Tekla.Structures.ModelInternal.dotModStampCompare_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ModStampCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSingleRebarGetRebarSet(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="singleRebarId">The single rebar ID.</param>
            <returns>The rebar set ID if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetShapeMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientID">ClientId for this session</param>
            <param name="guid">Shape GUID</param>///
            <returns>Returns 1 if the operation was fully successful, otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns>returns status of operation.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifySurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns>returns result of export.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns>Returns result of export.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns>Returns result of export.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportModifyLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSurfaceObject">The surface object.</param>
            <returns>Returns result of export.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="hitPoint"></param>
            <param name="faceNormal"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateSurfaceByFaceAndAttrib(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="hitPoint"></param>
            <param name="faceNormal"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="surfaceClass"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateLegSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="hitPoint">The hit point.</param>
            <param name="faceNormal">The face normal.</param>
            <param name="id">The object ID.</param>
            <param name="rebarSetId">The parent rebar set ID.</param>
            <returns>Returns result of export.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAssociateSurfaces(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetParentObject(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="surfaceId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetAssemblyId(System.Int32,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="identifier"></param>
            <param name="rootAssemblyIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetSurfaceGeometryType(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="surfaceId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSelectConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCreateConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetDatabaseVersion(System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRunDataRetrieverCommand(System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportFingerprint(Tekla.Structures.ModelInternal.dotPolymesh_t@,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCompareFingerprints(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportMarkObjectModifiedForOrganizer(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddToPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="inputPour"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRemoveFromPourUnit(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportCalculatePourUnits">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAppendMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="clientId">ClientId for this session</param>
            <returns>Returns 1 if the operation was fully successful, otherwise 0</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportAddShapeMetadata(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="key">Metadata key</param>
            <param name="clientId">ClientId for this session</param>
            <returns>Returns 1 if the operation was fully successful, otherwise 0</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportUpdateShapeMetadata(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="key">Metadata key</param>
            <param name="clientId">ClientId for this session</param>
            <returns>Returns 1 if the operation was fully successful, otherwise 0</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetShapeMetadataVal(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="key">Metadata key</param>
            <param name="clientId">ClientId for this session</param>
            <returns>Returns 1 if the operation was fully successful, otherwise 0</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetShapeAllMetadataKeys(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="clientId">ClientId for this session</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteMetadata(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">Shape GUID</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetHandlePoints(Tekla.Structures.ModelInternal.dotClientId_t,System.String,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetHandlePoints(Tekla.Structures.ModelInternal.dotClientId_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportRenderGraphicContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicLine}@,System.Collections.Generic.List{Tekla.Structures.Model.UI.GraphicPolyLine}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicFace}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicText}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteGraphicObjectContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportDeleteAllGraphicObjectContainers(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPartContour(System.Int32,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportBatchEditorHandler(Tekla.Structures.ModelInternal.dotBatchEditorHandler_t@)">
            <exclude/>
            <param name="pHandler"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportSetPrintingController(Tekla.Structures.ModelInternal.PrintingController)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateWrapper.ExportGetPrintingController(Tekla.Structures.ModelInternal.PrintingController@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CoTaskMem`1">
            <summary>
            This class is used to ensure that memory allocated using AllocCoTaskMeme
            to hold a list of struct instances is released properly.
            </summary>
            <typeparam name="T">A struct type.</typeparam>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CoTaskMem`1.#ctor(System.Collections.Generic.List{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.CoTaskMem`1"/>> class.</summary>
            <param name="pList">A list of objects of type T.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CoTaskMem`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CoTaskMem`1.GetPointer">
            <summary>
            Gets an unsafe pointer to the allocated memory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GenericDelegateFake`1">
            <summary>
            Implements ICDelegate so that every method returns according to <see cref="T:Tekla.Structures.RemotingHelper.IReturnStrategy"/>
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.ModelInternal.CDelegateSetter" />.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreatePart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportValidateLoftedPlate(System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateBentPlateByParts(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateBentPlateByPartsAndRadius(System.Int32,System.Int32,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateConicalBentPlateByPartsAndRadiusAperture(System.Int32,System.Int32,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateConicalBentPlateByPartsAndTwoRadiuses(System.Int32,System.Int32,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateBentPlateByFaces(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateBentPlateByFacesAndRadius(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateConicalBentPlateByFacesAndRadiusAperture(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTrees(Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTreesWithRadius(System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="radius"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTreesWithRadiusAperture(System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="largestRadius"></param>
            <param name="halfAperture"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTreesByPoints(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTreesByPointsWithRadius(System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="radius"></param>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportConnectGeometryTreesByPointsWithRadiusAperture(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="largestRadius"></param>
            <param name="halfAperture"></param>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyGeometryTreeCylindricalNodeRadius(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyConicalNodeRadiuses(System.Int32,System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyGeometryTreeConicalNodeByScale(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyGeometryTreeCylindricalNodeCurveType(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSetNewBentPlateRoot(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyBendAngle(System.Double,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyGeometryTreePolygonNode(System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExplodeBentPlate(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportExtractBentPlateFromComponent(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyBendSurfaceNode(System.Int32,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="firstBoundaryPoints"></param>
            <param name="secondBoundaryPoints"></param>
            <param name="surfacePoints"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetBentPlateMinimumRadius(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetBentPlateMaximumRadiuses(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetSpiralBeamEndPoint(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotVector_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCalculateContourPolygon(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="contour">The contour.</param>
            <param name="polygon">The polygon.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSelectPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSelectPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSelectLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetBoltedPartsHoleElevations(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Tuple{System.Double,System.Double}})">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="boltId">The bolt identifier.</param>
            <param name="holeElevations">The hole elevations.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetAttributeFiles(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetAttributeFilesWithPrefix(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.EditMacro(System.String)">
            <summary>
            The EditMacro
            </summary>
            <param name="FileName"> The macro filename </param>
            <returns> Returns an integer </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.StartMacroRecording(System.String)">
            <summary>
            The StartMacroRecording
            </summary>
            <param name="FileName">The macro filename </param>
            <returns>Returns an integer</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.StopMacroRecording">
            <summary>
            The StopMacroRecording
            </summary>
            <returns> Returns an integer </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.RefreshMacroList">
            <summary>
            The RefreshMacroList
            </summary>
            <returns> Returns an integer </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.IsMacroRecording">
            <summary>
            The IsMacroRecording
            </summary>
            <returns> Returns an integer </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSingleRebarGetRebarSet(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportGetShapeMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportSelectLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportModifyLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GenericDelegateFake`1.ExportCreateLegSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DelegateFake">
            <summary>
            Implements ICDelegate so that every method throws NotImplementedException.
            Can be used in unit testing to mock Tekla Structures behavior, by setting
            a ICDelegate instance using <see cref="T:Tekla.Structures.ModelInternal.CDelegateSetter" />.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DelegateProxy">
            <summary>
            CDelegate remote class proxy.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DelegateProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.DelegateProxy.Delegate">
            <summary>
            Gets the singleton CDelegate instance that includes model API methods.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DelegateProxy.DeactivateInterface(System.String)">
            <summary>
            Deactivate Tekla.Structures.Model interface
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.CDelegateSetter">
            <summary>
            This class is purely available for the reason to enable faking of
            ICDelegate interface for the sake of testing.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.CDelegateSetter.SetInstanceForUnitTesting(Tekla.Structures.ModelInternal.ICDelegate)">
            <summary>
            Set the current ICDelegate instance to your fake/mock class.
            The instance must be restored to null when test method ends.
            </summary>
            <param name="cdelegate">The delegate implementation</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ScopedCDelegateSetter">
            <summary>
            Can be used for scoped settings of ICDelegate.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ScopedCDelegateSetter.#ctor(Tekla.Structures.ModelInternal.ICDelegate)">
            <summary>
            Construct scoped setter and set the DelegateProxy.Delegate to what is provided for constructor.
            </summary>
            <param name="deleg"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ScopedCDelegateSetter.Dispose">
            <summary>
            Restores the DelegateProxy.Delegate to what it was before this class was constructed.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DotNetModelProxy">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DotNetModelProxy.Run(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Param">Not used.</param>
            <returns>The return value is not usefull because AKIT doesn't send it to Core.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandler">
            <summary>
            EventHandler is a class that TS calls when an event is raised. Handler
            then calls all the listener "Events" objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.OBJECT_NUMBERED">
            <summary>
            Object numbered event
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.MAX_0BJECT_COUNT_IN_LIST">
            <summary>
            Object numbered event
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.EventListeners">
            <summary>
            List of Events objects waiting to be called
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.UIEventListeners">
            <summary>
            List of UI Events objects waiting to be called
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.lastSelectionChangeEventTime">
            <summary>
            time for last selection changed event
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.throttleSelectionChangedTimer">
            <summary>
            timer for last selection changed event
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.throttleSelectionChangedLock">
            <summary>
            lock for timed last selection changed event
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandler.activeUIClientID">
            <summary>
            active client ID for UI event
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.AddListener(Tekla.Structures.Model.Events)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.AddUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientID"></param>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.RemoveListener(Tekla.Structures.Model.Events)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.RemoveUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientID"></param>
            <param name="EventListener"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.OnEvent(System.String)">
            <summary>
            TS calls when event is raised.
            </summary>
            <param name="Param">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.OnModelObjectChangedEvent(System.String,System.Collections.Generic.List{Tekla.Structures.Model.ModelObject},System.Collections.Generic.List{Tekla.Structures.Model.ModelObject},System.Collections.Generic.List{Tekla.Structures.Model.ChangeData.ChangeTypeEnum})">
            <summary>
            sends changed objects event is raised to listeners.
            </summary>
            <param name="Param">Name of the event</param>
            <param name="ChangedObjects">Name of the event</param>
            <param name="NumberedObjects">Name of the event</param>
            <param name="CommitTypes">Name of the event</param>
            <returns>1</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.TimerSelectionChangedTick(System.Object,System.EventArgs)">
            <summary>
            Gets invoked if slection changed interval smaller than 100 msecs
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetDetectedClash(Tekla.Structures.Model.ClashCheckData)">
            <summary>
            Gets the data of the detected clash in dotClash_t struct and sets the attributes
            to its ClashCheckData object parameter.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetNumberOfClashes(System.Int32@)">
            <summary>
            Gets the number of clashes that have been found when the clash check has been
            started from .NET API.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetPointInputChangedEvent(System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint}@)">
            <summary>
            Gets the latest command status change.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetCommandStatus(System.String@,System.String@,System.Boolean@)">
            <summary>
            Gets the latest command status change.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetTrackEvent(System.String@,System.String@,System.String@)">
            <summary>
            Gets the track event change.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandler.GetCommitData(Tekla.Structures.Model.ModelObject@,System.Int32@)">
            <summary>
            Gets the commit event data.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandlerProxy">
            <summary>
            EventHandler remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerProxy._Instance">
            <summary>
            The remote EventHandler object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.EventHandlerProxy.EventHandler">
            <summary>
            Gets the singleton EventHandler instance that includes model API event handlers.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.EventHandlerWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.EventHandlerWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.#ctor(Tekla.Structures.ModelInternal.IEventHandler,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.AddListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.RemoveListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.AddUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.EventHandlerWrapper.RemoveUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ICDelegate">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectSelect(Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUIObjectsPick(Tekla.Structures.ModelInternal.dotUIPicker_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPicker"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportTaskObjectAttach(Tekla.Structures.ModelInternal.dotTaskObjectAttacher_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreatePart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to create</param>
            <param name="contour">The part contour points</param>
            <returns>0 in the case of failure and 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportValidateLoftedPlate(System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="baseCurves"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCompareObjects(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="ObjectToCompareId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBoltGroup(System.Double,System.Double,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberOfBolts"></param>
            <param name="Diameter"></param>
            <param name="pBoltGroup"></param>
            <param name="pBoltDistX"></param>
            <param name="pBoltDistY"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="imagePoints"></param>
            <param name="slopes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModelObjectAttributeEnumerator(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttributeEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReferenceModelObjectAttribute(Tekla.Structures.ModelInternal.dotReferenceModelObjectAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRMOAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBentPlateByParts(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBentPlateByPartsAndRadius(System.Int32,System.Int32,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateConicalBentPlateByPartsAndRadiusAperture(System.Int32,System.Int32,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateConicalBentPlateByPartsAndTwoRadiuses(System.Int32,System.Int32,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBentPlateByFaces(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBentPlateByFacesAndRadius(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateConicalBentPlateByFacesAndRadiusAperture(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotPolygon_t@,Tekla.Structures.ModelInternal.dotPolygon_t@,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTrees(Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTreesWithRadius(System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTreesWithRadiusAperture(System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTreesByPoints(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="side1Start"></param>
            <param name="side1End"></param>
            <param name="side2Start"></param>
            <param name="side2End"></param>
            <param name="clientId"></param>
            <param name="bendShape"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTreesByPointsWithRadius(System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConnectGeometryTreesByPointsWithRadiusAperture(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGeometryTreeCylindricalNodeRadius(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyConicalNodeRadiuses(System.Int32,System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGeometryTreeConicalNodeByScale(System.Int32,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGeometryTreeCylindricalNodeCurveType(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGeometryTreePolygonNode(System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExplodeBentPlate(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetNewBentPlateRoot(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId">The node identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBendAngle(System.Double,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="angle">The angle.</param>
            <param name="curvedNodeId">The node identifier.</param>
            <param name="movingNodeId">The direction node identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportExtractBentPlateFromComponent(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBendSurfaceNode(System.Int32,System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotContour_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="geometryNodeId"></param>
            <param name="firstBoundaryPoints"></param>
            <param name="secondBoundaryPoints"></param>
            <param name="surfacePoints"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBentPlateMinimumRadius(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBentPlateMaximumRadiuses(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSpiralBeamEndPoint(System.Double,System.Double,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotVector_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayComponentHelp(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayAutoDefaultSettings(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportStartCustomComponentCreation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ComponentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportStartPluginCreation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ComponentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportComponentGetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="ignoreDefaultValues">Fetch also attributes with default attribute values.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportComponentSetAppliedAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent">The object type.</param>
            <param name="pNames">The applied attribute names.</param>
            <param name="pValues">The applied attribute values.</param>
            <param name="addNewAttributes">Are new attributes registered to internal component data storage.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportValidatePolymesh(System.Int32,Tekla.Structures.ModelInternal.dotPolymesh_t@,Tekla.Structures.ModelInternal.dotPolymeshValidateInvalidInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="checkCriteria">The checking criteria.</param>
            <param name="polymeshToValidate">The polymesh to be checked.</param>
            <param name="invalidInfo">The checking results.</param>
            <returns>True if valid, false if error found</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolidBrep(Tekla.Structures.ModelInternal.dotPolymesh_t@,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="polymeshToClean">The polymesh to be cleaned.</param>
            <param name="polymeshCleaned">The cleaned polymesh.</param>
            <returns>True if the polymesh can be solid, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreatePourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSplitPart(System.Int32,Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="PartId">ID of the part to be split</param>
            <param name="pSplit">Polymesh defining the split geometry</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetFatherComponent(System.Int32,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ObjectId"></param>
            <param name="FatherComponentId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPolybeamCoordinateSystem(System.Int32,System.Int32,System.Int32,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Id"></param>
            <param name="SubId"></param>
            <param name="Chamfered"></param>
            <param name="pX"></param>
            <param name="pY"></param>
            <param name="pZ"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCalculateContourPolygon(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="contour">The contour.</param>
            <param name="polygon">The polygon.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPartLine(Tekla.Structures.ModelInternal.dotPartLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartLine"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The bent plate to select</param>
            <returns>0 in the case of failure, 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to select</param>
            <param name="contour">The part contour points</param>
            <returns>0 in the case of failure, 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportFormatProfile(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportParseProfile(Tekla.Structures.ModelInternal.dotProfile_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectBoltGroup(System.Double@,System.Double@,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@,System.Collections.ArrayList@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberOfBolts"></param>
            <param name="pDiameter"></param>
            <param name="pBoltGroup"></param>
            <param name="pBoltDistX"></param>
            <param name="pBoltDistY"></param>
            <param name="pBoltPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBoltedPartsHoleElevations(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Tuple{System.Double,System.Double}})">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="boltId">The bolt identifier.</param>
            <param name="holeElevations">The hole elevations.</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectSurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetWeldGeometry(Tekla.Structures.ModelInternal.dotWeldGeometry_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeldGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectSingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarBars(Tekla.Structures.ModelInternal.dotWire_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWire"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetRebarComplexGeometries(Tekla.Structures.ModelInternal.dotRebarComplexGeometry_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="slopes"></param>
            <param name="imagePoints"></param>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectReferenceModelObject(Tekla.Structures.ModelInternal.dotReferenceModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourUnit">The reference of selected pour unit</param>
            <returns>True if selected</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPourBreak(Tekla.Structures.ModelInternal.dotPolymeshObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPart(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to modify</param>
            <param name="contour">The part contour points</param>
            <returns>0 in the case of failure, 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLoftedPlate(Tekla.Structures.ModelInternal.dotPart_t@,System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}}@,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart"></param>
            <param name="baseCurves"></param>
            <param name="FaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPartWithGeometryTree(Tekla.Structures.ModelInternal.dotPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPart">The part to modify</param>
            <returns>0 in the case of failure, 1 in the case of success</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBoltGroup(System.Double,System.Double,Tekla.Structures.ModelInternal.dotBoltGroup_t@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberOfBolts"></param>
            <param name="Diameter"></param>
            <param name="pBoltGroup"></param>
            <param name="pBoltDistX"></param>
            <param name="pBoltDistY"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBooleanPart(Tekla.Structures.ModelInternal.dotBooleanPart_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBooleanPart"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.RunTqlQuery(Tekla.Structures.ModelInternal.dotUseTql_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="tql"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyFittingOrCutPlane(Tekla.Structures.ModelInternal.dotFittingOrCutPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pFittingOrCutPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyEdgeChamfer(Tekla.Structures.ModelInternal.dotEdgeChamfer_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEdgeChamfer"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifySurfaceTreatment(Tekla.Structures.ModelInternal.dotSurfaceTreatment_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTreatment"></param>
            <param name="pContour"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyWeld(Tekla.Structures.ModelInternal.dotWeld_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pWeld"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifySingleRebar(Tekla.Structures.ModelInternal.dotSingleRebar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSingleRebar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarGroup(Tekla.Structures.ModelInternal.dotRebarGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarMesh(Tekla.Structures.ModelInternal.dotRebarMesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarStrand(Tekla.Structures.ModelInternal.dotRebarStrand_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarStrand"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarSplice(Tekla.Structures.ModelInternal.dotRebarSplice_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pRebarSplice"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyControlPlane(Tekla.Structures.ModelInternal.dotControlObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyControlPolycurve(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="polycurvePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyControlSpline(Tekla.Structures.ModelInternal.dotControlObject_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pControlObject"></param>
            <param name="imagePoints"></param>
            <param name="slopes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGridPlane(Tekla.Structures.ModelInternal.dotGridPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGridPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyGrid(Tekla.Structures.ModelInternal.dotGrid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyReferenceModel(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTask(Tekla.Structures.ModelInternal.dotTask_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTaskDependency(Tekla.Structures.ModelInternal.dotTaskDependency_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskDependency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyTaskWorktype(Tekla.Structures.ModelInternal.dotTaskWorktype_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pTaskWorktype"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLoad(Tekla.Structures.ModelInternal.dotLoadCommonAttributes_t@,Tekla.Structures.ModelInternal.dotLoadClassAttributes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadCommonAttributes"></param>
            <param name="pLoadClassAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLoadGroup(Tekla.Structures.ModelInternal.dotLoadGroup_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pLoadGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyAssembly(Tekla.Structures.ModelInternal.dotAssembly_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyComponent(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPourObject(Tekla.Structures.ModelInternal.dotPourObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPourUnit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddToPourUnit(Tekla.Structures.ModelInternal.dotPourUnit_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="inputPour"></param>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRemoveFromPourUnit(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCalculatePourUnits">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAppendMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddShapeMetadata(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="key">Metadata key</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUpdateShapeMetadata(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="key">Metadata key</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetShapeMetadataVal(System.String,System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="key">Metadata key</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetShapeAllMetadataKeys(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteMetadata(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="key">Metadata key</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetHandlePoints(Tekla.Structures.ModelInternal.dotClientId_t,System.String,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="clientId"></param>
            <param name="guid"></param>
            <param name="handlePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetHandlePoints(Tekla.Structures.ModelInternal.dotClientId_t@,System.String)">
            <summary>
            Set the Shape Item Handle Points
            </summary>
            <param name="clientId"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRefreshReferenceFile(Tekla.Structures.ModelInternal.dotReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetReferenceModelRevisionIds(Tekla.Structures.ModelInternal.dotReferenceModel_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <param name="pReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectReferenceModelRevision(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotReferenceModelRevision_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <param name="pRevision"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRemoveReferenceModelRevision(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetAsCurrentRevision(System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="modelId"></param>
            <param name="revisionId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBasePoints(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectBasePoint(System.String,Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid"></param>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteBasePoint(Tekla.Structures.ModelInternal.dotBasePointData_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBasePoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConvertToBasePoint(System.String,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="pPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportConvertFromBasePoint(System.String,Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="pPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetAsCurrentBasePoint(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="basePointGuid"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAttachPointCloud(Tekla.Structures.ModelInternal.dotPointCloud_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPointCloud"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDetachPointCloud(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPointClouds(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPointCloudVisibleInViews(Tekla.Structures.ModelInternal.dotClientId_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="ClientId"></param>
            <param name="pointCloudGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectPointCloud(System.String,Tekla.Structures.ModelInternal.dotPointCloud_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <param name="pPointCloud"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetPointCloudVisibility(System.String,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pointCloudGuid"></param>
            <param name="viewObjectId"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDaoFindObject(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="parentId"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCleanDrawingFiles(System.Boolean,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Silent"></param>
            <param name="BackupPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicDefinition(Tekla.Structures.ModelInternal.dotHierarchicDefinition_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicObject(Tekla.Structures.ModelInternal.dotHierarchicObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportHierarchicObjectChildrenOperation(Tekla.Structures.ModelInternal.dotHierarchicList_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pHierarchicList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBuildingHierarchyChildObjectGuids(Tekla.Structures.ModelInternal.dotBuildingHierarchyOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Operation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBuildingHierarchySiteOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchySiteOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Site"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBuildingHierarchyBuildingOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyBuildingOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Building"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBuildingHierarchyStoreyOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyStoreyOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="StoreyOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBuildingHierarchyOverrideOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyOverrideOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="OverrideOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBuildingHierarchyGetObjectsOperation(Tekla.Structures.ModelInternal.dotBuildingHierarchyGetObjectsOperation_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="GetObjectsOperation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteObject(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportEnumerateObjects(Tekla.Structures.ModelInternal.dotEnumerator_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pEnumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetStringPropertyToDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetStringPropertyFromDatabase(Tekla.Structures.ModelInternal.dotStringProperty_t@,System.Collections.Generic.List{System.String}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSnapshotFromDatabase(Tekla.Structures.ModelInternal.dotEnumerator_t@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportFetchFromDatabase(System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid"></param>
            <param name="serializedFaceList"></param>
            <param name="serializedVectorList"></param>
            <param name="serializedShellIndexList"></param>
            <param name="serializedFaceOriginIdList"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolidMerged(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotPolymesh_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="dotSolid">The dot solid.</param>
            <param name="polymeshes">The polymeshes.</param>
            <returns>
            Success or error code of getting polymeshes for dot solid.
            </returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCutSolidSerialized(Tekla.Structures.ModelInternal.dotSolid_t@,Tekla.Structures.ModelInternal.dotSolid_t@,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}}}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{Tekla.Structures.Internal.dotPoint_t}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSolid(Tekla.Structures.ModelInternal.dotSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetIntersectionSolid(Tekla.Structures.ModelInternal.dotIntersectionSolid_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSolid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetIntersectionPoints(Tekla.Structures.ModelInternal.dotIntersectionPoints_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIntersectionPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCommitChanges(Tekla.Structures.ModelInternal.dotModelCommit_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelCommit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunOrStopClashCheck(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="RunningClashCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunClashCheckWithOptions(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="betweenReferenceModels"></param>
            <param name="objectsInsideReferenceModels"></param>
            <param name="minDistance"></param>
            <param name="betweenParts"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetIntersectionBoundingBoxes(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Identifier1"></param>
            <param name="Identifier2"></param>
            <param name="ClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDetectedClash(Tekla.Structures.ModelInternal.dotClash_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClash"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetNumberOfClashes(System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClashes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCommandStatus(System.String@,System.String@,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="TSCommand"></param>
            <param name="TSCommandParam"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetTrackEvent(System.String@,System.String@,System.String@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="category"></param>
            <param name="eventName"></param>
            <param name="eventContent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCommitData(Tekla.Structures.Internal.dotIdentifier_t@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pId"></param>
            <param name="pObjectType"></param>
            <param name="pObjectSubType"></param>
            <param name="pCommitType"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDotType(Tekla.Structures.ModelInternal.dotModelObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPartMark(Tekla.Structures.ModelInternal.dotPartMark_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPartMark"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCoordinateSystem(Tekla.Structures.ModelInternal.dotModelObject_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModelObject"></param>
            <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetPlane(Tekla.Structures.ModelInternal.dotPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTransformationPlane(Tekla.Structures.ModelInternal.dotTransformationPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPointInputChangedEvent(System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportStartPolyLineInputGeometry(Tekla.Structures.ModelInternal.dotInputGeometry_t@,System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientID"></param>
            <param name="pPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetProperty(Tekla.Structures.ModelInternal.dotSetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAllReportProperties(System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGetProperties_t}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAllProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProperties"></param>
            <param name="pNames"></param>
            <param name="pValues"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetProperties(Tekla.Structures.ModelInternal.dotGetProperties_t@)">
            <summary>
            Calls dotExportGetProperties.
            </summary>
            <param name="pProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSetModelInfo(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyProjectInfo(Tekla.Structures.ModelInternal.dotProjectInfo_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportInitializeComponentStacks">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddComponentAttributeToStack(Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pAttr"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportAddComponentInputToStack(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetComponentInput(Tekla.Structures.ModelInternal.dotComponentInputObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportLoadComponentAttributes(Tekla.Structures.ModelInternal.dotBaseComponent_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pBaseComponent"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetComponentAttribute(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotComponentAttribute_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetNumberingUpToDate(Tekla.Structures.ModelInternal.dotNumberingQuery_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pNumberingQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSimilarNumberedObjects(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pClientId"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportNumGetObjectsTransformation(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="object1Id">Object 1 id</param>
            <param name="object2Id">Object 2 id</param>
            <param name="cs1">Cs 1</param>
            <param name="cs2">Cs 2</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateReport(Tekla.Structures.ModelInternal.dotCreateReportFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aReport"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayReport(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDisplayPrompt(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAttributeFiles(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The Data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAttributeFilesWithPrefix(Tekla.Structures.ModelInternal.dotGetAttributeFiles_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The Data.</param>
            <returns>Number of files found.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportTryGetSubdirectoryFromFileName(Tekla.Structures.ModelInternal.dotTryGetSubdirectoryFromFileName_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="data">The Data.</param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportWriteToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportWriteErrorToSessionLog(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateNC(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aNC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateNCStructure(Tekla.Structures.ModelInternal.dotCreateNCFromModel_t@,Tekla.Structures.ModelInternal.dotDstvHeader@,Tekla.Structures.ModelInternal.dotDstvContours@,Tekla.Structures.ModelInternal.dotDstvHoles@,Tekla.Structures.ModelInternal.dotDstvMarks@,Tekla.Structures.ModelInternal.dotDstvBentLines@,Tekla.Structures.ModelInternal.dotDstvNumerations@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDotCreateNCFromModel"></param>
            <param name="pDstvHeader"></param>
            <param name="pDstvContours"></param>
            <param name="pDstvHoles"></param>
            <param name="pDstvMarks"></param>
            <param name="pDstvBentLines"></param>
            <param name="pDstvNumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportExternalRefenceModel(Tekla.Structures.ModelInternal.dotExternalReferenceModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aExternalReferenceModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetImportedExternalReferenceModels(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.RemoveExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ShowExternalReferenceModel(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="restrictToWorkArea"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.HideExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.SetExternalReferenceModelObjectVisibilities(System.String,System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="isVisible"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ZoomToExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ZoomViewToExternalReferenceModel(System.String,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="aViewId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.SetSelectedExternalReferenceModel(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelLayers(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.SetExternalReferenceModelLayerVisibilities(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.SetExternalReferenceModelObjectColoring(System.String,System.Double,System.Double,System.Double,System.Double,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="alpha"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ResetExternalReferenceModelColoring(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.StartExternalReferenceModelChangeDetection(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aCurrenVersion"></param>
            <param name="aNewVersion"></param>
            <param name="changed"></param>
            <param name="inserted"></param>
            <param name="deleted"></param>
            <param name="unchanged"></param>
            <param name="comparisonSetTitle"></param>
            <param name="tolerancesTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.StopExternalReferenceModelChangeDetection">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelSelections(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.SelectObjectsFromModel(System.Int32,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.LaunchExternalReferenceModelComparisonTolerancesDialog">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.LaunchExternalReferenceModelComparisonSetsDialog">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelComparisonTolerances(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelComparisonSets(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ChangeDetectionInitInProgress">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.CancelChangeDetectionInit">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelPath(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal testing usage only!
            </summary>
            <param name="aModelTsGuid"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetExternalReferenceModelEntitiesCount(System.String)">
            <summary>
            DO NOT USE! For internal testing usage only!
            </summary>
            <param name="aPath"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetAllowedReferenceModelFileExtensions(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetReferenceModelObjectFaces(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pReferenceObjectIdentifier"></param>
            <param name="pClientId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportSemantic(System.String,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aPath"></param>
            <param name="aBasePointGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModel(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aOutPath"></param>
            <param name="aBasePointGuid"></param>
            <param name="aBasePointExportType"></param>
            <param name="aExportType"></param>
            <param name="aPropertiesPath"></param>
            <param name="selectedOnly"></param>
            <param name="assemblies"></param>
            <param name="allAssemblyParts"></param>
            <param name="parts"></param>
            <param name="rebars"></param>
            <param name="bolts"></param>
            <param name="welds"></param>
            <param name="surfaces"></param>
            <param name="surfaceTreatments"></param>
            <param name="grids"></param>
            <param name="spatialHierarchy"></param>
            <param name="pours"></param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateIFC(Tekla.Structures.ModelInternal.dotCreateIFCFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aIFC"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRevit(Tekla.Structures.ModelInternal.dotCreateRevitFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aRevit"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateDgn(Tekla.Structures.ModelInternal.dotCreateDgnFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDgn"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateDwg(Tekla.Structures.ModelInternal.dotCreateDwgFromModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="aDwg"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GetDSTVCoordinateSystem(Tekla.Structures.Internal.dotIdentifier_t,Tekla.Structures.Internal.dotCoordinateSystem_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="PartId"></param>
            <param name="pCoordinateSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunMacro(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.IsMacroRunning">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSaveAsWebModel(Tekla.Structures.ModelInternal.dotSaveAsWebModel_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSaveAsWebModel"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportManipulateObject(Tekla.Structures.ModelInternal.dotManipulateObject_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportObjectMatchesToFilter(Tekla.Structures.Internal.dotIdentifier_t@,System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportInitFilterCache">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportClearFilterCache">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportProgressBarOperation(Tekla.Structures.ModelInternal.dotProgressBar_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pProgressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryText(Tekla.Structures.ModelInternal.dotDrawText_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolyLine(Tekla.Structures.ModelInternal.dotDrawPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolyLineWithId(Tekla.Structures.ModelInternal.dotGraphicPolyLine_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRemoveTemporaryGraphicsObjects(Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDrawTemporaryPolygonSurface(Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetGetPhaseProperty(Tekla.Structures.ModelInternal.dotSetGetProperty_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetObjectPhase(Tekla.Structures.ModelInternal.dotPhase_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetObjectLastModified(Tekla.Structures.Internal.dotIdentifier_t@,System.Int32@,System.Boolean@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pTime"></param>
            <param name="pLocallyModified"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPhaseNumbers(Tekla.Structures.ModelInternal.dotPhaseNumbers_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetModificationStamp(Tekla.Structures.ModelInternal.dotModificationStamp_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pModStmp"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportInsertView(System.Int32,System.Int32,Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="OpenView"></param>
            <param name="UseAppliedValues"></param>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="View"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetViews(Tekla.Structures.ModelInternal.dotViewSelector_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViews"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetCurrentView(Tekla.Structures.ModelInternal.dotView_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pView"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetViewPointFromCurrentView(Tekla.Structures.Internal.dotPoint_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pViewPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetRepresentation(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Representation"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportViewHideUnselected(System.Boolean,System.Boolean)">
            <summary>DO NOT USE! For internal usage only!</summary>
            <param name="HideCompletely"></param>
            <param name="DrawAsStick"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetClipPlanes(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotGetClipPlanes_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotGetClipPlanes"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyClipPlane(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotClipPlane_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotClipPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTransformPlaneAsWorkFloor">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewState"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryStates(Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryStates_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier}@,Tekla.Structures.ModelInternal.dotSetTemporaryStates_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjects"></param>
            <param name="pSetTemporaryStates"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryColor(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <param name="pNewColor"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryColors(Tekla.Structures.ModelInternal.dotSetTemporaryColors_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pSetTemporaryColors"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetTemporaryColors_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier}@,Tekla.Structures.ModelInternal.dotSetTemporaryColors_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjects"></param>
            <param name="pSetTemporaryColors"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportClearTemporaryState(Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportClearAllTemporaryStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetViewCamera(Tekla.Structures.ModelInternal.dotView_t@,Tekla.Structures.ModelInternal.dotCamera_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pDotView"></param>
            <param name="pDotCamera"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportChangeManagerAllowSave(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="SaveFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportChangeManagerAllowNumbering(System.Boolean)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="NumberingFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportShadowArea(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportShadowAreaComplement(Tekla.Structures.ModelInternal.dotAreaPolygons_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetColorRepresentationForObject(Tekla.Structures.Internal.dotIdentifier_t@,Tekla.Structures.ModelInternal.dotColor_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="pIdentifier"></param>
            <param name="pColor"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetReferenceModelObjectByExternalGuid(System.Int32,Tekla.Structures.Internal.dotIdentifier_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="referenceModelId"></param>
            <param name="externalGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetAdvancedOption(Tekla.Structures.Internal.dotGetAdvancedOption_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetBeamPositioningBox(Tekla.Structures.ModelInternal.dotBeamPositioningBox_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.GrdrShowPreviewDrawing(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDasStartCommand(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDasStartAction(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSaveOperation(Tekla.Structures.ModelInternal.dotSaveOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportUndoOperation(Tekla.Structures.ModelInternal.dotUndoOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDataBaseVersionInfoFromModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateNewModel(Tekla.Structures.ModelInternal.dotModelInfo_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSharingOperation(Tekla.Structures.ModelInternal.dotSharingOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModel2Operation(Tekla.Structures.ModelInternal.dotModel2Operation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportExternalDrawOperation(Tekla.Structures.ModelInternal.dotExternalDrawOperation_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportTranslateLabel(Tekla.Structures.ModelInternal.dotTranslateLabel_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportIntListHandler(Tekla.Structures.ModelInternal.dotnetIntList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportDoubleListHandler(Tekla.Structures.ModelInternal.dotnetDoubleList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportStringListHandler(Tekla.Structures.ModelInternal.dotnetStringList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportPointListHandler(Tekla.Structures.ModelInternal.dotnetPointList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ImportEdgeListHandler(Tekla.Structures.ModelInternal.dotnetEdgeList_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetModificationStampGuid(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetWriteOutStampGuid(System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarSet(Tekla.Structures.ModelInternal.dotRebarSet_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotGuideline_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotSpacingZone_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarSetAddition(Tekla.Structures.ModelInternal.dotRebarSetAddition_t@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotLegFace_t}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotContourPoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSetModstamp(Tekla.Structures.ModelInternal.dotModStamp_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModStampCompare(Tekla.Structures.ModelInternal.dotModStampCompare_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarPropertyStrip(Tekla.Structures.ModelInternal.dotRebarPropertyStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarEndDetailStrip(Tekla.Structures.ModelInternal.dotRebarEndDetailStrip_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectRebarSplitter(Tekla.Structures.ModelInternal.dotRebarSplitter_t@)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="pStrip">The strip.</param>
            <returns>1 if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSingleRebarGetRebarSet(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only.
            </summary>
            <param name="singleRebarId">The single rebar ID.</param>
            <returns>The rebar set ID if successful; otherwise 0.</returns>
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetShapeMetadata(System.String,Tekla.Structures.ModelInternal.dotClientId_t@)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="guid">The guid to identify the shape</param>
            <param name="clientId">The client ID to identify the connection</param>
            <returns>1 if successful; otherwise 0.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectSurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifySurfaceObject(Tekla.Structures.ModelInternal.dotSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportModifyLegSurfaceObject(Tekla.Structures.ModelInternal.dotLegSurfaceObject_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateSurfaceByFaceAndAttrib(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateLegSurfaceByFace(Tekla.Structures.Internal.dotPoint_t@,Tekla.Structures.Internal.dotPoint_t@,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAssociateSurfaces(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetParentObject(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetAssemblyId(System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetSurfaceGeometryType(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSelectConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCreateConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteConversionLink(Tekla.Structures.ModelInternal.dotConversionLink_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetDatabaseVersion(System.Int32@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRunDataRetrieverCommand(System.String)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="parameter">Parameters for command.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportFingerprint(Tekla.Structures.ModelInternal.dotPolymesh_t@,System.String@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportCompareFingerprints(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportRenderGraphicContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@,System.Collections.Generic.List{Tekla.Structures.Geometry3d.Point}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicLine}@,System.Collections.Generic.List{Tekla.Structures.Model.UI.GraphicPolyLine}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicFace}@,System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicText}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteGraphicObjectContainer(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportDeleteAllGraphicObjectContainers(Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportMarkObjectModifiedForOrganizer(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPartContour(System.Int32,System.Collections.Generic.List{Tekla.Structures.ModelInternal.dotPolycurvePoint_t}@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportBatchEditorHandler(Tekla.Structures.ModelInternal.dotBatchEditorHandler_t@)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportSetPrintingController(Tekla.Structures.ModelInternal.PrintingController)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ICDelegate.ExportGetPrintingController(Tekla.Structures.ModelInternal.PrintingController@)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.IEventHandler">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.AddListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.RemoveListener(Tekla.Structures.Model.Events)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.AddUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IEventHandler.RemoveUIListener(Tekla.Structures.ModelInternal.dotClientId_t,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ITeklaStructuresApplication">
            <summary>Represents TS functionality which is mostly implemented in .NET code and plugins, but needs to be implemented in the running application.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ITeklaStructuresApplication.BeginGetSharingLocalChanges(System.Action{System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Tekla.Structures.ModelInternal.HistoryItem}}})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.ModelModuleManager">
            <summary> Internal Module Manager to check configuration against Insert/Modify commands.</summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.ModelModuleManager.CheckModules(Tekla.Structures.Model.ModelObject.ModelObjectEnum)">
            <summary> Checks current module configuration against Insert/Modify command.</summary>
            <param name="Type">Type of the object to check for creation</param>
            <exception cref="T:System.MethodAccessException">Cast an exception if operation is not allowed.</exception>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.Remoter">
            <summary>
            Summary description for Remoter.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.Remoter.InitializeSandBox">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.TeklaStructuresApplication">
            <summary>Provides access to TS functionality tied to the process.</summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.TeklaStructuresApplication.GetSharingLocalChangesCallback">
            <summary>Sets the authentication callback.</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.TeklaStructuresApplicationProxy">
            <summary>
            TS Service remote class proxy.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.TeklaStructuresApplicationProxy._Instance">
            <summary>
            The remote TS Service object.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TeklaStructuresApplicationProxy.#cctor">
            <summary>
            Initializes static instance variable.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.TeklaStructuresApplicationProxy.Instance">
            <summary>
            Gets the singleton TS Service instance.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.TeklaStructuresApplicationWrapper">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.TeklaStructuresApplicationWrapper.Instance">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.TeklaStructuresApplicationWrapper.Functionality">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TeklaStructuresApplicationWrapper.#ctor(Tekla.Structures.ModelInternal.ITeklaStructuresApplication,Tekla.Structures.Internal.WrapperFunctionalityBase)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.TeklaStructuresApplicationWrapper.BeginGetSharingLocalChanges(System.Action{System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Tekla.Structures.ModelInternal.HistoryItem}}})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSolid_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotSolid_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.SolidId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.FaceIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.LoopIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexStartNumber">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.EdgeIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.ShellCount">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.VertexPoint">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.FormingStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.Edges">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.AllowFailedSolids">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.CreationType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSolid_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIntersectionSolid_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.SolidId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.FaceIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.LoopIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.VertexIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.IntersectionPoint3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.FormingStates">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.QueryType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.CreationType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionSolid_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotIntersectionPoints_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.#ctor(System.Int32)">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
            <param name="Size"></param>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.SolidId">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.PlanePoint1">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.PlanePoint2">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.PlanePoint3">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.IntersectionPoints">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.PointIndex">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotIntersectionPoints_t.ReturnValue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotFormingStates_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.DeformingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.FoldingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotFormingStates_t.WrappingType">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotFormingStates_t.ToStruct(Tekla.Structures.Forming.FormingStates)">
            <summary>
            FormingStates to dotFormingStates_t.
            </summary>
            <param name="formingStates">Instance of FormingState class.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotFormingStates_t.FromStruct(Tekla.Structures.Forming.FormingStates)">
            <summary>
            dotFormingStates_t to FormingStates.
            </summary>
            <param name="formingStates">Instance of FormingState class.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotEdges_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.nEdges">
            <summary>
            Number of edges in solid.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EdgeType">
            <summary>
            The edge types of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartX">
            <summary>
            The x-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartY">
            <summary>
            The y-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.StartZ">
            <summary>
            The z-coordinates of start points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndX">
            <summary>
            The x-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndY">
            <summary>
            The y-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotEdges_t.EndZ">
            <summary>
            The z-coordinates of end points of all edges.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotEdges_t.GetEdges">
            <summary>
            Get edges in ArrayList.
            </summary>
            <returns>ArrayList of polygon Points</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t">
            <summary>
            Struct for the Surface Treatment
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.ModelObject">
            <summary>
            The object we are extending (Inherited from)
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Type">
            <summary>
            Which Surfacing type the object is.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Color">
            <summary>
            Which colour the Surfacing has.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Material">
            <summary>
            Defines the Material for the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Position">
            <summary>
            Defines the Position for the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.StartPoint">
            <summary>
            The StartPoint determines the origin of the Surfacing, it is then filled out from
            here towards the EndPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.EndPoint">
            <summary>
            Determines the direction the Surfacing is filled in, the direction is from the StartPoint
            towards the EndPoint.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Father">
            <summary>
            Defines the Father part for the SurfaceTreatment, the part that we create the SurfaceTreatment on.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.Thickness">
            <summary>
            Defines how thick the SurfaceTreatment is.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aName">
            <summary>
            The name of the Surface Treatment.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aClass">
            <summary>
            Class
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.aTypeName">
            <summary>
            Type name
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSurfaceTreatment_t.CutByFatherBooleans">
            <summary>
            Defines if the part is cut by the father's cuts.
            </summary>
            <remarks>It doesn't support polygon cuts.</remarks>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.SurfaceObjectCreator">
            <summary>
            This class creates surface objects by using model side logic.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.CreateByFace(System.Int32,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Creates a surface object by a model object's face.
            </summary>
            <param name="objectId">
            The identifier of the model object which the surface is created for
            </param>
            <param name="hitPoint">
            The hit point on the face of the model object.
            </param>
            <param name="faceNormal">The face normal</param>
            <returns>The created surface object; or null of the operation failed.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.CreateByFace(System.Int32,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.String,System.String)">
            <summary>
            Creates a surface object by a model object's face.
            </summary>
            <param name="objectId">
            The identifier of the model object which the surface is created for
            </param>
            <param name="hitPoint">
            The hit point on the face of the model object.
            </param>
            <param name="faceNormal">The face normal</param>
            <param name="name">The name</param>
            <param name="surfaceClass">The class</param>
            <returns>The created surface object; or null of the operation failed.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.CreateRebarLegSurfaceObjectByFace(System.Int32,Tekla.Structures.Geometry3d.Vector,Tekla.Structures.Geometry3d.Vector,System.Int32)">
            <summary>
            Creates a rebar leg surface object by a model object's face.
            </summary>
            <param name="objectId">The identifier of the model object which the surface is created for.</param>
            <param name="hitPoint">The hit point on the face of the model object.</param>
            <param name="faceNormal">The face normal.</param>
            <param name="rebarSetId">The parent rebar set ID.</param>
            <returns>The created surface object, or null if the operation failed.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.InitDotSurfaceObject">
            <summary>
            Initialize dotPolymesh object.
            </summary>
            <returns>dotPolymesh object.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.GetPoint(Tekla.Structures.Geometry3d.Vector)">
            <summary>
            Convert Vector to dotPoint.
            </summary>
            <param name="inPoint">Input point</param>
            <returns>dotPoint object.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.SurfaceObjectCreator.GetSurfaceObject(System.Int32)">
            <summary>
            Convert Vector to dotPoint.
            </summary>
            <param name="id">surface object</param>
            <returns>surface object.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.DoubleList">
            <summary>
            The DoubleList class defines a type safe list of doubles.
            </summary>
            <example>
            The following example adds some doubles to the list and calculates the sum of them:
            <code>
            using Tekla.Structures.ModelInternal;
            
            public class Example
            {
                   public void Example1()
                   {
                       double Sum = 0;
                       DoubleList MyDoubleList = new DoubleList();
            
                       MyDoubleList.Add(1.5);
                       MyDoubleList.Add(3.1);
                       MyDoubleList.Add(5.2);
            
                       foreach(double MyDouble in MyDoubleList)
                       {
                           Sum += MyDouble;
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.DoubleList"/> class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.DoubleList"/> class.
            </summary>
            <param name="doubles">An IEnumberable of doubles. All the objects must be double's.</param>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.DoubleList.Item(System.Int32)">
            <summary>
            Gets or sets the double at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The double value at this index.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.Add(System.Double)">
            <summary>
            Adds a new double to the end of the double list.
            </summary>
            <param name="value">The double to be added to the list.</param>
            <returns>The index where the double was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.Contains(System.Double)">
            <summary>
            Checks if the given double is in the list.
            </summary>
            <param name="value">The double to be checked.</param>
            <returns>True if the double is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.IndexOf(System.Double)">
            <summary>
            Gets the index of the specified double.
            </summary>
            <param name="value">The double to locate in the list.</param>
            <returns>The index of the double if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.IndexOf(System.Double,System.Int32)">
            <summary>
            Gets the index of the specified double between the index to start
            the search from and the end of the list.
            </summary>
            <param name="value">The double to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The index of the double if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.IndexOf(System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified double between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="value">The double to locate in the list.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The index of the double if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.Insert(System.Int32,System.Double)">
            <summary>
            Inserts the double to the specified index.
            </summary>
            <param name="index">The index where the double is inserted.</param>
            <param name="value">The double to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a sub-list of the double list.
            </summary>
            <param name="index">The start index of the new list.</param>
            <param name="count">The number of items in the new list.</param>
            <returns>The new double list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.LastIndexOf(System.Double)">
            <summary>
            Searches for the last occurence of the double in the list.
            </summary>
            <param name="value">The double to locate.</param>
            <returns>The last index of the double if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.LastIndexOf(System.Double,System.Int32)">
            <summary>
            Searches for the last occurence of the double in the list.
            </summary>
            <param name="value">The double to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>The last index of the double if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.LastIndexOf(System.Double,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the double in the list.
            </summary>
            <param name="value">The double to locate.</param>
            <param name="startIndex">The index to start the search from.</param>
            <param name="count">The number of items searched.</param>
            <returns>The last index of the double if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.Remove(System.Double)">
            <summary>
            Removes the first occurence of the double from the list.
            </summary>
            <param name="value">The double to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="index">The start index.</param>
            <param name="count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.ToArray">
            <summary>
            Copies the doubles to an double array.
            </summary>
            <returns>The array of doubles.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.DoubleList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="objectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetDoubleList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetDoubleList_t.IndexCurrentItem">
            <summary>
            The index of the current item.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetDoubleList_t.NumberItems">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetDoubleList_t.NumberItemsInSet">
            <summary>
            The number of items in the set.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetDoubleList_t.aDoubleList">
            <summary>
            The actual values stored in an array.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetDoubleList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetDoubleList_t.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotnetDoubleList_t"/> struct.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetDoubleList_t.ToStruct(Tekla.Structures.ModelInternal.DoubleList)">
            <summary>
            Fills the struct from the given double list.
            </summary>
            <param name="doubleList">The double list.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetDoubleList_t.FromStruct(Tekla.Structures.ModelInternal.DoubleList)">
            <summary>
            Fills the double list from this struct.
            </summary>
            <param name="doubleList">The double list.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetEdgeList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetEdgeList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetEdgeList_t.NumberItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetEdgeList_t.NumberItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetEdgeList_t.aEdgeList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetEdgeList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetEdgeList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetEdgeList_t.ToStruct(System.Collections.Generic.IList{Tekla.Structures.Geometry3d.IndirectPolymeshEdge})">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetEdgeList_t.FromStruct(System.Collections.Generic.IList{Tekla.Structures.Geometry3d.IndirectPolymeshEdge})">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GeometryExporter">
            <summary>
            GeometryExporter class provides tools to export part geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryExporter.ParentOfTheRootIndex">
            <summary>
            The value used in place of parent index for the root node
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryExporter.RootIndex">
            <summary>
            The root node index
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.#ctor">
            <summary>
            Initializes a new instance of the GeometryExporter class
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GeometryExporter.GeometryType">
            <summary>
            The type of the geometry
            </summary>
            Those values must be synchronized with dotGeometryType_e values in TeklaStructures\libdotnet\interface\dotnet_common_types.h
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryExporter.GeometryType.POLYGON_SECTION">
            <summary>
            A flat polygon section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryExporter.GeometryType.CYLINDRICAL_SECTION">
            <summary>
            A curved section following a cylindrical geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryExporter.GeometryType.HELIX_SECTION">
            <summary>
            A helix section.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryExporter.ExportedPointList">
            <summary>
            Gets or sets the list of points to export as part of the marshaling process
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryExporter.ExportedIntList">
            <summary>
            Gets or sets the list of integers to export as part of the marshaling process
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryExporter.MatrixToGlobal">
            <summary>
            Gets or sets the transformation matrix to local
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GeometryExporter.CurrentNodeParentId">
            <summary>
            Gets or sets the id of the parent of the current node being exported
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ExportGeometry(Tekla.Structures.ModelInternal.GeometryTree)">
            <summary>
            Export the geometry to core
            </summary>
            <param name="geometry">The geometry to export.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ExportGeometries(System.Collections.Generic.IList{Tekla.Structures.ModelInternal.GeometryTree})">
            <summary>
            Export several geometries to core
            </summary>
            <param name="geometries">The geometries to export.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ProcessPolygon(Tekla.Structures.Model.PolygonNode)">
            <summary>
            Process a node that is an instance of PolygonNode node
            </summary>
            <param name="node">the geometry node to process</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ProcessBend(Tekla.Structures.Model.BendSurfaceNode)">
            <summary>
            Process a node that is an instance of BendSurfaceNode
            </summary>
            <param name="node">the geometry node to process</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ProcessSpiral(Tekla.Structures.ModelInternal.SpiralNode)">
            <summary>
            Process a node that is an instance of HelixNode
            </summary>
            <param name="node">the geometry node to process</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ExportNodeType(Tekla.Structures.Model.IGeometryNode)">
            <summary>
            Get the marshaled value for the type and sub-type of the geometry node.
            </summary>
            <param name="node">the geometry node whose type is exported</param>
            <returns>int value encoding the type and sub-type of the node</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryExporter.ExportGeometryNode(Tekla.Structures.ModelInternal.GeometryTree,Tekla.Structures.Model.IGeometryNode,System.Int32,System.Int32)">
            <summary>
            Recursively export the geometry node and its children to arrays for transferring
            </summary>
            <param name="geometry">The geometry being exported</param>
            <param name="node">The geometry node to export</param>
            <param name="parentNodeId">The id of node parent</param>
            <param name="nodeId">The id assigned to node</param>
            <returns>the next available node id</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GeometryImporter">
            <summary>
            GeometryImporter class provides tools to import part geometry.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GeometryImporter.GeometryType">
            <summary>
            The type of the geometry
            </summary>
            Those values must be synchronized with dotGeometryType_e values in TeklaStructures\libdotnet\interface\dotnet_common_types.h
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryImporter.GeometryType.POLYGON_SECTION">
            <summary>
            A flat polygon section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryImporter.GeometryType.CYLINDRICAL_SECTION">
            <summary>
            A curved section following a bend geometry.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryImporter.GeometryType.HELIX_SECTION">
            <summary>
            A helix section.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GeometryImporter.ParentOfTheRoot">
            <summary>
            The value used in place of parent index for the root section
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryImporter.ImportGeometry(Tekla.Structures.Model.ConnectiveGeometry@)">
            <summary>
            Imports the geometry from core
            </summary>
            <param name="connectiveGeometry">The geometry tree imported from core</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryImporter.ImportFlatGeometry(Tekla.Structures.ModelInternal.PointList,Tekla.Structures.ModelInternal.IntList,System.Int32,System.Int32,System.Int32,Tekla.Structures.Geometry3d.Matrix,System.Boolean)">
            <summary>
            Imports the flat geometry section.
            </summary>
            <param name="pointList">The points list.</param>
            <param name="intList">The ints list.</param>
            <param name="pointsCount">The points number to retrive.</param>
            <param name="pointCurrentIndex">The current index int the point list.</param>
            <param name="intCurrentIndex">The current index in the int list.</param>
            <param name="matrixToCurrent">The matrix to transform global coordinates to current coordinates.</param>
            <param name="isAutomatic">true if the geometry section is an automatically generated extension.</param>
            <returns>The geometry section node.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryImporter.ImportBendSurfaceGeometry(Tekla.Structures.ModelInternal.PointList,System.Int32,System.Int32,System.Int32,Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Imports the bend surface geometry section.
            </summary>
            <param name="pointList">The points list.</param>
            <param name="pointsCount1">Number of points in the first lateral boundary.</param>
            <param name="pointsCount2">Number of points in the second lateral boundary.</param>
            <param name="pointIndex">The index of the first processed point.</param>
            <param name="matrixToCurrent">The matrix to transform global coordinates to current coordinates.</param>
            <returns>The geometry section node.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GeometryImporter.ImportHelixGeometry(Tekla.Structures.ModelInternal.PointList,System.Int32,Tekla.Structures.Geometry3d.Matrix)">
            <summary>
            Imports the helix geometry section.
            </summary>
            <param name="pointList">The points list.</param>
            <param name="pointIndex">The index of the first processed point.</param>
            <param name="matrixToCurrent">The matrix to transform global coordinates to current coordinates.</param>
            <returns>The geometry section node.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.IntList">
            <summary>
            The IntList class defines a type safe list of integers.
            </summary>
            <example>
            The following example adds some integers to the list and calculates the sum of them:
            <code>
            using Tekla.Structures.ModelInternal;
            
            public class Example
            {
                   public void Example1()
                   {
                       int Sum = 0;
                       IntList MyIntList = new IntList();
            
                       MyIntList.Add(1);
                       MyIntList.Add(2);
                       MyIntList.Add(5);
            
                       foreach(int MyInt in MyIntList)
                       {
                           Sum += MyInt;
                       }
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.IntList.Item(System.Int32)">
            <summary>
            Gets or sets the integer at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.#ctor">
            <summary>
            Create an empty IntList.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create an IntList with content.
            </summary>
            <param name="integers">An IEnumberable of integers. All the objects must be int's.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Add(System.Int32)">
            <summary>
            Adds a new integer to the end of the string list.
            </summary>
            <param name="Value">The integer to be added to the list.</param>
            <returns>The index where the integer was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Contains(System.Int32)">
            <summary>
            Checks if the given integer is in the list.
            </summary>
            <param name="Value">The integer to be checked.</param>
            <returns>True if the integer is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32)">
            <summary>
            Gets the index of the specified integer.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start
            the search from and the end of the list.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified integer between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The integer to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the integer if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts the integer to the specified index.
            </summary>
            <param name="Index">The index where the integer is inserted.</param>
            <param name="Value">The integer to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a sub-list of the integer list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new integer list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.LastIndexOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the integer in the list.
            </summary>
            <param name="Value">The integer to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the integer if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.Remove(System.Int32)">
            <summary>
            Removes the first occurence of the integer from the list.
            </summary>
            <param name="Value">The integer to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.ToArray">
            <summary>
            Copies the integers to an integer array.
            </summary>
            <returns>The array of integers.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.IntList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetIntList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.NumberItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.NumberItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.aIntList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetIntList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.ToStruct(Tekla.Structures.ModelInternal.IntList)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetIntList_t.FromStruct(Tekla.Structures.ModelInternal.IntList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PointList">
            <summary>
            The PointList class defines a type safe point list.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.PointList.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Add(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Adds a new point to the end of the point list.
            </summary>
            <param name="Value">The point to be added to the list.</param>
            <returns>The index where the point was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Contains(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Checks if the given point is in the list.
            </summary>
            <param name="Value">The point to be checked.</param>
            <returns>True if the point is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Gets the index of the specified point.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search
            from and the end of the list.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified point between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The point to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the point if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Insert(System.Int32,Tekla.Structures.Geometry3d.Point)">
            <summary>
            Inserts the point to the specified index.
            </summary>
            <param name="Index">The index where the point is inserted.</param>
            <param name="Value">The point to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the point list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new point list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.LastIndexOf(Tekla.Structures.Geometry3d.Point,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the point in the list.
            </summary>
            <param name="Value">The point to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the point if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.Remove(Tekla.Structures.Geometry3d.Point)">
            <summary>
            Removes the first occurence of the point from the list.
            </summary>
            <param name="Value">The point to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.ToArray">
            <summary>
            Copies the points to a point array.
            </summary>
            <returns>The array of points.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PointList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetPointList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.NumberItems">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.NumberItemsInSet">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.aPointList">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetPointList_t.ClientId">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.ToStruct(Tekla.Structures.ModelInternal.PointList)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotnetPointList_t.FromStruct(Tekla.Structures.ModelInternal.PointList)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.StringList">
            <summary>
            The StringList class defines a type safe string collection.
            </summary>
            <example>
            <code>
            using Tekla.Structures.ModelInternal;
            
            public class Example
            {
                   public void Example1()
                   {
                       StringList stringList = new StringList();
            
                       stringList.Add("MyString");
                       stringList.Add("MySecondString");
                   }
            }
            </code>
            </example>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.StringList.Item(System.Int32)">
            <summary>
            Gets or sets the string at the specified index.
            </summary>
            <param name="Index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.#ctor(System.Int32)">
            <summary>
            Creates a new string list instance with the given capacity.
            </summary>
            <param name="Capacity">The capacity of the string list.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.#ctor">
            <summary>
            Creates a new string list instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Add(System.String)">
            <summary>
            Adds a new string to the end of the string list.
            </summary>
            <param name="Value">The string to be added to the list.</param>
            <returns>The index where the string was added.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Contains(System.String)">
            <summary>
            Checks if the string is in the list.
            </summary>
            <param name="Value">The string to be checked.</param>
            <returns>True if the string is in the list, otherwise false.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String)">
            <summary>
            Gets the index of the specified string.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start
            the search from and the end of the list.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the index of the specified string between the index to start the search from and StartIndex + Count.
            </summary>
            <param name="Value">The string to locate in the list.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The index of the string if found in the list, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts the string to the specified index.
            </summary>
            <param name="Index">The index where the string is inserted.</param>
            <param name="Value">The string to be inserted.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a part of the string list.
            </summary>
            <param name="Index">The start index of the new list.</param>
            <param name="Count">The number of items in the new list.</param>
            <returns>The new string list.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for the last occurence of the string in the list.
            </summary>
            <param name="Value">The string to locate.</param>
            <param name="StartIndex">The index to start the search from.</param>
            <param name="Count">The number of items searched.</param>
            <returns>The last index of the string if found, otherwise -1.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.Remove(System.String)">
            <summary>
            Removes the first occurence of the string from the list.
            </summary>
            <param name="Value">The string to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items starting from the given index.
            </summary>
            <param name="Index">The start index.</param>
            <param name="Count">The number of items to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.ToArray">
            <summary>
            Copies the strings to a string array.
            </summary>
            <returns>The array of strings.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.StringList.IsEqual(System.Object)">
            <summary>
            Compares the current object with an object of the same type.
            </summary>
            <param name="ObjectToCompare">The object to be used for comparing.</param>
            <returns>True if all the fields (except for the database GUID) of the objects match.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotnetStringList_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.IndexCurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.CurrentItem">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotnetStringList_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotClipPlane_t">
            <summary>
            View ClipPlane struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.ID">
            <summary> Clipplane ID </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.Location">
            <summary> Clipplane location in global coordinates (XYZ) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.UpVector">
            <summary> Clipplane up vector (Roll) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.IsBorderVisible">
            <summary> Clipplane border visibility </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotClipPlane_t.IsScissorVisible">
            <summary> Clipplane scissor icon visibility </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotColor_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Red">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Green">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Blue">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotColor_t.Transparency">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicFace">
            <summary>
            Graphic object is a container for drawable object in Tekla Structures model view
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicFace.Polygon">
            <summary>
            Defines face position points in plane.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicFace.Color">
            <summary>
            Defines color of the face.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicFace.#ctor(Tekla.Structures.Model.Polygon,Tekla.Structures.Model.UI.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.GraphicFace" /> class.
            Default color is solid black.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicLine">
            <summary>
            Graphic line is a container for drawable line in Tekla Structures model view
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicLine.Line">
            <summary>
            Defines line position points.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicLine.Color">
            <summary>
            Defines color for line.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicLine.Width">
            <summary>
            Defines line width.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicLine.#ctor(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.Model.UI.Color,Tekla.Structures.ModelInternal.GraphicObjectContainer.LineWidth)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.GraphicLine" /> class.
            Default color is solid black.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicObjectContainer">
            <summary>
            Graphic object is a container for drawable object in Tekla Structures model view
            Graphic object contains a group of graphical elements
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GraphicObjectContainer.schema">
            <summary>
            Schema of container (mandatory)
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Id">
            <summary>
            Id of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Schema">
            <summary>
            Schema of container (mandatory)
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.DefaultColor">
            <summary>
            Id of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Points">
            <summary>
            Points of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Lines">
            <summary>
            Lines of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.PolyLines">
            <summary>
            Polylines of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Surfaces">
            <summary>
            Surfaces of container
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicObjectContainer.Texts">
            <summary>
            Texts of container
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicObjectContainer.LineWidth">
            <summary>
            Defines width for line class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GraphicObjectContainer.LineWidth.LINEWIDTH1">
            <summary>
            Defines width for line class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GraphicObjectContainer.LineWidth.LINEWIDTH2">
            <summary>
            Defines width for line class.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.GraphicObjectContainer.LineWidth.LINEWIDTH4">
            <summary>
            Defines width for line class.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicObjectContainer.#ctor(System.String,Tekla.Structures.Model.UI.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.GraphicObjectContainer" /> class.
            Default color is solid black.
            Currently line type of <see cref="T:Tekla.Structures.Model.UI.GraphicPolyLine" /> class is not used.
            </summary>
            <param name="schema">The mandatory schema used for identification of type of container.</param>
            <param name="color">The default color for objects in container.</param>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Color">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Width">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicPolyLine_t.ClientId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawText_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.Location">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.aText">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawText_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawPolyLine_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolyLine_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolyLine_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t.Polygon">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotDrawPolygonSurface_t.Color">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t.Guid">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGraphicObjectContainer_t.aSchema">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicsRenderer">
            <summary>
            For internal usage only for testing! Temporary class until new rendering is published 
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicsRenderer.#ctor">
            <summary>
            Creates a new graphics drawer instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicsRenderer.Draw(Tekla.Structures.ModelInternal.GraphicObjectContainer)">
            <summary>
            Draw a graphical object containing lines, polylines, surfaces and textss to all open Tekla Structures views.
            </summary>
            <param name="graphicObject">The graphical object to draw.</param>
            <returns>True in success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicsRenderer.RemoveGraphicObjectContainer(Tekla.Structures.ModelInternal.GraphicObjectContainer)">
            <summary>
            Remove a graphic object container from all views.
            </summary>
            <param name="graphicObject">The object to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicsRenderer.RemoveGraphicObjectContainers(System.Collections.Generic.List{Tekla.Structures.ModelInternal.GraphicObjectContainer})">
            <summary>
            Remove a graphic object container from all views.
            </summary>
            <param name="graphicObjects">The object to be removed.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicsRenderer.RemoveAllGraphicObjectContainers(System.String)">
            <summary>
            Remove all graphic object containers from all views.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.GraphicText">
            <summary>
            Graphic object is a container for drawable object in Tekla Structures model view
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicText.Text">
            <summary>
            Defines text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicText.Color">
            <summary>
            Color of the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicText.Size">
            <summary>
            Size of the text.
            </summary>
        </member>
        <member name="P:Tekla.Structures.ModelInternal.GraphicText.Point">
            <summary>
            Position of the text.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.GraphicText.#ctor(System.String,Tekla.Structures.Geometry3d.Point,Tekla.Structures.Model.UI.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.GraphicText" /> class.
            Default color is solid black.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.InputTypeEnum">
            <summary>
            The possible input types for input geometry objects.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.InputTypeEnum.LINE">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.InputTypeEnum.POLYLINE">
            <summary>
            PolyLine type.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.InputTypeEnum.POLYGON">
            <summary>
            Polygon type.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.InputGeometry">
            <summary>
            The input geometry class is used for creating a direct modification object for a tool. 
            It has to be connected to eventhandler which listens geometry changes from the user.
            </summary>
            <example>
            The following example shows how to create a slab and modify it's geometry based on direct modification object changes.
            Events are unregistered when user selects something in the model
            <code>
               using Tekla.Structures.Geometry3d;
               using Tekla.Structures.Model;
               using Tekla.Structures.Model.UI;
               
               public class Example
               {
                   private Model model = new Model();
                   private InputGeometryEvents uiEvents = new InputGeometryEvents();
                   private Tekla.Structures.Model.Events events = new Tekla.Structures.Model.Events();
                   private object selectionEventHandlerLock = new object();
                   private object changedObjectHandlerLock = new object();
                   private ContourPlate cp = new ContourPlate();
                   private InputGeometry input = null;
                   
                   public void Example1()
                   {
                       uiEvents.PointInputChanged += Events_InputObjectChangedEvent;
                       uiEvents.Register();
                   
                       events.SelectionChange += Events_SelectionChangeEvent;
                       events.Register();
                       
                       cp.AddContourPoint(new ContourPoint(new Point( 3000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000,  6000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 6000, 12000, 0),null));
                       cp.AddContourPoint(new ContourPoint(new Point( 3000, 12000, 0),null));
            
                       if (!cp.Insert())
                           Console.WriteLine("ContourPlate Insert failed!");    
                       else 
                       {
                           model.CommitChanges();
                           Polygon polygon = new Polygon();
                           foreach (ContourPoint p in cp.Contour.ContourPoints)
                               polygon.Points.Add(new TSG.Point(p.X, p.Y, p.Z));
                           input = new InputGeometry(polygon, uiEvents);
                           input.DrawObject("testing..");
                       }
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       uiEvents.UnRegister();
                       events.UnRegister();
                   }
                   
                   void Events_InputObjectChangedEvent(List&lt;ContourPoint> changes)
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock (changedObjectHandlerLock)
                       {
                           if (cp != null)
                           {
                               cp.Contour.ContourPoints.Clear();
                               foreach (ContourPoint point in points)
                                   cp.AddContourPoint(point);
                               cp.Modify();
                               model.CommitChanges();
                           }
                       }
                   }
                   
                   void Events_SelectionChangeEvent()
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock(_selectionEventHandlerLock)
                       {
                           if(input != null)
                               input.RemoveObject();
                           System.Console.WriteLine("Selection changed event received.");
                           uiEvents.UnRegister();
                           events.UnRegister();
                       }
                   }
              }
            </code>
            </example>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.#ctor(Tekla.Structures.Geometry3d.LineSegment,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <summary>
            Creates a new InputGeometry instance for line.
            </summary>
            <param name="line">The line to be used in input object.</param>
            <param name="events">The attached event listener.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.#ctor(Tekla.Structures.Model.Polygon,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <summary>
            Creates a new InputGeometry instance for polygon.
            </summary>
            <param name="polygon">The polygon to be used in input object.</param>
            <param name="events">The attached event listener.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.#ctor(Tekla.Structures.Geometry3d.PolyLine,Tekla.Structures.ModelInternal.InputGeometryEvents)">
            <summary>
            Creates a new InputGeometry instance for polyline.
            </summary>
            <param name="polyLine">The polyline to be used in input object.</param>
            <param name="events">The attached event listener.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.#ctor(System.Collections.Generic.List{Tekla.Structures.Model.ContourPoint},Tekla.Structures.ModelInternal.InputGeometryEvents,System.Boolean)">
            <summary>
            Creates a new InputGeometry instance for polyline.
            </summary>
            <param name="contour">The contour points to be used in input object.</param>
            <param name="events">The attached event listener.</param>
            <param name="closed">Optional parameter to define if polyLine is closed or not (== default).</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.DrawObject(System.String)">
            <summary>
            Draws created input geometry to view. Changes are sent to attached event listener
            </summary>
            <param name="prompt">The display prompt.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometry.RemoveObject(System.String)">
            <summary>
            Stops listening of events and destroys object from the view
            </summary>
            <param name="prompt">The display prompt.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotInputGeometry_t">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotInputGeometry_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotInputGeometry_t.InputTypeEnum">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.InputGeometryEvents">
            <summary>
            The InputGeometryEvents class allows the user to register event listeners for input geometry events.
            </summary>
            <remarks>
            Asynchronous event handling
            <para>Registered event handlers are called asynchronously so that many handlers may be running
            simultaneously. Event handlers are not guaranteed to be run in the same thread where they were registered.
            The asynchronous nature of the events requires the use of synchronization constructs on objects
            and data structures that are not defined to be thread safe.</para>
            <para>
            <list type="bullet">
            <item>Microsoft's documentation about the lock statement: http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx</item>
            <item>Microsoft's documentation about delegates: http://msdn.microsoft.com/en-us/library/900fyy8e.aspx</item>
            <item>Microsoft's documentation about managed threading: http://msdn.microsoft.com/en-us/library/1c9txz50.aspx</item>
            </list>
            </para>
            </remarks>
            <example>
            The following example shows how to make sure that only one selection event handler is running at a time.
            <code>
               using Tekla.Structures.Geometry3d;
               using Tekla.Structures.Model;
               using Tekla.Structures.Model.UI;
               using Tekla.Structures.ModelInternal;
               
               public class Example
               {
                   private InputGeometryEvents _events = new InputGeometryEvents();
                   private object _changedObjectHandlerLock = new object();
                   
                   public void RegisterEventHandler()
                   {
                       _events.PointInputChanged += Events_OnputObjectChangedEvent;
                       _events.Register();
                   }
                   
                   public void UnRegisterEventHandler()
                   {
                       _events.UnRegister();
                   }
                   
                   void Events_OnputObjectChangedEvent(List&lt;Point> changes)
                   {
                       /* Make sure that the inner code block is running synchronously */
                       lock (_changedObjectHandlerLock)
                       {
                           foreach(Point data in changes)
                               System.Console.WriteLine("Changed point received " + ":" + data.ToString());
                       }
                   }
              }
            </code>
            </example>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.InputGeometryEvents.PointInputChangedDelegate">
            <summary>
            The delegate to use for input geometry point changes.
            </summary>
        </member>
        <member name="E:Tekla.Structures.ModelInternal.InputGeometryEvents.PointInputChanged">
            <summary>
            The PointInputChanged event is raised when the user changes the input geometry ins Tekla Structures view.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometryEvents.OnPointInputChangedEvent(System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometryEvents.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.
            </summary>
            <returns>Always null.</returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometryEvents.#ctor">
            <summary>
            Creates an empty events instance.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometryEvents.Register">
            <summary>
            Registers the instance to listen to the specified events.
            More event delegates should not be added without calling UnRegister
            first.
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.InputGeometryEvents.UnRegister">
            <summary>
            Unregisters the instance from listening to events.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t">
            <summary>
            Struct for UI selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.Functionality">
            <summary>
            FunctionalityEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.nObjects">
            <summary>
            Number of objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.aObjects">
            <summary>
            IDs
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.ShowDimensions">
            <summary>
            ShowDimensions when selecting
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIModelObjectSelector_t.SuppressCallbacks">
            <summary>
            Suppress the callbacks
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotViewSelector_t">
            <summary>
            Struct for ModelViewSelector
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.ClientId">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.ViewCount">
            <summary> Number of returned views. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewSelector_t.SelectorType">
            <summary> Defines what type of views are fetched. </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PickerInternal">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PickerInternal.PickType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickType.PICK_POINTS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickType.PICK_OBJECT">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickType.PICK_OBJECTS">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickType.PICK_LINE">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickType.PICK_FACE">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType">
            <summary>
            The possible model object pick types.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.AnyObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.Part">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.Weld">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.BoltGroup">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.Reinforcement">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.AnyAnalysisObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.AnalysisPart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.AnalysisNode">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickObjectType.AnalysisNodeLink">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PickerInternal.PickObject(Tekla.Structures.ModelInternal.PickerInternal.PickType,Tekla.Structures.ModelInternal.PickerInternal.PickObjectType,System.String)">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.PickerInternal.PickObjects(Tekla.Structures.ModelInternal.PickerInternal.PickType,Tekla.Structures.ModelInternal.PickerInternal.PickObjectType,System.String)">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.PickerInternal.PickedObject">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickedObject.ObjectType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.PickerInternal.PickedObject.ObjectId">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.SyncHandler">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotUIPicker_t">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotUIPicker_t.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.MaxPicks">
            <summary>
            The expected length of all arrays associated to the pick result.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickType">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickEnum">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nPoints">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.Prompt">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aX">
            <summary>
            The x-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aY">
            <summary>
            The y-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aZ">
            <summary>
            The z-coordinates of all points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.IsReferencePointAvailable">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aRefX">
            <summary>
            The x-coordinate of reference point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aRefY">
            <summary>
            The y-coordinate of reference point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aRefZ">
            <summary>
            The z-coordinate of reference point.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.PickCommandStart">
            <summary>
            Indicates an actual start of pick command, handled in cdelegate.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.MoreObjectsLeft">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.nObjectToStart">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aObjects">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.aObjectTypes">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotUIPicker_t.SyncCallback">
            <exclude/>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotUIPicker_t.Construct">
            <summary>
            Constructs a new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotUIPicker_t"/> struct.
            </summary>
            <returns>A new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotUIPicker_t"/> struct.</returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum">
            <summary> 
            The possible temporary states. Used to temporarily change color
               of a model object to visualize some state in the model.
               Only use a state for its named purpose. If you need to make some
               part orange even though it is not a modified part, talk to TORI
               or ERFA about adding a new state. Do not use DOT_TEMPORARY_STATE_MODIFIED
               unless the part is actually modified.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_UNKNOWN">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_NEW">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_MODIFIED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_DELETED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_DM_ONGOING">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_UNCHANGED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ACTIVE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ORIGINAL">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ACCEPTED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_REJECTED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_USE_EXISTING_REPRESENTATION">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_UNCHANGED_NATIVE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_CHANGED_NATIVE">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_JUST_CONVERTED">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryStatesEnum.DOT_TEMPORARY_STATE_ERROR">
            <summary>
            DO NOT USE! For internal usage only!
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum">
            <summary> 
            The possible temporary transparencies. Used to temporarily change transparency
               of a model object to visualize some state in the model.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_HIDDEN">
            <summary>
            Object is hidden.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_TRANSPARENT">
            <summary>
            Object is transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_SEMITRANSPARENT">
            <summary>
            Object is semi transparent.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_SEMIVISIBLE">
            <summary>
            Object is almost fully visible.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum.DOT_TEMPORARY_TRANSPARENCY_VISIBLE">
            <summary>
            Object is fully visible.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotTemporaryState">
            <summary>//TODO </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotTemporaryState.OBJECT_MAX_SIZE">
            <summary>
            Maximum amount of elements in one function call
            </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            Set state for all objects
            </summary>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            Set state for all objects
            Transparency is VISIBLE. 
            </summary>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.Model.ModelObject,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            Set state for one object.
            Transparency is VISIBLE. 
            </summary>
            <param name="MO"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState_FAST(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState_FAST(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.ModelInternal.dotTemporaryStatesEnum,Tekla.Structures.ModelInternal.dotTemporaryTransparenciesEnum)">
            <summary>
            </summary>
            <param name="Identifiers"></param>
            <param name="State"></param>
            <param name="Transparency"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            </summary>
            <param name="Identifiers"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(System.Collections.ArrayList,Tekla.Structures.ModelInternal.dotTemporaryStatesEnum)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="State"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetState(Tekla.Structures.Model.UI.Color)">
            <summary>
            Set color for all objects
            </summary>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetColor(Tekla.Structures.Model.ModelObject,Tekla.Structures.Model.UI.Color)">
            <summary>
            Set color for one object.
            </summary>
            <param name="MO"></param>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetColor(System.Collections.ArrayList,Tekla.Structures.Model.UI.Color)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetColor_FAST(System.Collections.ArrayList,Tekla.Structures.Model.UI.Color)">
            <summary>
            </summary>
            <param name="ModelObjects"></param>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.SetColor_FAST(System.Collections.Generic.List{Tekla.Structures.Identifier},Tekla.Structures.Model.UI.Color)">
            <summary>
            </summary>
            <param name="Identifiers"></param>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.ClearState(Tekla.Structures.Model.ModelObject)">
            <summary>
            </summary>
            <param name="MO"></param>
            <returns></returns>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotTemporaryState.ClearAllStates">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t">
            <summary>
            Struct for UI selection
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.State">
            <summary>
            FunctionalityEnum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.Transparency">
            <summary>
            Transparency enum
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.nObjects">
            <summary>
            Number of objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.AllObjects">
            <summary>
            All objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.aObjectIDs">
            <summary>
            IDs
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryStates_t.aObjectSubIDs">
            <summary>
            Sub IDs
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t">
            <summary>
            Struct for setting temporary colors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t.Color">
            <summary>
            Color to set
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t.nObjects">
            <summary>
            Number of objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t.AllObjects">
            <summary>
            All objects
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t.aObjectIDs">
            <summary>
            IDs
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotSetTemporaryColors_t.aObjectSubIDs">
            <summary>
            Sub IDs
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotView_t">
            <summary> Struct for ModelView </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.Identifier">
            <summary> Internal number of the View. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ModifyType">
            <summary> Tells how the View is modified. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aName">
            <summary> Defines the View Name. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewCoordinateSystem">
            <summary> View Plane Coordinate System </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.DisplayCoordinateSystem">
            <summary> Display Plane Coordinate System </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.MinPoint">
            <summary> MinPoint of Work Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.MaxPoint">
            <summary> MaxPoint of Work Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aRepresentation">
            <summary> Defines the representation filter. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewDepthUp">
            <summary> View Depth Up </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewDepthDown">
            <summary> View Depth Down </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.DisplayOrientationType">
            <summary> Display angle type </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewProjectionType">
            <summary> View projection </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ViewRenderingType">
            <summary> The view rendering type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ZoomMinPoint">
            <summary> MinPoint of Zoom Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.ZoomMaxPoint">
            <summary> MaxPoint of Zoom Area </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.aViewFilter">
            <summary> Defines the View Filter. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.SharedView">
            <summary> Tells if View is shared if model is shared. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotView_t.VisibilitySettings">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotGetClipPlanes_t">
            <summary> Struct for ClipPlanes </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.nPlanes">
            <summary>
            The number of clipplanes of view, max number is 6.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aPlaneIDs">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aIsBorderVisible">
            <summary>
            The visibility of the clipplanes borders.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aIsScissorVisible">
            <summary>
            The visibility of the clipplanes scissor icons.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aX">
            <summary>
            The x-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aY">
            <summary>
            The y-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aZ">
            <summary>
            The z-coordinates of all location points.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpX">
            <summary>
            The x-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpY">
            <summary>
            The y-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotGetClipPlanes_t.aUpZ">
            <summary>
            The z-coordinates of all up direction vectors.
            </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotCamera_t">
            <summary>
            View Camera struct
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.Location">
            <summary> Camera location in global coordinates (XYZ) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.DirectionVector">
            <summary> Camera direction (Pan and Tilt) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.UpVector">
            <summary> Camera up vector (Roll) </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.FieldOfView">
            <summary> Perspective view camera field of view  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotCamera_t.ZoomFactor">
            <summary> Otrogonal view camera zoom factor  </summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t">
            <summary> Struct for ModelView visibility settings</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PointsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PartsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.BoltsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.BoltHolesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.WeldsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ConstructionPlanesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.RebarsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.SurfaceTreatmentsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PoursVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PourBreaksVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.LoadsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.CutsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.FittingsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ComponentsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.GridsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ConstructionLinesVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ReferenceObjectsVisible">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PointsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.PartsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.BoltsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.BoltHolesVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.WeldsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ConstructionPlanesVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.RebarsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.CutsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.FittingsVisibleInComponents">
            <exclude/>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotViewVisibilitySettings_t.ComponentsVisibleInComponents">
            <exclude/>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWeld_t">
            <summary> Struct for the BaseWeld Object. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ModelObject">
            <summary> The object we are extending (Inherited from). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.MainObject">
            <summary> Defines the main part of the Weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SecondaryObject">
            <summary> Defines the secondary part of the Weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SizeAbove">
            <summary> Defines the Size Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AdditionalSizeAbove">
            <summary> Defines the additional size above for combination welds. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.TypeAbove">
            <summary> Defines the Type Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AngleAbove">
            <summary> Defines the Angle Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ContourAbove">
            <summary> Defines the Contour Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.FinishAbove">
            <summary> Defines the Finish Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LengthAbove">
            <summary> Defines the Length Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PitchAbove">
            <summary> Defines the Pitch Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IncrementAmountAbove">
            <summary> Defines the weld increment amount above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.SizeBelow">
            <summary> Defines the Size Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AdditionalSizeBelow">
            <summary> Defines the additional size below for combination welds. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.TypeBelow">
            <summary> Defines the Type Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AngleBelow">
            <summary> Defines the Angle Below.  </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ContourBelow">
            <summary> Defines the Contour Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.FinishBelow">
            <summary> Defines the Finish Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LengthBelow">
            <summary> Defines the Length Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PitchBelow">
            <summary> Defines the Pitch Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IncrementAmountBelow">
            <summary> Defines the weld increment amount below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.aReferenceText">
            <summary> Defines the Reference Text. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ShopWeld">
            <summary>
            Defines whether it is a Shop Weld or a Site Weld. 
            If true then it is a Shop Weld.
            If false then it is a Site Weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.AroundWeld">
            <summary>
            Defines whether it is an Around Weld or an Edge Weld.
            If true then it is an Around Weld.
            If false then it is an Edge Weld.
            </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootOpeningAbove">
            <summary> Defines the Root Opening Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Position">
            <summary> Defines the Position. For more accurate control use Direction(preferred). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Direction">
            <summary> Defines the Weld edge search direction. Overrides Position if set.</summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.StitchWeld">
            <summary> Defines if it is Stitch Weld or not. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootFaceAbove">
            <summary> Defines the Root Face Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.EffectiveThroatAbove">
            <summary> Defines the Effective Throat Above. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PrefixAboveLine">
            <summary> Defines the Size Prefix Above Line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.PrefixBelowLine">
            <summary> Defines the Size Prefix Below Line. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Standard">
            <summary> Defines the Weld Detail/Standard. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeClassification">
            <summary> Defines the Weld Classification. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeStrength">
            <summary> Defines the Electrode Strength. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ElectrodeCoefficient">
            <summary> Defines the Electrode Strength Coefficient. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ProcessType">
            <summary> Defines the Process Type. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.NDTInspection">
            <summary> Defines the NDT Inspection Level. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LogicalWeld">
            <summary> Defines the children welds of a Logical Weld </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.WeldNumber">
            <summary> Defines the Weld Number. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.WeldNumberPrefix">
            <summary> Defines the Weld Number Prefix. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ConnectAssemblies">
            <summary> Defines connect as secondary part (false) or as sub-assembly (true). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.LogicalWeldID">
            <summary> Defines the Logical Weld ID. Is equal to 0 if Weld is not Child. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootOpeningBelow">
            <summary> Defines the Root Opening Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.RootFaceBelow">
            <summary> Defines the Root Face Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.EffectiveThroatBelow">
            <summary> Defines the Effective Throat Below. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.IntermittentType">
            <summary> Defines the weld intermittent type (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Placement">
            <summary> Defines the weld placement (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.Preparation">
            <summary> Defines the weld preparation (Enum). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeld_t.ClientId">
            <summary> Defines weld client id</summary>
        </member>
        <member name="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t">
            <summary> Struct for the WeldGeometry object. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.WeldId">
            <summary> Identifier of the weld. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.Position">
            <summary> Enum to indicate seam position (above or below). </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.NumberOfPolygons">
            <summary> Number of polygons. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.PolygonIndex">
            <summary> Determines the current polygon index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.PointIndex">
            <summary> Defines the current polygon point index. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.MorePoints">
            <summary> Determines if there are still more points in one polygon that must be fetched. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.MaxPolygonPoints">
            <summary> Determines the maximum amount of polygon points per each request. </summary>
        </member>
        <member name="F:Tekla.Structures.ModelInternal.dotWeldGeometry_t.Polygon">
            <summary> Defines one polygon of a weld seam. </summary>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotWeldGeometry_t.#ctor(Tekla.Structures.Identifier,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct.
            </summary>
            <param name="weldId">Weld identifier.</param>
            <param name="position">Position of the seam (above or below).</param>
            <param name="maxPolygonPointsPerRequest">Maximum polygon points per request.</param>
        </member>
        <member name="M:Tekla.Structures.ModelInternal.dotWeldGeometry_t.CopyAndInitialize">
            <summary>
            Makes a copy of another <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct and initializes the weld geometry polygon.
            </summary>
            <returns>An instance of the <see cref="T:Tekla.Structures.ModelInternal.dotWeldGeometry_t"/> struct.</returns>
        </member>
        <member name="T:FlatBuffers.ByteBuffer">
            <summary>
            Class to mimic Java's ByteBuffer which is used heavily in Flatbuffers.
            </summary>
        </member>
        <member name="T:FlatBuffers.FlatBufferBuilder">
            <summary>
            Responsible for building up and accessing a FlatBuffer formatted byte
            array (via ByteBuffer).
            </summary>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.#ctor(System.Int32)">
            <summary>
            Create a FlatBufferBuilder with a given initial size.
            </summary>
            <param name="initialSize">
            The initial size to use for the internal buffer.
            </param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.Clear">
            <summary>
            Reset the FlatBufferBuilder by purging all data that it holds.
            </summary>
        </member>
        <member name="P:FlatBuffers.FlatBufferBuilder.ForceDefaults">
             <summary>
             Gets and sets a Boolean to disable the optimization when serializing
             default values to a Table.
            
             In order to save space, fields that are set to their default value
             don't get serialized into the buffer.
             </summary>
        </member>
        <member name="P:FlatBuffers.FlatBufferBuilder.Offset">
            @cond FLATBUFFERS_INTERNAL
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddBool(System.Boolean)">
            <summary>
            Add a `bool` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `bool` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddSbyte(System.SByte)">
            <summary>
            Add a `sbyte` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `sbyte` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddByte(System.Byte)">
            <summary>
            Add a `byte` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `byte` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddShort(System.Int16)">
            <summary>
            Add a `short` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `short` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUshort(System.UInt16)">
            <summary>
            Add an `ushort` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `ushort` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddInt(System.Int32)">
            <summary>
            Add an `int` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `int` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUint(System.UInt32)">
            <summary>
            Add an `uint` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `uint` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddLong(System.Int64)">
            <summary>
            Add a `long` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `long` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUlong(System.UInt64)">
            <summary>
            Add an `ulong` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `ulong` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddFloat(System.Single)">
            <summary>
            Add a `float` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `float` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddDouble(System.Double)">
            <summary>
            Add a `double` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `double` to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddOffset(System.Int32)">
            <summary>
            Adds an offset, relative to where it will be written.
            </summary>
            <param name="off">The offset to add to the buffer.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.StartVector(System.Int32,System.Int32,System.Int32)">
            FLATBUFFERS_INTERNAL
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.EndVector">
            <summary>
            Writes data necessary to finish a vector construction.
            </summary>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.CreateVectorOfTables``1(FlatBuffers.Offset{``0}[])">
            <summary>
            Creates a vector of tables.
            </summary>
            <param name="offsets">Offsets of the tables.</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.Nested(System.Int32)">
            cond FLATBUFFERS_INTENRAL
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddBool(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds a Boolean to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddSbyte(System.Int32,System.SByte,System.SByte)">
            <summary>
            Adds a SByte to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddByte(System.Int32,System.Byte,System.Byte)">
            <summary>
            Adds a Byte to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddShort(System.Int32,System.Int16,System.Int32)">
            <summary>
            Adds a Int16 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUshort(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Adds a UInt16 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an Int32 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUint(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Adds a UInt32 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddLong(System.Int32,System.Int64,System.Int64)">
            <summary>
            Adds an Int64 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddUlong(System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Adds a UInt64 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddFloat(System.Int32,System.Single,System.Double)">
            <summary>
            Adds a Single to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddDouble(System.Int32,System.Double,System.Double)">
            <summary>
            Adds a Double to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddOffset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a buffer offset to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.CreateString(System.String)">
            <summary>
            Encode the string `s` in the buffer using UTF-8.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>
            The offset in the buffer where the encoded string starts.
            </returns>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.AddStruct(System.Int32,System.Int32,System.Int32)">
            @cond FLATBUFFERS_INTERNAL
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.Finish(System.Int32)">
            <summary>
            Finalize a buffer, pointing to the given `root_table`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
        </member>
        <member name="P:FlatBuffers.FlatBufferBuilder.DataBuffer">
            <summary>
            Get the ByteBuffer representing the FlatBuffer.
            </summary>
            <remarks>
            This is typically only called after you call `Finish()`.
            The actual data starts at the ByteBuffer's current position,
            not necessarily at `0`.
            </remarks>
            <returns>
            Returns the ByteBuffer for this FlatBuffer.
            </returns>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.SizedByteArray">
            <summary>
            A utility function to copy and return the ByteBuffer data as a
            `byte[]`.
            </summary>
            <returns>
            A full copy of the FlatBuffer data.
            </returns>
        </member>
        <member name="M:FlatBuffers.FlatBufferBuilder.Finish(System.Int32,System.String)">
            <summary>
            Finalize a buffer, pointing to the given `rootTable`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
            <param name="fileIdentifier">
            A FlatBuffer file identifier to be added to the buffer before
            `root_table`.
            </param>
        </member>
        <member name="T:FlatBuffers.IFlatbufferObject">
            <summary>
            This is the base for both structs and tables.
            </summary>
        </member>
        <member name="T:FlatBuffers.Offset`1">
            <summary>
            Offset class for typesafe assignments.
            </summary>
        </member>
        <member name="T:FlatBuffers.Struct">
            <summary>
            All structs in the generated code derive from this class, and add their own accessors.
            </summary>
        </member>
        <member name="T:FlatBuffers.Table">
            <summary>
            All tables in the generated code derive from this struct, and add their own accessors.
            </summary>
        </member>
    </members>
</doc>
